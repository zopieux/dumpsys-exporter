//
// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.4
// source: frameworks/proto_logging/stats/enums/app/enums.proto

package app

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ActivityManagerInternal.java's APP_TRANSITION reasons.
type AppTransitionReasonEnum int32

const (
	AppTransitionReasonEnum_APP_TRANSITION_REASON_UNKNOWN AppTransitionReasonEnum = 0
	// The transition was started because we drew the splash screen.
	AppTransitionReasonEnum_APP_TRANSITION_SPLASH_SCREEN AppTransitionReasonEnum = 1
	// The transition was started because all app windows were drawn.
	AppTransitionReasonEnum_APP_TRANSITION_WINDOWS_DRAWN AppTransitionReasonEnum = 2
	// The transition was started because of a timeout.
	AppTransitionReasonEnum_APP_TRANSITION_TIMEOUT AppTransitionReasonEnum = 3
	// The transition was started because we drew a task snapshot.
	AppTransitionReasonEnum_APP_TRANSITION_SNAPSHOT AppTransitionReasonEnum = 4
	// The transition was started because it was a recents animation and we only needed to wait on
	// the wallpaper.
	AppTransitionReasonEnum_APP_TRANSITION_RECENTS_ANIM AppTransitionReasonEnum = 5
)

// Enum value maps for AppTransitionReasonEnum.
var (
	AppTransitionReasonEnum_name = map[int32]string{
		0: "APP_TRANSITION_REASON_UNKNOWN",
		1: "APP_TRANSITION_SPLASH_SCREEN",
		2: "APP_TRANSITION_WINDOWS_DRAWN",
		3: "APP_TRANSITION_TIMEOUT",
		4: "APP_TRANSITION_SNAPSHOT",
		5: "APP_TRANSITION_RECENTS_ANIM",
	}
	AppTransitionReasonEnum_value = map[string]int32{
		"APP_TRANSITION_REASON_UNKNOWN": 0,
		"APP_TRANSITION_SPLASH_SCREEN":  1,
		"APP_TRANSITION_WINDOWS_DRAWN":  2,
		"APP_TRANSITION_TIMEOUT":        3,
		"APP_TRANSITION_SNAPSHOT":       4,
		"APP_TRANSITION_RECENTS_ANIM":   5,
	}
)

func (x AppTransitionReasonEnum) Enum() *AppTransitionReasonEnum {
	p := new(AppTransitionReasonEnum)
	*p = x
	return p
}

func (x AppTransitionReasonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppTransitionReasonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[0].Descriptor()
}

func (AppTransitionReasonEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[0]
}

func (x AppTransitionReasonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppTransitionReasonEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppTransitionReasonEnum(num)
	return nil
}

// Deprecated: Use AppTransitionReasonEnum.Descriptor instead.
func (AppTransitionReasonEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{0}
}

// ActivityManager.java PROCESS_STATEs
// Next tag: 1021
type ProcessStateEnum int32

const (
	// Process state that is unknown to this proto file (i.e. is not mapped
	// by ActivityManager.processStateAmToProto()). Can only happen if there's a bug in the mapping.
	ProcessStateEnum_PROCESS_STATE_UNKNOWN_TO_PROTO ProcessStateEnum = 998
	// Not a real process state.
	ProcessStateEnum_PROCESS_STATE_UNKNOWN ProcessStateEnum = 999
	// Process is a persistent system process.
	ProcessStateEnum_PROCESS_STATE_PERSISTENT ProcessStateEnum = 1000
	// Process is a persistent system process and is doing UI.
	ProcessStateEnum_PROCESS_STATE_PERSISTENT_UI ProcessStateEnum = 1001
	// Process is hosting the current top activities. Note that this covers
	// all activities that are visible to the user.
	ProcessStateEnum_PROCESS_STATE_TOP ProcessStateEnum = 1002
	// Process is bound to a TOP app.
	ProcessStateEnum_PROCESS_STATE_BOUND_TOP ProcessStateEnum = 1020
	// Process is hosting a foreground service.
	ProcessStateEnum_PROCESS_STATE_FOREGROUND_SERVICE ProcessStateEnum = 1003
	// Process is hosting a service bound by the system or another foreground app.
	ProcessStateEnum_PROCESS_STATE_BOUND_FOREGROUND_SERVICE ProcessStateEnum = 1004
	// Process is important to the user, and something they are aware of.
	ProcessStateEnum_PROCESS_STATE_IMPORTANT_FOREGROUND ProcessStateEnum = 1005
	// Process is important to the user, but not something they are aware of.
	ProcessStateEnum_PROCESS_STATE_IMPORTANT_BACKGROUND ProcessStateEnum = 1006
	// Process is in the background transient so we will try to keep running.
	ProcessStateEnum_PROCESS_STATE_TRANSIENT_BACKGROUND ProcessStateEnum = 1007
	// Process is in the background running a backup/restore operation.
	ProcessStateEnum_PROCESS_STATE_BACKUP ProcessStateEnum = 1008
	// Process is in the background running a service. Unlike oom_adj, this
	// level is used for both the normal running in background state and the
	// executing operations state.
	ProcessStateEnum_PROCESS_STATE_SERVICE ProcessStateEnum = 1009
	// Process is in the background running a receiver. Note that from the
	// perspective of oom_adj, receivers run at a higher foreground level, but
	// for our prioritization here that is not necessary and putting them
	// below services means many fewer changes in some process states as they
	// receive broadcasts.
	ProcessStateEnum_PROCESS_STATE_RECEIVER ProcessStateEnum = 1010
	// Same as PROCESS_STATE_TOP but while device is sleeping.
	ProcessStateEnum_PROCESS_STATE_TOP_SLEEPING ProcessStateEnum = 1011
	// Process is in the background, but it can't restore its state so we want
	// to try to avoid killing it.
	ProcessStateEnum_PROCESS_STATE_HEAVY_WEIGHT ProcessStateEnum = 1012
	// Process is in the background but hosts the home activity.
	ProcessStateEnum_PROCESS_STATE_HOME ProcessStateEnum = 1013
	// Process is in the background but hosts the last shown activity.
	ProcessStateEnum_PROCESS_STATE_LAST_ACTIVITY ProcessStateEnum = 1014
	// Process is being cached for later use and contains activities.
	ProcessStateEnum_PROCESS_STATE_CACHED_ACTIVITY ProcessStateEnum = 1015
	// Process is being cached for later use and is a client of another cached
	// process that contains activities.
	ProcessStateEnum_PROCESS_STATE_CACHED_ACTIVITY_CLIENT ProcessStateEnum = 1016
	// Process is being cached for later use and has an activity that corresponds
	// to an existing recent task.
	ProcessStateEnum_PROCESS_STATE_CACHED_RECENT ProcessStateEnum = 1017
	// Process is being cached for later use and is empty.
	ProcessStateEnum_PROCESS_STATE_CACHED_EMPTY ProcessStateEnum = 1018
	// Process does not exist.
	ProcessStateEnum_PROCESS_STATE_NONEXISTENT ProcessStateEnum = 1019
)

// Enum value maps for ProcessStateEnum.
var (
	ProcessStateEnum_name = map[int32]string{
		998:  "PROCESS_STATE_UNKNOWN_TO_PROTO",
		999:  "PROCESS_STATE_UNKNOWN",
		1000: "PROCESS_STATE_PERSISTENT",
		1001: "PROCESS_STATE_PERSISTENT_UI",
		1002: "PROCESS_STATE_TOP",
		1020: "PROCESS_STATE_BOUND_TOP",
		1003: "PROCESS_STATE_FOREGROUND_SERVICE",
		1004: "PROCESS_STATE_BOUND_FOREGROUND_SERVICE",
		1005: "PROCESS_STATE_IMPORTANT_FOREGROUND",
		1006: "PROCESS_STATE_IMPORTANT_BACKGROUND",
		1007: "PROCESS_STATE_TRANSIENT_BACKGROUND",
		1008: "PROCESS_STATE_BACKUP",
		1009: "PROCESS_STATE_SERVICE",
		1010: "PROCESS_STATE_RECEIVER",
		1011: "PROCESS_STATE_TOP_SLEEPING",
		1012: "PROCESS_STATE_HEAVY_WEIGHT",
		1013: "PROCESS_STATE_HOME",
		1014: "PROCESS_STATE_LAST_ACTIVITY",
		1015: "PROCESS_STATE_CACHED_ACTIVITY",
		1016: "PROCESS_STATE_CACHED_ACTIVITY_CLIENT",
		1017: "PROCESS_STATE_CACHED_RECENT",
		1018: "PROCESS_STATE_CACHED_EMPTY",
		1019: "PROCESS_STATE_NONEXISTENT",
	}
	ProcessStateEnum_value = map[string]int32{
		"PROCESS_STATE_UNKNOWN_TO_PROTO":         998,
		"PROCESS_STATE_UNKNOWN":                  999,
		"PROCESS_STATE_PERSISTENT":               1000,
		"PROCESS_STATE_PERSISTENT_UI":            1001,
		"PROCESS_STATE_TOP":                      1002,
		"PROCESS_STATE_BOUND_TOP":                1020,
		"PROCESS_STATE_FOREGROUND_SERVICE":       1003,
		"PROCESS_STATE_BOUND_FOREGROUND_SERVICE": 1004,
		"PROCESS_STATE_IMPORTANT_FOREGROUND":     1005,
		"PROCESS_STATE_IMPORTANT_BACKGROUND":     1006,
		"PROCESS_STATE_TRANSIENT_BACKGROUND":     1007,
		"PROCESS_STATE_BACKUP":                   1008,
		"PROCESS_STATE_SERVICE":                  1009,
		"PROCESS_STATE_RECEIVER":                 1010,
		"PROCESS_STATE_TOP_SLEEPING":             1011,
		"PROCESS_STATE_HEAVY_WEIGHT":             1012,
		"PROCESS_STATE_HOME":                     1013,
		"PROCESS_STATE_LAST_ACTIVITY":            1014,
		"PROCESS_STATE_CACHED_ACTIVITY":          1015,
		"PROCESS_STATE_CACHED_ACTIVITY_CLIENT":   1016,
		"PROCESS_STATE_CACHED_RECENT":            1017,
		"PROCESS_STATE_CACHED_EMPTY":             1018,
		"PROCESS_STATE_NONEXISTENT":              1019,
	}
)

func (x ProcessStateEnum) Enum() *ProcessStateEnum {
	p := new(ProcessStateEnum)
	*p = x
	return p
}

func (x ProcessStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[1].Descriptor()
}

func (ProcessStateEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[1]
}

func (x ProcessStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProcessStateEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProcessStateEnum(num)
	return nil
}

// Deprecated: Use ProcessStateEnum.Descriptor instead.
func (ProcessStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{1}
}

// frameworks/base/services/core/java/com/android/server/am/OomAdjuster.java
// Proto enum equivalents for "OomAdjReason"
type OomChangeReasonEnum int32

const (
	OomChangeReasonEnum_OOM_ADJ_REASON_UNKNOWN_TO_PROTO   OomChangeReasonEnum = -1
	OomChangeReasonEnum_OOM_ADJ_REASON_NONE               OomChangeReasonEnum = 0
	OomChangeReasonEnum_OOM_ADJ_REASON_ACTIVITY           OomChangeReasonEnum = 1
	OomChangeReasonEnum_OOM_ADJ_REASON_FINISH_RECEIVER    OomChangeReasonEnum = 2
	OomChangeReasonEnum_OOM_ADJ_REASON_START_RECEIVER     OomChangeReasonEnum = 3
	OomChangeReasonEnum_OOM_ADJ_REASON_BIND_SERVICE       OomChangeReasonEnum = 4
	OomChangeReasonEnum_OOM_ADJ_REASON_UNBIND_SERVICE     OomChangeReasonEnum = 5
	OomChangeReasonEnum_OOM_ADJ_REASON_START_SERVICE      OomChangeReasonEnum = 6
	OomChangeReasonEnum_OOM_ADJ_REASON_GET_PROVIDER       OomChangeReasonEnum = 7
	OomChangeReasonEnum_OOM_ADJ_REASON_REMOVE_PROVIDER    OomChangeReasonEnum = 8
	OomChangeReasonEnum_OOM_ADJ_REASON_UI_VISIBILITY      OomChangeReasonEnum = 9
	OomChangeReasonEnum_OOM_ADJ_REASON_ALLOWLIST          OomChangeReasonEnum = 10
	OomChangeReasonEnum_OOM_ADJ_REASON_PROCESS_BEGIN      OomChangeReasonEnum = 11
	OomChangeReasonEnum_OOM_ADJ_REASON_PROCESS_END        OomChangeReasonEnum = 12
	OomChangeReasonEnum_OOM_ADJ_REASON_SHORT_FGS_TIMEOUT  OomChangeReasonEnum = 13
	OomChangeReasonEnum_OOM_ADJ_REASON_SYSTEM_INIT        OomChangeReasonEnum = 14
	OomChangeReasonEnum_OOM_ADJ_REASON_BACKUP             OomChangeReasonEnum = 15
	OomChangeReasonEnum_OOM_ADJ_REASON_SHELL              OomChangeReasonEnum = 16
	OomChangeReasonEnum_OOM_ADJ_REASON_REMOVE_TASK        OomChangeReasonEnum = 17
	OomChangeReasonEnum_OOM_ADJ_REASON_UID_IDLE           OomChangeReasonEnum = 18
	OomChangeReasonEnum_OOM_ADJ_REASON_STOP_SERVICE       OomChangeReasonEnum = 19
	OomChangeReasonEnum_OOM_ADJ_REASON_EXECUTING_SERVICE  OomChangeReasonEnum = 20
	OomChangeReasonEnum_OOM_ADJ_REASON_RESTRICTION_CHANGE OomChangeReasonEnum = 21
	OomChangeReasonEnum_OOM_ADJ_REASON_COMPONENT_DISABLED OomChangeReasonEnum = 22
)

// Enum value maps for OomChangeReasonEnum.
var (
	OomChangeReasonEnum_name = map[int32]string{
		-1: "OOM_ADJ_REASON_UNKNOWN_TO_PROTO",
		0:  "OOM_ADJ_REASON_NONE",
		1:  "OOM_ADJ_REASON_ACTIVITY",
		2:  "OOM_ADJ_REASON_FINISH_RECEIVER",
		3:  "OOM_ADJ_REASON_START_RECEIVER",
		4:  "OOM_ADJ_REASON_BIND_SERVICE",
		5:  "OOM_ADJ_REASON_UNBIND_SERVICE",
		6:  "OOM_ADJ_REASON_START_SERVICE",
		7:  "OOM_ADJ_REASON_GET_PROVIDER",
		8:  "OOM_ADJ_REASON_REMOVE_PROVIDER",
		9:  "OOM_ADJ_REASON_UI_VISIBILITY",
		10: "OOM_ADJ_REASON_ALLOWLIST",
		11: "OOM_ADJ_REASON_PROCESS_BEGIN",
		12: "OOM_ADJ_REASON_PROCESS_END",
		13: "OOM_ADJ_REASON_SHORT_FGS_TIMEOUT",
		14: "OOM_ADJ_REASON_SYSTEM_INIT",
		15: "OOM_ADJ_REASON_BACKUP",
		16: "OOM_ADJ_REASON_SHELL",
		17: "OOM_ADJ_REASON_REMOVE_TASK",
		18: "OOM_ADJ_REASON_UID_IDLE",
		19: "OOM_ADJ_REASON_STOP_SERVICE",
		20: "OOM_ADJ_REASON_EXECUTING_SERVICE",
		21: "OOM_ADJ_REASON_RESTRICTION_CHANGE",
		22: "OOM_ADJ_REASON_COMPONENT_DISABLED",
	}
	OomChangeReasonEnum_value = map[string]int32{
		"OOM_ADJ_REASON_UNKNOWN_TO_PROTO":   -1,
		"OOM_ADJ_REASON_NONE":               0,
		"OOM_ADJ_REASON_ACTIVITY":           1,
		"OOM_ADJ_REASON_FINISH_RECEIVER":    2,
		"OOM_ADJ_REASON_START_RECEIVER":     3,
		"OOM_ADJ_REASON_BIND_SERVICE":       4,
		"OOM_ADJ_REASON_UNBIND_SERVICE":     5,
		"OOM_ADJ_REASON_START_SERVICE":      6,
		"OOM_ADJ_REASON_GET_PROVIDER":       7,
		"OOM_ADJ_REASON_REMOVE_PROVIDER":    8,
		"OOM_ADJ_REASON_UI_VISIBILITY":      9,
		"OOM_ADJ_REASON_ALLOWLIST":          10,
		"OOM_ADJ_REASON_PROCESS_BEGIN":      11,
		"OOM_ADJ_REASON_PROCESS_END":        12,
		"OOM_ADJ_REASON_SHORT_FGS_TIMEOUT":  13,
		"OOM_ADJ_REASON_SYSTEM_INIT":        14,
		"OOM_ADJ_REASON_BACKUP":             15,
		"OOM_ADJ_REASON_SHELL":              16,
		"OOM_ADJ_REASON_REMOVE_TASK":        17,
		"OOM_ADJ_REASON_UID_IDLE":           18,
		"OOM_ADJ_REASON_STOP_SERVICE":       19,
		"OOM_ADJ_REASON_EXECUTING_SERVICE":  20,
		"OOM_ADJ_REASON_RESTRICTION_CHANGE": 21,
		"OOM_ADJ_REASON_COMPONENT_DISABLED": 22,
	}
)

func (x OomChangeReasonEnum) Enum() *OomChangeReasonEnum {
	p := new(OomChangeReasonEnum)
	*p = x
	return p
}

func (x OomChangeReasonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OomChangeReasonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[2].Descriptor()
}

func (OomChangeReasonEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[2]
}

func (x OomChangeReasonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OomChangeReasonEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OomChangeReasonEnum(num)
	return nil
}

// Deprecated: Use OomChangeReasonEnum.Descriptor instead.
func (OomChangeReasonEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{2}
}

// AppOpsManager.java - operation ids for logging
type AppOpEnum int32

const (
	AppOpEnum_APP_OP_NONE                         AppOpEnum = -1
	AppOpEnum_APP_OP_COARSE_LOCATION              AppOpEnum = 0
	AppOpEnum_APP_OP_FINE_LOCATION                AppOpEnum = 1
	AppOpEnum_APP_OP_GPS                          AppOpEnum = 2
	AppOpEnum_APP_OP_VIBRATE                      AppOpEnum = 3
	AppOpEnum_APP_OP_READ_CONTACTS                AppOpEnum = 4
	AppOpEnum_APP_OP_WRITE_CONTACTS               AppOpEnum = 5
	AppOpEnum_APP_OP_READ_CALL_LOG                AppOpEnum = 6
	AppOpEnum_APP_OP_WRITE_CALL_LOG               AppOpEnum = 7
	AppOpEnum_APP_OP_READ_CALENDAR                AppOpEnum = 8
	AppOpEnum_APP_OP_WRITE_CALENDAR               AppOpEnum = 9
	AppOpEnum_APP_OP_WIFI_SCAN                    AppOpEnum = 10
	AppOpEnum_APP_OP_POST_NOTIFICATION            AppOpEnum = 11
	AppOpEnum_APP_OP_NEIGHBORING_CELLS            AppOpEnum = 12
	AppOpEnum_APP_OP_CALL_PHONE                   AppOpEnum = 13
	AppOpEnum_APP_OP_READ_SMS                     AppOpEnum = 14
	AppOpEnum_APP_OP_WRITE_SMS                    AppOpEnum = 15
	AppOpEnum_APP_OP_RECEIVE_SMS                  AppOpEnum = 16
	AppOpEnum_APP_OP_RECEIVE_EMERGENCY_SMS        AppOpEnum = 17
	AppOpEnum_APP_OP_RECEIVE_MMS                  AppOpEnum = 18
	AppOpEnum_APP_OP_RECEIVE_WAP_PUSH             AppOpEnum = 19
	AppOpEnum_APP_OP_SEND_SMS                     AppOpEnum = 20
	AppOpEnum_APP_OP_READ_ICC_SMS                 AppOpEnum = 21
	AppOpEnum_APP_OP_WRITE_ICC_SMS                AppOpEnum = 22
	AppOpEnum_APP_OP_WRITE_SETTINGS               AppOpEnum = 23
	AppOpEnum_APP_OP_SYSTEM_ALERT_WINDOW          AppOpEnum = 24
	AppOpEnum_APP_OP_ACCESS_NOTIFICATIONS         AppOpEnum = 25
	AppOpEnum_APP_OP_CAMERA                       AppOpEnum = 26
	AppOpEnum_APP_OP_RECORD_AUDIO                 AppOpEnum = 27
	AppOpEnum_APP_OP_PLAY_AUDIO                   AppOpEnum = 28
	AppOpEnum_APP_OP_READ_CLIPBOARD               AppOpEnum = 29
	AppOpEnum_APP_OP_WRITE_CLIPBOARD              AppOpEnum = 30
	AppOpEnum_APP_OP_TAKE_MEDIA_BUTTONS           AppOpEnum = 31
	AppOpEnum_APP_OP_TAKE_AUDIO_FOCUS             AppOpEnum = 32
	AppOpEnum_APP_OP_AUDIO_MASTER_VOLUME          AppOpEnum = 33
	AppOpEnum_APP_OP_AUDIO_VOICE_VOLUME           AppOpEnum = 34
	AppOpEnum_APP_OP_AUDIO_RING_VOLUME            AppOpEnum = 35
	AppOpEnum_APP_OP_AUDIO_MEDIA_VOLUME           AppOpEnum = 36
	AppOpEnum_APP_OP_AUDIO_ALARM_VOLUME           AppOpEnum = 37
	AppOpEnum_APP_OP_AUDIO_NOTIFICATION_VOLUME    AppOpEnum = 38
	AppOpEnum_APP_OP_AUDIO_BLUETOOTH_VOLUME       AppOpEnum = 39
	AppOpEnum_APP_OP_WAKE_LOCK                    AppOpEnum = 40
	AppOpEnum_APP_OP_MONITOR_LOCATION             AppOpEnum = 41
	AppOpEnum_APP_OP_MONITOR_HIGH_POWER_LOCATION  AppOpEnum = 42
	AppOpEnum_APP_OP_GET_USAGE_STATS              AppOpEnum = 43
	AppOpEnum_APP_OP_MUTE_MICROPHONE              AppOpEnum = 44
	AppOpEnum_APP_OP_TOAST_WINDOW                 AppOpEnum = 45
	AppOpEnum_APP_OP_PROJECT_MEDIA                AppOpEnum = 46
	AppOpEnum_APP_OP_ACTIVATE_VPN                 AppOpEnum = 47
	AppOpEnum_APP_OP_WRITE_WALLPAPER              AppOpEnum = 48
	AppOpEnum_APP_OP_ASSIST_STRUCTURE             AppOpEnum = 49
	AppOpEnum_APP_OP_ASSIST_SCREENSHOT            AppOpEnum = 50
	AppOpEnum_APP_OP_READ_PHONE_STATE             AppOpEnum = 51
	AppOpEnum_APP_OP_ADD_VOICEMAIL                AppOpEnum = 52
	AppOpEnum_APP_OP_USE_SIP                      AppOpEnum = 53
	AppOpEnum_APP_OP_PROCESS_OUTGOING_CALLS       AppOpEnum = 54
	AppOpEnum_APP_OP_USE_FINGERPRINT              AppOpEnum = 55
	AppOpEnum_APP_OP_BODY_SENSORS                 AppOpEnum = 56
	AppOpEnum_APP_OP_READ_CELL_BROADCASTS         AppOpEnum = 57
	AppOpEnum_APP_OP_MOCK_LOCATION                AppOpEnum = 58
	AppOpEnum_APP_OP_READ_EXTERNAL_STORAGE        AppOpEnum = 59
	AppOpEnum_APP_OP_WRITE_EXTERNAL_STORAGE       AppOpEnum = 60
	AppOpEnum_APP_OP_TURN_SCREEN_ON               AppOpEnum = 61
	AppOpEnum_APP_OP_GET_ACCOUNTS                 AppOpEnum = 62
	AppOpEnum_APP_OP_RUN_IN_BACKGROUND            AppOpEnum = 63
	AppOpEnum_APP_OP_AUDIO_ACCESSIBILITY_VOLUME   AppOpEnum = 64
	AppOpEnum_APP_OP_READ_PHONE_NUMBERS           AppOpEnum = 65
	AppOpEnum_APP_OP_REQUEST_INSTALL_PACKAGES     AppOpEnum = 66
	AppOpEnum_APP_OP_PICTURE_IN_PICTURE           AppOpEnum = 67
	AppOpEnum_APP_OP_INSTANT_APP_START_FOREGROUND AppOpEnum = 68
	AppOpEnum_APP_OP_ANSWER_PHONE_CALLS           AppOpEnum = 69
	AppOpEnum_APP_OP_RUN_ANY_IN_BACKGROUND        AppOpEnum = 70
	AppOpEnum_APP_OP_CHANGE_WIFI_STATE            AppOpEnum = 71
	AppOpEnum_APP_OP_REQUEST_DELETE_PACKAGES      AppOpEnum = 72
	AppOpEnum_APP_OP_BIND_ACCESSIBILITY_SERVICE   AppOpEnum = 73
	AppOpEnum_APP_OP_ACCEPT_HANDOVER              AppOpEnum = 74
	AppOpEnum_APP_OP_MANAGE_IPSEC_TUNNELS         AppOpEnum = 75
	AppOpEnum_APP_OP_START_FOREGROUND             AppOpEnum = 76
	AppOpEnum_APP_OP_BLUETOOTH_SCAN               AppOpEnum = 77
	AppOpEnum_APP_OP_USE_BIOMETRIC                AppOpEnum = 78
	AppOpEnum_APP_OP_ACTIVITY_RECOGNITION         AppOpEnum = 79
	AppOpEnum_APP_OP_SMS_FINANCIAL_TRANSACTIONS   AppOpEnum = 80
	AppOpEnum_APP_OP_READ_MEDIA_AUDIO             AppOpEnum = 81
	AppOpEnum_APP_OP_WRITE_MEDIA_AUDIO            AppOpEnum = 82
	AppOpEnum_APP_OP_READ_MEDIA_VIDEO             AppOpEnum = 83
	AppOpEnum_APP_OP_WRITE_MEDIA_VIDEO            AppOpEnum = 84
	AppOpEnum_APP_OP_READ_MEDIA_IMAGES            AppOpEnum = 85
	AppOpEnum_APP_OP_WRITE_MEDIA_IMAGES           AppOpEnum = 86
	AppOpEnum_APP_OP_LEGACY_STORAGE               AppOpEnum = 87
	AppOpEnum_APP_OP_ACCESS_ACCESSIBILITY         AppOpEnum = 88
	AppOpEnum_APP_OP_READ_DEVICE_IDENTIFIERS      AppOpEnum = 89
	AppOpEnum_APP_OP_ACCESS_MEDIA_LOCATION        AppOpEnum = 90
	AppOpEnum_APP_OP_QUERY_ALL_PACKAGES           AppOpEnum = 91
	AppOpEnum_APP_OP_MANAGE_EXTERNAL_STORAGE      AppOpEnum = 92
	AppOpEnum_APP_OP_INTERACT_ACROSS_PROFILES     AppOpEnum = 93
	AppOpEnum_APP_OP_ACTIVATE_PLATFORM_VPN        AppOpEnum = 94
	AppOpEnum_APP_OP_LOADER_USAGE_STATS           AppOpEnum = 95
	// Deprecated: Marked as deprecated in frameworks/proto_logging/stats/enums/app/enums.proto.
	AppOpEnum_APP_OP_DEPRECATED_1                                     AppOpEnum = 96
	AppOpEnum_APP_OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED                AppOpEnum = 97
	AppOpEnum_APP_OP_AUTO_REVOKE_MANAGED_BY_INSTALLER                 AppOpEnum = 98
	AppOpEnum_APP_OP_NO_ISOLATED_STORAGE                              AppOpEnum = 99
	AppOpEnum_APP_OP_PHONE_CALL_MICROPHONE                            AppOpEnum = 100
	AppOpEnum_APP_OP_PHONE_CALL_CAMERA                                AppOpEnum = 101
	AppOpEnum_APP_OP_RECORD_AUDIO_HOTWORD                             AppOpEnum = 102
	AppOpEnum_APP_OP_MANAGE_ONGOING_CALLS                             AppOpEnum = 103
	AppOpEnum_APP_OP_MANAGE_CREDENTIALS                               AppOpEnum = 104
	AppOpEnum_APP_OP_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER              AppOpEnum = 105
	AppOpEnum_APP_OP_RECORD_AUDIO_OUTPUT                              AppOpEnum = 106
	AppOpEnum_APP_OP_SCHEDULE_EXACT_ALARM                             AppOpEnum = 107
	AppOpEnum_APP_OP_FINE_LOCATION_SOURCE                             AppOpEnum = 108
	AppOpEnum_APP_OP_COARSE_LOCATION_SOURCE                           AppOpEnum = 109
	AppOpEnum_APP_OP_MANAGE_MEDIA                                     AppOpEnum = 110
	AppOpEnum_APP_OP_BLUETOOTH_CONNECT                                AppOpEnum = 111
	AppOpEnum_APP_OP_UWB_RANGING                                      AppOpEnum = 112
	AppOpEnum_APP_OP_ACTIVITY_RECOGNITION_SOURCE                      AppOpEnum = 113
	AppOpEnum_APP_OP_BLUETOOTH_ADVERTISE                              AppOpEnum = 114
	AppOpEnum_APP_OP_RECORD_INCOMING_PHONE_AUDIO                      AppOpEnum = 115
	AppOpEnum_APP_OP_NEARBY_WIFI_DEVICES                              AppOpEnum = 116
	AppOpEnum_APP_OP_ESTABLISH_VPN_SERVICE                            AppOpEnum = 117
	AppOpEnum_APP_OP_ESTABLISH_VPN_MANAGER                            AppOpEnum = 118
	AppOpEnum_APP_OP_ACCESS_RESTRICTED_SETTINGS                       AppOpEnum = 119
	AppOpEnum_APP_OP_RECEIVE_AMBIENT_TRIGGER_AUDIO                    AppOpEnum = 120
	AppOpEnum_APP_OP_RECEIVE_EXPLICIT_USER_INTERACTION_AUDIO          AppOpEnum = 121
	AppOpEnum_APP_OP_RUN_USER_INITIATED_JOBS                          AppOpEnum = 122
	AppOpEnum_APP_OP_READ_MEDIA_VISUAL_USER_SELECTED                  AppOpEnum = 123
	AppOpEnum_APP_OP_SYSTEM_EXEMPT_FROM_SUSPENSION                    AppOpEnum = 124
	AppOpEnum_APP_OP_SYSTEM_EXEMPT_FROM_DISMISSIBLE_NOTIFICATIONS     AppOpEnum = 125
	AppOpEnum_APP_OP_READ_WRITE_HEALTH_DATA                           AppOpEnum = 126
	AppOpEnum_APP_OP_FOREGROUND_SERVICE_SPECIAL_USE                   AppOpEnum = 127
	AppOpEnum_APP_OP_SYSTEM_EXEMPT_FROM_POWER_RESTRICTIONS            AppOpEnum = 128
	AppOpEnum_APP_OP_SYSTEM_EXEMPT_FROM_HIBERNATION                   AppOpEnum = 129
	AppOpEnum_APP_OP_SYSTEM_EXEMPT_FROM_ACTIVITY_BG_START_RESTRICTION AppOpEnum = 130
	AppOpEnum_APP_OP_CAPTURE_CONSENTLESS_BUGREPORT_ON_USERDEBUG_BUILD AppOpEnum = 131
	// Deprecated: Marked as deprecated in frameworks/proto_logging/stats/enums/app/enums.proto.
	AppOpEnum_APP_OP_BODY_SENSORS_WRIST_TEMPERATURE            AppOpEnum = 132
	AppOpEnum_APP_OP_USE_FULL_SCREEN_INTENT                    AppOpEnum = 133
	AppOpEnum_APP_OP_CAMERA_SANDBOXED                          AppOpEnum = 134
	AppOpEnum_APP_OP_RECORD_AUDIO_SANDBOXED                    AppOpEnum = 135
	AppOpEnum_APP_OP_RECEIVE_SANDBOX_TRIGGER_AUDIO             AppOpEnum = 136
	AppOpEnum_APP_OP_RECEIVE_SANDBOXED_DETECTION_TRAINING_DATA AppOpEnum = 137
	AppOpEnum_APP_OP_CREATE_ACCESSIBILITY_OVERLAY              AppOpEnum = 138
	AppOpEnum_APP_OP_MEDIA_ROUTING_CONTROL                     AppOpEnum = 139
	AppOpEnum_APP_OP_ENABLE_MOBILE_DATA_BY_USER                AppOpEnum = 140
	AppOpEnum_APP_OP_RESERVED_FOR_TESTING                      AppOpEnum = 141
	AppOpEnum_APP_OP_RAPID_CLEAR_NOTIFICATIONS_BY_LISTENER     AppOpEnum = 142
	AppOpEnum_APP_OP_READ_SYSTEM_GRAMMATICAL_GENDER            AppOpEnum = 143
	AppOpEnum_APP_OP_RUN_BACKUP_JOBS                           AppOpEnum = 144
	AppOpEnum_APP_OP_ARCHIVE_ICON_OVERLAY                      AppOpEnum = 145
	AppOpEnum_APP_OP_UNARCHIVAL_CONFIRMATION                   AppOpEnum = 146
	AppOpEnum_APP_OP_EMERGENCY_LOCATION                        AppOpEnum = 147
)

// Enum value maps for AppOpEnum.
var (
	AppOpEnum_name = map[int32]string{
		-1:  "APP_OP_NONE",
		0:   "APP_OP_COARSE_LOCATION",
		1:   "APP_OP_FINE_LOCATION",
		2:   "APP_OP_GPS",
		3:   "APP_OP_VIBRATE",
		4:   "APP_OP_READ_CONTACTS",
		5:   "APP_OP_WRITE_CONTACTS",
		6:   "APP_OP_READ_CALL_LOG",
		7:   "APP_OP_WRITE_CALL_LOG",
		8:   "APP_OP_READ_CALENDAR",
		9:   "APP_OP_WRITE_CALENDAR",
		10:  "APP_OP_WIFI_SCAN",
		11:  "APP_OP_POST_NOTIFICATION",
		12:  "APP_OP_NEIGHBORING_CELLS",
		13:  "APP_OP_CALL_PHONE",
		14:  "APP_OP_READ_SMS",
		15:  "APP_OP_WRITE_SMS",
		16:  "APP_OP_RECEIVE_SMS",
		17:  "APP_OP_RECEIVE_EMERGENCY_SMS",
		18:  "APP_OP_RECEIVE_MMS",
		19:  "APP_OP_RECEIVE_WAP_PUSH",
		20:  "APP_OP_SEND_SMS",
		21:  "APP_OP_READ_ICC_SMS",
		22:  "APP_OP_WRITE_ICC_SMS",
		23:  "APP_OP_WRITE_SETTINGS",
		24:  "APP_OP_SYSTEM_ALERT_WINDOW",
		25:  "APP_OP_ACCESS_NOTIFICATIONS",
		26:  "APP_OP_CAMERA",
		27:  "APP_OP_RECORD_AUDIO",
		28:  "APP_OP_PLAY_AUDIO",
		29:  "APP_OP_READ_CLIPBOARD",
		30:  "APP_OP_WRITE_CLIPBOARD",
		31:  "APP_OP_TAKE_MEDIA_BUTTONS",
		32:  "APP_OP_TAKE_AUDIO_FOCUS",
		33:  "APP_OP_AUDIO_MASTER_VOLUME",
		34:  "APP_OP_AUDIO_VOICE_VOLUME",
		35:  "APP_OP_AUDIO_RING_VOLUME",
		36:  "APP_OP_AUDIO_MEDIA_VOLUME",
		37:  "APP_OP_AUDIO_ALARM_VOLUME",
		38:  "APP_OP_AUDIO_NOTIFICATION_VOLUME",
		39:  "APP_OP_AUDIO_BLUETOOTH_VOLUME",
		40:  "APP_OP_WAKE_LOCK",
		41:  "APP_OP_MONITOR_LOCATION",
		42:  "APP_OP_MONITOR_HIGH_POWER_LOCATION",
		43:  "APP_OP_GET_USAGE_STATS",
		44:  "APP_OP_MUTE_MICROPHONE",
		45:  "APP_OP_TOAST_WINDOW",
		46:  "APP_OP_PROJECT_MEDIA",
		47:  "APP_OP_ACTIVATE_VPN",
		48:  "APP_OP_WRITE_WALLPAPER",
		49:  "APP_OP_ASSIST_STRUCTURE",
		50:  "APP_OP_ASSIST_SCREENSHOT",
		51:  "APP_OP_READ_PHONE_STATE",
		52:  "APP_OP_ADD_VOICEMAIL",
		53:  "APP_OP_USE_SIP",
		54:  "APP_OP_PROCESS_OUTGOING_CALLS",
		55:  "APP_OP_USE_FINGERPRINT",
		56:  "APP_OP_BODY_SENSORS",
		57:  "APP_OP_READ_CELL_BROADCASTS",
		58:  "APP_OP_MOCK_LOCATION",
		59:  "APP_OP_READ_EXTERNAL_STORAGE",
		60:  "APP_OP_WRITE_EXTERNAL_STORAGE",
		61:  "APP_OP_TURN_SCREEN_ON",
		62:  "APP_OP_GET_ACCOUNTS",
		63:  "APP_OP_RUN_IN_BACKGROUND",
		64:  "APP_OP_AUDIO_ACCESSIBILITY_VOLUME",
		65:  "APP_OP_READ_PHONE_NUMBERS",
		66:  "APP_OP_REQUEST_INSTALL_PACKAGES",
		67:  "APP_OP_PICTURE_IN_PICTURE",
		68:  "APP_OP_INSTANT_APP_START_FOREGROUND",
		69:  "APP_OP_ANSWER_PHONE_CALLS",
		70:  "APP_OP_RUN_ANY_IN_BACKGROUND",
		71:  "APP_OP_CHANGE_WIFI_STATE",
		72:  "APP_OP_REQUEST_DELETE_PACKAGES",
		73:  "APP_OP_BIND_ACCESSIBILITY_SERVICE",
		74:  "APP_OP_ACCEPT_HANDOVER",
		75:  "APP_OP_MANAGE_IPSEC_TUNNELS",
		76:  "APP_OP_START_FOREGROUND",
		77:  "APP_OP_BLUETOOTH_SCAN",
		78:  "APP_OP_USE_BIOMETRIC",
		79:  "APP_OP_ACTIVITY_RECOGNITION",
		80:  "APP_OP_SMS_FINANCIAL_TRANSACTIONS",
		81:  "APP_OP_READ_MEDIA_AUDIO",
		82:  "APP_OP_WRITE_MEDIA_AUDIO",
		83:  "APP_OP_READ_MEDIA_VIDEO",
		84:  "APP_OP_WRITE_MEDIA_VIDEO",
		85:  "APP_OP_READ_MEDIA_IMAGES",
		86:  "APP_OP_WRITE_MEDIA_IMAGES",
		87:  "APP_OP_LEGACY_STORAGE",
		88:  "APP_OP_ACCESS_ACCESSIBILITY",
		89:  "APP_OP_READ_DEVICE_IDENTIFIERS",
		90:  "APP_OP_ACCESS_MEDIA_LOCATION",
		91:  "APP_OP_QUERY_ALL_PACKAGES",
		92:  "APP_OP_MANAGE_EXTERNAL_STORAGE",
		93:  "APP_OP_INTERACT_ACROSS_PROFILES",
		94:  "APP_OP_ACTIVATE_PLATFORM_VPN",
		95:  "APP_OP_LOADER_USAGE_STATS",
		96:  "APP_OP_DEPRECATED_1",
		97:  "APP_OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED",
		98:  "APP_OP_AUTO_REVOKE_MANAGED_BY_INSTALLER",
		99:  "APP_OP_NO_ISOLATED_STORAGE",
		100: "APP_OP_PHONE_CALL_MICROPHONE",
		101: "APP_OP_PHONE_CALL_CAMERA",
		102: "APP_OP_RECORD_AUDIO_HOTWORD",
		103: "APP_OP_MANAGE_ONGOING_CALLS",
		104: "APP_OP_MANAGE_CREDENTIALS",
		105: "APP_OP_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER",
		106: "APP_OP_RECORD_AUDIO_OUTPUT",
		107: "APP_OP_SCHEDULE_EXACT_ALARM",
		108: "APP_OP_FINE_LOCATION_SOURCE",
		109: "APP_OP_COARSE_LOCATION_SOURCE",
		110: "APP_OP_MANAGE_MEDIA",
		111: "APP_OP_BLUETOOTH_CONNECT",
		112: "APP_OP_UWB_RANGING",
		113: "APP_OP_ACTIVITY_RECOGNITION_SOURCE",
		114: "APP_OP_BLUETOOTH_ADVERTISE",
		115: "APP_OP_RECORD_INCOMING_PHONE_AUDIO",
		116: "APP_OP_NEARBY_WIFI_DEVICES",
		117: "APP_OP_ESTABLISH_VPN_SERVICE",
		118: "APP_OP_ESTABLISH_VPN_MANAGER",
		119: "APP_OP_ACCESS_RESTRICTED_SETTINGS",
		120: "APP_OP_RECEIVE_AMBIENT_TRIGGER_AUDIO",
		121: "APP_OP_RECEIVE_EXPLICIT_USER_INTERACTION_AUDIO",
		122: "APP_OP_RUN_USER_INITIATED_JOBS",
		123: "APP_OP_READ_MEDIA_VISUAL_USER_SELECTED",
		124: "APP_OP_SYSTEM_EXEMPT_FROM_SUSPENSION",
		125: "APP_OP_SYSTEM_EXEMPT_FROM_DISMISSIBLE_NOTIFICATIONS",
		126: "APP_OP_READ_WRITE_HEALTH_DATA",
		127: "APP_OP_FOREGROUND_SERVICE_SPECIAL_USE",
		128: "APP_OP_SYSTEM_EXEMPT_FROM_POWER_RESTRICTIONS",
		129: "APP_OP_SYSTEM_EXEMPT_FROM_HIBERNATION",
		130: "APP_OP_SYSTEM_EXEMPT_FROM_ACTIVITY_BG_START_RESTRICTION",
		131: "APP_OP_CAPTURE_CONSENTLESS_BUGREPORT_ON_USERDEBUG_BUILD",
		132: "APP_OP_BODY_SENSORS_WRIST_TEMPERATURE",
		133: "APP_OP_USE_FULL_SCREEN_INTENT",
		134: "APP_OP_CAMERA_SANDBOXED",
		135: "APP_OP_RECORD_AUDIO_SANDBOXED",
		136: "APP_OP_RECEIVE_SANDBOX_TRIGGER_AUDIO",
		137: "APP_OP_RECEIVE_SANDBOXED_DETECTION_TRAINING_DATA",
		138: "APP_OP_CREATE_ACCESSIBILITY_OVERLAY",
		139: "APP_OP_MEDIA_ROUTING_CONTROL",
		140: "APP_OP_ENABLE_MOBILE_DATA_BY_USER",
		141: "APP_OP_RESERVED_FOR_TESTING",
		142: "APP_OP_RAPID_CLEAR_NOTIFICATIONS_BY_LISTENER",
		143: "APP_OP_READ_SYSTEM_GRAMMATICAL_GENDER",
		144: "APP_OP_RUN_BACKUP_JOBS",
		145: "APP_OP_ARCHIVE_ICON_OVERLAY",
		146: "APP_OP_UNARCHIVAL_CONFIRMATION",
		147: "APP_OP_EMERGENCY_LOCATION",
	}
	AppOpEnum_value = map[string]int32{
		"APP_OP_NONE":                                             -1,
		"APP_OP_COARSE_LOCATION":                                  0,
		"APP_OP_FINE_LOCATION":                                    1,
		"APP_OP_GPS":                                              2,
		"APP_OP_VIBRATE":                                          3,
		"APP_OP_READ_CONTACTS":                                    4,
		"APP_OP_WRITE_CONTACTS":                                   5,
		"APP_OP_READ_CALL_LOG":                                    6,
		"APP_OP_WRITE_CALL_LOG":                                   7,
		"APP_OP_READ_CALENDAR":                                    8,
		"APP_OP_WRITE_CALENDAR":                                   9,
		"APP_OP_WIFI_SCAN":                                        10,
		"APP_OP_POST_NOTIFICATION":                                11,
		"APP_OP_NEIGHBORING_CELLS":                                12,
		"APP_OP_CALL_PHONE":                                       13,
		"APP_OP_READ_SMS":                                         14,
		"APP_OP_WRITE_SMS":                                        15,
		"APP_OP_RECEIVE_SMS":                                      16,
		"APP_OP_RECEIVE_EMERGENCY_SMS":                            17,
		"APP_OP_RECEIVE_MMS":                                      18,
		"APP_OP_RECEIVE_WAP_PUSH":                                 19,
		"APP_OP_SEND_SMS":                                         20,
		"APP_OP_READ_ICC_SMS":                                     21,
		"APP_OP_WRITE_ICC_SMS":                                    22,
		"APP_OP_WRITE_SETTINGS":                                   23,
		"APP_OP_SYSTEM_ALERT_WINDOW":                              24,
		"APP_OP_ACCESS_NOTIFICATIONS":                             25,
		"APP_OP_CAMERA":                                           26,
		"APP_OP_RECORD_AUDIO":                                     27,
		"APP_OP_PLAY_AUDIO":                                       28,
		"APP_OP_READ_CLIPBOARD":                                   29,
		"APP_OP_WRITE_CLIPBOARD":                                  30,
		"APP_OP_TAKE_MEDIA_BUTTONS":                               31,
		"APP_OP_TAKE_AUDIO_FOCUS":                                 32,
		"APP_OP_AUDIO_MASTER_VOLUME":                              33,
		"APP_OP_AUDIO_VOICE_VOLUME":                               34,
		"APP_OP_AUDIO_RING_VOLUME":                                35,
		"APP_OP_AUDIO_MEDIA_VOLUME":                               36,
		"APP_OP_AUDIO_ALARM_VOLUME":                               37,
		"APP_OP_AUDIO_NOTIFICATION_VOLUME":                        38,
		"APP_OP_AUDIO_BLUETOOTH_VOLUME":                           39,
		"APP_OP_WAKE_LOCK":                                        40,
		"APP_OP_MONITOR_LOCATION":                                 41,
		"APP_OP_MONITOR_HIGH_POWER_LOCATION":                      42,
		"APP_OP_GET_USAGE_STATS":                                  43,
		"APP_OP_MUTE_MICROPHONE":                                  44,
		"APP_OP_TOAST_WINDOW":                                     45,
		"APP_OP_PROJECT_MEDIA":                                    46,
		"APP_OP_ACTIVATE_VPN":                                     47,
		"APP_OP_WRITE_WALLPAPER":                                  48,
		"APP_OP_ASSIST_STRUCTURE":                                 49,
		"APP_OP_ASSIST_SCREENSHOT":                                50,
		"APP_OP_READ_PHONE_STATE":                                 51,
		"APP_OP_ADD_VOICEMAIL":                                    52,
		"APP_OP_USE_SIP":                                          53,
		"APP_OP_PROCESS_OUTGOING_CALLS":                           54,
		"APP_OP_USE_FINGERPRINT":                                  55,
		"APP_OP_BODY_SENSORS":                                     56,
		"APP_OP_READ_CELL_BROADCASTS":                             57,
		"APP_OP_MOCK_LOCATION":                                    58,
		"APP_OP_READ_EXTERNAL_STORAGE":                            59,
		"APP_OP_WRITE_EXTERNAL_STORAGE":                           60,
		"APP_OP_TURN_SCREEN_ON":                                   61,
		"APP_OP_GET_ACCOUNTS":                                     62,
		"APP_OP_RUN_IN_BACKGROUND":                                63,
		"APP_OP_AUDIO_ACCESSIBILITY_VOLUME":                       64,
		"APP_OP_READ_PHONE_NUMBERS":                               65,
		"APP_OP_REQUEST_INSTALL_PACKAGES":                         66,
		"APP_OP_PICTURE_IN_PICTURE":                               67,
		"APP_OP_INSTANT_APP_START_FOREGROUND":                     68,
		"APP_OP_ANSWER_PHONE_CALLS":                               69,
		"APP_OP_RUN_ANY_IN_BACKGROUND":                            70,
		"APP_OP_CHANGE_WIFI_STATE":                                71,
		"APP_OP_REQUEST_DELETE_PACKAGES":                          72,
		"APP_OP_BIND_ACCESSIBILITY_SERVICE":                       73,
		"APP_OP_ACCEPT_HANDOVER":                                  74,
		"APP_OP_MANAGE_IPSEC_TUNNELS":                             75,
		"APP_OP_START_FOREGROUND":                                 76,
		"APP_OP_BLUETOOTH_SCAN":                                   77,
		"APP_OP_USE_BIOMETRIC":                                    78,
		"APP_OP_ACTIVITY_RECOGNITION":                             79,
		"APP_OP_SMS_FINANCIAL_TRANSACTIONS":                       80,
		"APP_OP_READ_MEDIA_AUDIO":                                 81,
		"APP_OP_WRITE_MEDIA_AUDIO":                                82,
		"APP_OP_READ_MEDIA_VIDEO":                                 83,
		"APP_OP_WRITE_MEDIA_VIDEO":                                84,
		"APP_OP_READ_MEDIA_IMAGES":                                85,
		"APP_OP_WRITE_MEDIA_IMAGES":                               86,
		"APP_OP_LEGACY_STORAGE":                                   87,
		"APP_OP_ACCESS_ACCESSIBILITY":                             88,
		"APP_OP_READ_DEVICE_IDENTIFIERS":                          89,
		"APP_OP_ACCESS_MEDIA_LOCATION":                            90,
		"APP_OP_QUERY_ALL_PACKAGES":                               91,
		"APP_OP_MANAGE_EXTERNAL_STORAGE":                          92,
		"APP_OP_INTERACT_ACROSS_PROFILES":                         93,
		"APP_OP_ACTIVATE_PLATFORM_VPN":                            94,
		"APP_OP_LOADER_USAGE_STATS":                               95,
		"APP_OP_DEPRECATED_1":                                     96,
		"APP_OP_AUTO_REVOKE_PERMISSIONS_IF_UNUSED":                97,
		"APP_OP_AUTO_REVOKE_MANAGED_BY_INSTALLER":                 98,
		"APP_OP_NO_ISOLATED_STORAGE":                              99,
		"APP_OP_PHONE_CALL_MICROPHONE":                            100,
		"APP_OP_PHONE_CALL_CAMERA":                                101,
		"APP_OP_RECORD_AUDIO_HOTWORD":                             102,
		"APP_OP_MANAGE_ONGOING_CALLS":                             103,
		"APP_OP_MANAGE_CREDENTIALS":                               104,
		"APP_OP_USE_ICC_AUTH_WITH_DEVICE_IDENTIFIER":              105,
		"APP_OP_RECORD_AUDIO_OUTPUT":                              106,
		"APP_OP_SCHEDULE_EXACT_ALARM":                             107,
		"APP_OP_FINE_LOCATION_SOURCE":                             108,
		"APP_OP_COARSE_LOCATION_SOURCE":                           109,
		"APP_OP_MANAGE_MEDIA":                                     110,
		"APP_OP_BLUETOOTH_CONNECT":                                111,
		"APP_OP_UWB_RANGING":                                      112,
		"APP_OP_ACTIVITY_RECOGNITION_SOURCE":                      113,
		"APP_OP_BLUETOOTH_ADVERTISE":                              114,
		"APP_OP_RECORD_INCOMING_PHONE_AUDIO":                      115,
		"APP_OP_NEARBY_WIFI_DEVICES":                              116,
		"APP_OP_ESTABLISH_VPN_SERVICE":                            117,
		"APP_OP_ESTABLISH_VPN_MANAGER":                            118,
		"APP_OP_ACCESS_RESTRICTED_SETTINGS":                       119,
		"APP_OP_RECEIVE_AMBIENT_TRIGGER_AUDIO":                    120,
		"APP_OP_RECEIVE_EXPLICIT_USER_INTERACTION_AUDIO":          121,
		"APP_OP_RUN_USER_INITIATED_JOBS":                          122,
		"APP_OP_READ_MEDIA_VISUAL_USER_SELECTED":                  123,
		"APP_OP_SYSTEM_EXEMPT_FROM_SUSPENSION":                    124,
		"APP_OP_SYSTEM_EXEMPT_FROM_DISMISSIBLE_NOTIFICATIONS":     125,
		"APP_OP_READ_WRITE_HEALTH_DATA":                           126,
		"APP_OP_FOREGROUND_SERVICE_SPECIAL_USE":                   127,
		"APP_OP_SYSTEM_EXEMPT_FROM_POWER_RESTRICTIONS":            128,
		"APP_OP_SYSTEM_EXEMPT_FROM_HIBERNATION":                   129,
		"APP_OP_SYSTEM_EXEMPT_FROM_ACTIVITY_BG_START_RESTRICTION": 130,
		"APP_OP_CAPTURE_CONSENTLESS_BUGREPORT_ON_USERDEBUG_BUILD": 131,
		"APP_OP_BODY_SENSORS_WRIST_TEMPERATURE":                   132,
		"APP_OP_USE_FULL_SCREEN_INTENT":                           133,
		"APP_OP_CAMERA_SANDBOXED":                                 134,
		"APP_OP_RECORD_AUDIO_SANDBOXED":                           135,
		"APP_OP_RECEIVE_SANDBOX_TRIGGER_AUDIO":                    136,
		"APP_OP_RECEIVE_SANDBOXED_DETECTION_TRAINING_DATA":        137,
		"APP_OP_CREATE_ACCESSIBILITY_OVERLAY":                     138,
		"APP_OP_MEDIA_ROUTING_CONTROL":                            139,
		"APP_OP_ENABLE_MOBILE_DATA_BY_USER":                       140,
		"APP_OP_RESERVED_FOR_TESTING":                             141,
		"APP_OP_RAPID_CLEAR_NOTIFICATIONS_BY_LISTENER":            142,
		"APP_OP_READ_SYSTEM_GRAMMATICAL_GENDER":                   143,
		"APP_OP_RUN_BACKUP_JOBS":                                  144,
		"APP_OP_ARCHIVE_ICON_OVERLAY":                             145,
		"APP_OP_UNARCHIVAL_CONFIRMATION":                          146,
		"APP_OP_EMERGENCY_LOCATION":                               147,
	}
)

func (x AppOpEnum) Enum() *AppOpEnum {
	p := new(AppOpEnum)
	*p = x
	return p
}

func (x AppOpEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppOpEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[3].Descriptor()
}

func (AppOpEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[3]
}

func (x AppOpEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppOpEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppOpEnum(num)
	return nil
}

// Deprecated: Use AppOpEnum.Descriptor instead.
func (AppOpEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{3}
}

// *
// The reason code that why app process is killed.
type AppExitReasonCode int32

const (
	// *
	// Application process died due to unknown reason.
	AppExitReasonCode_REASON_UNKNOWN AppExitReasonCode = 0
	// *
	// Application process exit normally by itself, for example,
	// via {@link android.os.Process#exit}; {@link #status} will specify the exit code.
	//
	// <p>Applications should normally not do this, as the system has a better knowledge
	// in terms of process management.</p>
	AppExitReasonCode_REASON_EXIT_SELF AppExitReasonCode = 1
	// *
	// Application process died due to the result of an OS signal; for example,
	// {@link android.os.Process#SIGNAL_KILL}; {@link #status} will specify the signum.
	AppExitReasonCode_REASON_SIGNALED AppExitReasonCode = 2
	// *
	// Application process was killed by the system low memory killer, meaning the system was
	// under memory pressure at the time of kill.
	AppExitReasonCode_REASON_LOW_MEMORY AppExitReasonCode = 3
	// *
	// Application process died because of an unhandled exception in Java code.
	AppExitReasonCode_REASON_CRASH AppExitReasonCode = 4
	// *
	// Application process died because it's crashed due to a native code crash.
	AppExitReasonCode_REASON_CRASH_NATIVE AppExitReasonCode = 5
	// *
	// Application process was killed due to being unresponsive (ANR).
	AppExitReasonCode_REASON_ANR AppExitReasonCode = 6
	// *
	// Application process was killed because it took too long to attach to the system
	// during the start.
	AppExitReasonCode_REASON_INITIALIZATION_FAILURE AppExitReasonCode = 7
	// *
	// Application process was killed because of initialization failure,
	// for example, it took too long to attach to the system during the start,
	// or there was an error during initialization.
	AppExitReasonCode_REASON_PERMISSION_CHANGE AppExitReasonCode = 8
	// *
	// Application process was killed by the activity manager due to excessive resource usage.
	AppExitReasonCode_REASON_EXCESSIVE_RESOURCE_USAGE AppExitReasonCode = 9
	// *
	// Application process was killed because of the user request, for example,
	// user clicked the "Force stop" button of the application in the Settings,
	// or swiped away the application from Recents.
	// <p>
	// Prior to {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, one of the uses of this
	// reason was indicate that an app was killed due to it being updated or any of its component states
	// have changed without {@link android.content.pm.PackageManager#DONT_KILL_APP}
	AppExitReasonCode_REASON_USER_REQUESTED AppExitReasonCode = 10
	// *
	// Application process was killed, because the user they are running as on devices
	// with mutlple users, was stopped.
	AppExitReasonCode_REASON_USER_STOPPED AppExitReasonCode = 11
	// *
	// Application process was killed because its dependency was going away, for example,
	// a stable content provider connection's client will be killed if the provider is killed.
	AppExitReasonCode_REASON_DEPENDENCY_DIED AppExitReasonCode = 12
	// *
	// Application process was killed by the system for various other reasons,
	// for example, the application package got disabled by the user;
	// {@link #description} will specify the cause given by the system.
	AppExitReasonCode_REASON_OTHER AppExitReasonCode = 13
	// *
	// Application process was killed by App Freezer, for example, because it receives
	// sync binder transactions while being frozen.
	AppExitReasonCode_REASON_FREEZER AppExitReasonCode = 14
	// *
	// Application process was killed because the app was uninstalled, disabled, or any of its
	// component states have changed without {@link android.content.pm.PackageManager#DONT_KILL_APP}
	// <p>
	// Prior to {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},
	// {@link #REASON_USER_REQUESTED} was used to indicate that an app was updated.
	AppExitReasonCode_REASON_PACKAGE_STATE_CHANGE AppExitReasonCode = 15
	// *
	// Application process was killed because it was updated.
	// <p>
	// Prior to {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},
	// {@link #REASON_USER_REQUESTED} was used to indicate that an app was updated.
	AppExitReasonCode_REASON_PACKAGE_UPDATED AppExitReasonCode = 16
)

// Enum value maps for AppExitReasonCode.
var (
	AppExitReasonCode_name = map[int32]string{
		0:  "REASON_UNKNOWN",
		1:  "REASON_EXIT_SELF",
		2:  "REASON_SIGNALED",
		3:  "REASON_LOW_MEMORY",
		4:  "REASON_CRASH",
		5:  "REASON_CRASH_NATIVE",
		6:  "REASON_ANR",
		7:  "REASON_INITIALIZATION_FAILURE",
		8:  "REASON_PERMISSION_CHANGE",
		9:  "REASON_EXCESSIVE_RESOURCE_USAGE",
		10: "REASON_USER_REQUESTED",
		11: "REASON_USER_STOPPED",
		12: "REASON_DEPENDENCY_DIED",
		13: "REASON_OTHER",
		14: "REASON_FREEZER",
		15: "REASON_PACKAGE_STATE_CHANGE",
		16: "REASON_PACKAGE_UPDATED",
	}
	AppExitReasonCode_value = map[string]int32{
		"REASON_UNKNOWN":                  0,
		"REASON_EXIT_SELF":                1,
		"REASON_SIGNALED":                 2,
		"REASON_LOW_MEMORY":               3,
		"REASON_CRASH":                    4,
		"REASON_CRASH_NATIVE":             5,
		"REASON_ANR":                      6,
		"REASON_INITIALIZATION_FAILURE":   7,
		"REASON_PERMISSION_CHANGE":        8,
		"REASON_EXCESSIVE_RESOURCE_USAGE": 9,
		"REASON_USER_REQUESTED":           10,
		"REASON_USER_STOPPED":             11,
		"REASON_DEPENDENCY_DIED":          12,
		"REASON_OTHER":                    13,
		"REASON_FREEZER":                  14,
		"REASON_PACKAGE_STATE_CHANGE":     15,
		"REASON_PACKAGE_UPDATED":          16,
	}
)

func (x AppExitReasonCode) Enum() *AppExitReasonCode {
	p := new(AppExitReasonCode)
	*p = x
	return p
}

func (x AppExitReasonCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppExitReasonCode) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[4].Descriptor()
}

func (AppExitReasonCode) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[4]
}

func (x AppExitReasonCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppExitReasonCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppExitReasonCode(num)
	return nil
}

// Deprecated: Use AppExitReasonCode.Descriptor instead.
func (AppExitReasonCode) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{4}
}

// *
// The supplemental reason code that why app process is killed
type AppExitSubReasonCode int32

const (
	// *
	// Application process kills subReason is unknown.
	AppExitSubReasonCode_SUBREASON_UNKNOWN AppExitSubReasonCode = 0
	// *
	// Application process was killed because user quit it on the "wait for debugger" dialog.
	AppExitSubReasonCode_SUBREASON_WAIT_FOR_DEBUGGER AppExitSubReasonCode = 1
	// *
	// Application process was killed by the activity manager because there were too many cached
	// processes.
	AppExitSubReasonCode_SUBREASON_TOO_MANY_CACHED AppExitSubReasonCode = 2
	// *
	// Application process was killed by the activity manager because there were too many empty
	// processes.
	AppExitSubReasonCode_SUBREASON_TOO_MANY_EMPTY AppExitSubReasonCode = 3
	// *
	// Application process was killed by the activity manager because there were too many cached
	// processes and this process had been in empty state for a long time.
	AppExitSubReasonCode_SUBREASON_TRIM_EMPTY AppExitSubReasonCode = 4
	// *
	// Application process was killed by the activity manager because system was on
	// memory pressure and this process took large amount of cached memory.
	AppExitSubReasonCode_SUBREASON_LARGE_CACHED AppExitSubReasonCode = 5
	// *
	// Application process was killed by the activity manager because the system was on
	// low memory pressure for a significant amount of time since last idle.
	AppExitSubReasonCode_SUBREASON_MEMORY_PRESSURE AppExitSubReasonCode = 6
	// *
	// Application process was killed by the activity manager due to excessive CPU usage.
	AppExitSubReasonCode_SUBREASON_EXCESSIVE_CPU AppExitSubReasonCode = 7
	// *
	// System update has done (so the system update process should be killed).
	AppExitSubReasonCode_SUBREASON_SYSTEM_UPDATE_DONE AppExitSubReasonCode = 8
	// *
	// Kill all foreground services, for now it only occurs when enabling the quiet
	// mode for the managed profile.
	AppExitSubReasonCode_SUBREASON_KILL_ALL_FG AppExitSubReasonCode = 9
	// *
	// All background processes except certain ones were killed, for now it only occurs
	// when the density of the default display is changed.
	AppExitSubReasonCode_SUBREASON_KILL_ALL_BG_EXCEPT AppExitSubReasonCode = 10
	// *
	// The process associated with the UID was explicitly killed, for example,
	// it could be because of permission changes.
	AppExitSubReasonCode_SUBREASON_KILL_UID AppExitSubReasonCode = 11
	// *
	// The process was explicitly killed with its PID, typically because of
	// the low memory for surfaces.
	AppExitSubReasonCode_SUBREASON_KILL_PID AppExitSubReasonCode = 12
	// *
	// The start of the process was invalid.
	AppExitSubReasonCode_SUBREASON_INVALID_START AppExitSubReasonCode = 13
	// *
	// The process was killed because it's in an invalid state, typically
	// it's triggered from SHELL.
	AppExitSubReasonCode_SUBREASON_INVALID_STATE AppExitSubReasonCode = 14
	// *
	// The process was killed when it's imperceptible to user, because it was
	// in a bad state.
	AppExitSubReasonCode_SUBREASON_IMPERCEPTIBLE AppExitSubReasonCode = 15
	// *
	// The process was killed because it's being moved out from LRU list.
	AppExitSubReasonCode_SUBREASON_REMOVE_LRU AppExitSubReasonCode = 16
	// *
	// The process was killed because it's isolated and was in a cached state.
	AppExitSubReasonCode_SUBREASON_ISOLATED_NOT_NEEDED AppExitSubReasonCode = 17
	// *
	// The process was killed because it's in forced-app-standby state, and it's cached and
	// its uid state is idle; this would be set only when the reason is {@link #REASON_OTHER}.
	AppExitSubReasonCode_SUBREASON_CACHED_IDLE_FORCED_APP_STANDBY AppExitSubReasonCode = 18
	// *
	// The process was killed because it fails to freeze/unfreeze binder
	// or query binder frozen info while being frozen.
	AppExitSubReasonCode_SUBREASON_FREEZER_BINDER_IOCTL AppExitSubReasonCode = 19
	// *
	// The process was killed because it receives sync binder transactions
	// while being frozen.
	AppExitSubReasonCode_SUBREASON_FREEZER_BINDER_TRANSACTION AppExitSubReasonCode = 20
	// *
	// The process was killed because of force-stop, it could be due to that
	// the user clicked the "Force stop" button of the application in the Settings;
	// this would be set only when the reason is {@link #REASON_USER_REQUESTED}.
	AppExitSubReasonCode_SUBREASON_FORCE_STOP AppExitSubReasonCode = 21
	// *
	// The process was killed because the user removed the application away from Recents;
	// this would be set only when the reason is {@link #REASON_USER_REQUESTED}.
	AppExitSubReasonCode_SUBREASON_REMOVE_TASK AppExitSubReasonCode = 22
	// *
	// The process was killed because the user stopped the application from the task manager;
	// this would be set only when the reason is {@link #REASON_USER_REQUESTED}.
	AppExitSubReasonCode_SUBREASON_STOP_APP AppExitSubReasonCode = 23
	// *
	// The process was killed because the user stopped the application from developer options,
	// or via the adb shell commmand interface; this would be set only when the reason is
	// {@link #REASON_USER_REQUESTED}.
	AppExitSubReasonCode_SUBREASON_KILL_BACKGROUND AppExitSubReasonCode = 24
	// *
	// The process was killed because of package update; this would be set only when the reason is
	// {@link #REASON_PACKAGE_STATE_CHANGE}.
	//
	// @deprecated starting {@link android.os.Build.VERSION_CODES#TIRAMISU},
	// an app being killed due to a package update will have the reason
	// {@link #REASON_PACKAGE_UPDATED}
	AppExitSubReasonCode_SUBREASON_PACKAGE_UPDATE AppExitSubReasonCode = 25
	// *
	// The process was killed because of undelivered broadcasts; this would be set only when the
	// reason is {@link #REASON_OTHER}.
	AppExitSubReasonCode_SUBREASON_UNDELIVERED_BROADCAST AppExitSubReasonCode = 26
	// *
	// The process was killed because its associated SDK sandbox process (where it had loaded SDKs)
	// had died; this would be set only when the reason is {@link #REASON_DEPENDENCY_DIED}.
	AppExitSubReasonCode_SUBREASON_SDK_SANDBOX_DIED AppExitSubReasonCode = 27
	// *
	// The process was killed because it was an SDK sandbox process that was either not usable or
	// was no longer being used; this would be set only when the reason is {@link #REASON_OTHER}.
	AppExitSubReasonCode_SUBREASON_SDK_SANDBOX_NOT_NEEDED AppExitSubReasonCode = 28
	// *
	// The process was killed because the binder proxy limit for system server was exceeded.
	AppExitSubReasonCode_SUBREASON_EXCESSIVE_BINDER_OBJECTS AppExitSubReasonCode = 29
	// *
	// The process was killed by the [kernel] Out-of-memory (OOM) killer; this
	// would be set only when the reason is {@link #REASON_LOW_MEMORY}.
	AppExitSubReasonCode_SUBREASON_OOM_KILL AppExitSubReasonCode = 30
	// *
	// The process was killed because its async kernel binder buffer is running out
	// while being frozen.
	AppExitSubReasonCode_SUBREASON_FREEZER_BINDER_ASYNC_FULL AppExitSubReasonCode = 31
)

// Enum value maps for AppExitSubReasonCode.
var (
	AppExitSubReasonCode_name = map[int32]string{
		0:  "SUBREASON_UNKNOWN",
		1:  "SUBREASON_WAIT_FOR_DEBUGGER",
		2:  "SUBREASON_TOO_MANY_CACHED",
		3:  "SUBREASON_TOO_MANY_EMPTY",
		4:  "SUBREASON_TRIM_EMPTY",
		5:  "SUBREASON_LARGE_CACHED",
		6:  "SUBREASON_MEMORY_PRESSURE",
		7:  "SUBREASON_EXCESSIVE_CPU",
		8:  "SUBREASON_SYSTEM_UPDATE_DONE",
		9:  "SUBREASON_KILL_ALL_FG",
		10: "SUBREASON_KILL_ALL_BG_EXCEPT",
		11: "SUBREASON_KILL_UID",
		12: "SUBREASON_KILL_PID",
		13: "SUBREASON_INVALID_START",
		14: "SUBREASON_INVALID_STATE",
		15: "SUBREASON_IMPERCEPTIBLE",
		16: "SUBREASON_REMOVE_LRU",
		17: "SUBREASON_ISOLATED_NOT_NEEDED",
		18: "SUBREASON_CACHED_IDLE_FORCED_APP_STANDBY",
		19: "SUBREASON_FREEZER_BINDER_IOCTL",
		20: "SUBREASON_FREEZER_BINDER_TRANSACTION",
		21: "SUBREASON_FORCE_STOP",
		22: "SUBREASON_REMOVE_TASK",
		23: "SUBREASON_STOP_APP",
		24: "SUBREASON_KILL_BACKGROUND",
		25: "SUBREASON_PACKAGE_UPDATE",
		26: "SUBREASON_UNDELIVERED_BROADCAST",
		27: "SUBREASON_SDK_SANDBOX_DIED",
		28: "SUBREASON_SDK_SANDBOX_NOT_NEEDED",
		29: "SUBREASON_EXCESSIVE_BINDER_OBJECTS",
		30: "SUBREASON_OOM_KILL",
		31: "SUBREASON_FREEZER_BINDER_ASYNC_FULL",
	}
	AppExitSubReasonCode_value = map[string]int32{
		"SUBREASON_UNKNOWN":                        0,
		"SUBREASON_WAIT_FOR_DEBUGGER":              1,
		"SUBREASON_TOO_MANY_CACHED":                2,
		"SUBREASON_TOO_MANY_EMPTY":                 3,
		"SUBREASON_TRIM_EMPTY":                     4,
		"SUBREASON_LARGE_CACHED":                   5,
		"SUBREASON_MEMORY_PRESSURE":                6,
		"SUBREASON_EXCESSIVE_CPU":                  7,
		"SUBREASON_SYSTEM_UPDATE_DONE":             8,
		"SUBREASON_KILL_ALL_FG":                    9,
		"SUBREASON_KILL_ALL_BG_EXCEPT":             10,
		"SUBREASON_KILL_UID":                       11,
		"SUBREASON_KILL_PID":                       12,
		"SUBREASON_INVALID_START":                  13,
		"SUBREASON_INVALID_STATE":                  14,
		"SUBREASON_IMPERCEPTIBLE":                  15,
		"SUBREASON_REMOVE_LRU":                     16,
		"SUBREASON_ISOLATED_NOT_NEEDED":            17,
		"SUBREASON_CACHED_IDLE_FORCED_APP_STANDBY": 18,
		"SUBREASON_FREEZER_BINDER_IOCTL":           19,
		"SUBREASON_FREEZER_BINDER_TRANSACTION":     20,
		"SUBREASON_FORCE_STOP":                     21,
		"SUBREASON_REMOVE_TASK":                    22,
		"SUBREASON_STOP_APP":                       23,
		"SUBREASON_KILL_BACKGROUND":                24,
		"SUBREASON_PACKAGE_UPDATE":                 25,
		"SUBREASON_UNDELIVERED_BROADCAST":          26,
		"SUBREASON_SDK_SANDBOX_DIED":               27,
		"SUBREASON_SDK_SANDBOX_NOT_NEEDED":         28,
		"SUBREASON_EXCESSIVE_BINDER_OBJECTS":       29,
		"SUBREASON_OOM_KILL":                       30,
		"SUBREASON_FREEZER_BINDER_ASYNC_FULL":      31,
	}
)

func (x AppExitSubReasonCode) Enum() *AppExitSubReasonCode {
	p := new(AppExitSubReasonCode)
	*p = x
	return p
}

func (x AppExitSubReasonCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppExitSubReasonCode) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[5].Descriptor()
}

func (AppExitSubReasonCode) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[5]
}

func (x AppExitSubReasonCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppExitSubReasonCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppExitSubReasonCode(num)
	return nil
}

// Deprecated: Use AppExitSubReasonCode.Descriptor instead.
func (AppExitSubReasonCode) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{5}
}

// *
// The relative importance level that the system places on a process.
// Keep sync with the definitions in
// {@link android.app.ActivityManager.RunningAppProcessInfo}
type Importance int32

const (
	Importance_IMPORTANCE_FOREGROUND             Importance = 100
	Importance_IMPORTANCE_FOREGROUND_SERVICE     Importance = 125
	Importance_IMPORTANCE_TOP_SLEEPING_PRE_28    Importance = 150
	Importance_IMPORTANCE_VISIBLE                Importance = 200
	Importance_IMPORTANCE_PERCEPTIBLE_PRE_26     Importance = 130
	Importance_IMPORTANCE_PERCEPTIBLE            Importance = 230
	Importance_IMPORTANCE_CANT_SAVE_STATE_PRE_26 Importance = 170
	Importance_IMPORTANCE_SERVICE                Importance = 300
	Importance_IMPORTANCE_TOP_SLEEPING           Importance = 325
	Importance_IMPORTANCE_CANT_SAVE_STATE        Importance = 350
	Importance_IMPORTANCE_CACHED                 Importance = 400
	Importance_IMPORTANCE_BACKGROUND             Importance = 400
	Importance_IMPORTANCE_EMPTY                  Importance = 500
	Importance_IMPORTANCE_GONE                   Importance = 1000
)

// Enum value maps for Importance.
var (
	Importance_name = map[int32]string{
		100: "IMPORTANCE_FOREGROUND",
		125: "IMPORTANCE_FOREGROUND_SERVICE",
		150: "IMPORTANCE_TOP_SLEEPING_PRE_28",
		200: "IMPORTANCE_VISIBLE",
		130: "IMPORTANCE_PERCEPTIBLE_PRE_26",
		230: "IMPORTANCE_PERCEPTIBLE",
		170: "IMPORTANCE_CANT_SAVE_STATE_PRE_26",
		300: "IMPORTANCE_SERVICE",
		325: "IMPORTANCE_TOP_SLEEPING",
		350: "IMPORTANCE_CANT_SAVE_STATE",
		400: "IMPORTANCE_CACHED",
		// Duplicate value: 400: "IMPORTANCE_BACKGROUND",
		500:  "IMPORTANCE_EMPTY",
		1000: "IMPORTANCE_GONE",
	}
	Importance_value = map[string]int32{
		"IMPORTANCE_FOREGROUND":             100,
		"IMPORTANCE_FOREGROUND_SERVICE":     125,
		"IMPORTANCE_TOP_SLEEPING_PRE_28":    150,
		"IMPORTANCE_VISIBLE":                200,
		"IMPORTANCE_PERCEPTIBLE_PRE_26":     130,
		"IMPORTANCE_PERCEPTIBLE":            230,
		"IMPORTANCE_CANT_SAVE_STATE_PRE_26": 170,
		"IMPORTANCE_SERVICE":                300,
		"IMPORTANCE_TOP_SLEEPING":           325,
		"IMPORTANCE_CANT_SAVE_STATE":        350,
		"IMPORTANCE_CACHED":                 400,
		"IMPORTANCE_BACKGROUND":             400,
		"IMPORTANCE_EMPTY":                  500,
		"IMPORTANCE_GONE":                   1000,
	}
)

func (x Importance) Enum() *Importance {
	p := new(Importance)
	*p = x
	return p
}

func (x Importance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Importance) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[6].Descriptor()
}

func (Importance) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[6]
}

func (x Importance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Importance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Importance(num)
	return nil
}

// Deprecated: Use Importance.Descriptor instead.
func (Importance) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{6}
}

// *
// The Resource APIs that are monitored.
type ResourceApiEnum int32

const (
	ResourceApiEnum_RESOURCE_API_NONE                ResourceApiEnum = 0
	ResourceApiEnum_RESOURCE_API_GET_VALUE           ResourceApiEnum = 1
	ResourceApiEnum_RESOURCE_API_RETRIEVE_ATTRIBUTES ResourceApiEnum = 2
)

// Enum value maps for ResourceApiEnum.
var (
	ResourceApiEnum_name = map[int32]string{
		0: "RESOURCE_API_NONE",
		1: "RESOURCE_API_GET_VALUE",
		2: "RESOURCE_API_RETRIEVE_ATTRIBUTES",
	}
	ResourceApiEnum_value = map[string]int32{
		"RESOURCE_API_NONE":                0,
		"RESOURCE_API_GET_VALUE":           1,
		"RESOURCE_API_RETRIEVE_ATTRIBUTES": 2,
	}
)

func (x ResourceApiEnum) Enum() *ResourceApiEnum {
	p := new(ResourceApiEnum)
	*p = x
	return p
}

func (x ResourceApiEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceApiEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[7].Descriptor()
}

func (ResourceApiEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[7]
}

func (x ResourceApiEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResourceApiEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResourceApiEnum(num)
	return nil
}

// Deprecated: Use ResourceApiEnum.Descriptor instead.
func (ResourceApiEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{7}
}

// *
// The game modes used by GameManager.
//
// <p>Also see {@link android.app.GameManager#GameMode}.
type GameMode int32

const (
	GameMode_GAME_MODE_UNSPECIFIED GameMode = 0
	GameMode_GAME_MODE_UNSUPPORTED GameMode = 1
	GameMode_GAME_MODE_STANDARD    GameMode = 2
	GameMode_GAME_MODE_PERFORMANCE GameMode = 3
	GameMode_GAME_MODE_BATTERY     GameMode = 4
	GameMode_GAME_MODE_CUSTOM      GameMode = 5
)

// Enum value maps for GameMode.
var (
	GameMode_name = map[int32]string{
		0: "GAME_MODE_UNSPECIFIED",
		1: "GAME_MODE_UNSUPPORTED",
		2: "GAME_MODE_STANDARD",
		3: "GAME_MODE_PERFORMANCE",
		4: "GAME_MODE_BATTERY",
		5: "GAME_MODE_CUSTOM",
	}
	GameMode_value = map[string]int32{
		"GAME_MODE_UNSPECIFIED": 0,
		"GAME_MODE_UNSUPPORTED": 1,
		"GAME_MODE_STANDARD":    2,
		"GAME_MODE_PERFORMANCE": 3,
		"GAME_MODE_BATTERY":     4,
		"GAME_MODE_CUSTOM":      5,
	}
)

func (x GameMode) Enum() *GameMode {
	p := new(GameMode)
	*p = x
	return p
}

func (x GameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[8].Descriptor()
}

func (GameMode) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[8]
}

func (x GameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GameMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GameMode(num)
	return nil
}

// Deprecated: Use GameMode.Descriptor instead.
func (GameMode) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{8}
}

// *
// The result code of foreground service type policy check.
type FgsTypePolicyCheckEnum int32

const (
	FgsTypePolicyCheckEnum_FGS_TYPE_POLICY_CHECK_UNKNOWN                      FgsTypePolicyCheckEnum = 0
	FgsTypePolicyCheckEnum_FGS_TYPE_POLICY_CHECK_OK                           FgsTypePolicyCheckEnum = 1
	FgsTypePolicyCheckEnum_FGS_TYPE_POLICY_CHECK_DEPRECATED                   FgsTypePolicyCheckEnum = 2
	FgsTypePolicyCheckEnum_FGS_TYPE_POLICY_CHECK_DISABLED                     FgsTypePolicyCheckEnum = 3
	FgsTypePolicyCheckEnum_FGS_TYPE_POLICY_CHECK_PERMISSION_DENIED_PERMISSIVE FgsTypePolicyCheckEnum = 4
	FgsTypePolicyCheckEnum_FGS_TYPE_POLICY_CHECK_PERMISSION_DENIED_ENFORCED   FgsTypePolicyCheckEnum = 5
)

// Enum value maps for FgsTypePolicyCheckEnum.
var (
	FgsTypePolicyCheckEnum_name = map[int32]string{
		0: "FGS_TYPE_POLICY_CHECK_UNKNOWN",
		1: "FGS_TYPE_POLICY_CHECK_OK",
		2: "FGS_TYPE_POLICY_CHECK_DEPRECATED",
		3: "FGS_TYPE_POLICY_CHECK_DISABLED",
		4: "FGS_TYPE_POLICY_CHECK_PERMISSION_DENIED_PERMISSIVE",
		5: "FGS_TYPE_POLICY_CHECK_PERMISSION_DENIED_ENFORCED",
	}
	FgsTypePolicyCheckEnum_value = map[string]int32{
		"FGS_TYPE_POLICY_CHECK_UNKNOWN":                      0,
		"FGS_TYPE_POLICY_CHECK_OK":                           1,
		"FGS_TYPE_POLICY_CHECK_DEPRECATED":                   2,
		"FGS_TYPE_POLICY_CHECK_DISABLED":                     3,
		"FGS_TYPE_POLICY_CHECK_PERMISSION_DENIED_PERMISSIVE": 4,
		"FGS_TYPE_POLICY_CHECK_PERMISSION_DENIED_ENFORCED":   5,
	}
)

func (x FgsTypePolicyCheckEnum) Enum() *FgsTypePolicyCheckEnum {
	p := new(FgsTypePolicyCheckEnum)
	*p = x
	return p
}

func (x FgsTypePolicyCheckEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FgsTypePolicyCheckEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[9].Descriptor()
}

func (FgsTypePolicyCheckEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[9]
}

func (x FgsTypePolicyCheckEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FgsTypePolicyCheckEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FgsTypePolicyCheckEnum(num)
	return nil
}

// Deprecated: Use FgsTypePolicyCheckEnum.Descriptor instead.
func (FgsTypePolicyCheckEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{9}
}

// *
// The type of the component this process is hosting.
type HostingComponentType int32

const (
	HostingComponentType_HOSTING_COMPONENT_TYPE_EMPTY              HostingComponentType = 0
	HostingComponentType_HOSTING_COMPONENT_TYPE_SYSTEM             HostingComponentType = 1
	HostingComponentType_HOSTING_COMPONENT_TYPE_PERSISTENT         HostingComponentType = 2
	HostingComponentType_HOSTING_COMPONENT_TYPE_BACKUP             HostingComponentType = 4
	HostingComponentType_HOSTING_COMPONENT_TYPE_INSTRUMENTATION    HostingComponentType = 8
	HostingComponentType_HOSTING_COMPONENT_TYPE_ACTIVITY           HostingComponentType = 16
	HostingComponentType_HOSTING_COMPONENT_TYPE_BROADCAST_RECEIVER HostingComponentType = 32
	HostingComponentType_HOSTING_COMPONENT_TYPE_PROVIDER           HostingComponentType = 64
	HostingComponentType_HOSTING_COMPONENT_TYPE_STARTED_SERVICE    HostingComponentType = 128
	HostingComponentType_HOSTING_COMPONENT_TYPE_FOREGROUND_SERVICE HostingComponentType = 256
	HostingComponentType_HOSTING_COMPONENT_TYPE_BOUND_SERVICE      HostingComponentType = 512
)

// Enum value maps for HostingComponentType.
var (
	HostingComponentType_name = map[int32]string{
		0:   "HOSTING_COMPONENT_TYPE_EMPTY",
		1:   "HOSTING_COMPONENT_TYPE_SYSTEM",
		2:   "HOSTING_COMPONENT_TYPE_PERSISTENT",
		4:   "HOSTING_COMPONENT_TYPE_BACKUP",
		8:   "HOSTING_COMPONENT_TYPE_INSTRUMENTATION",
		16:  "HOSTING_COMPONENT_TYPE_ACTIVITY",
		32:  "HOSTING_COMPONENT_TYPE_BROADCAST_RECEIVER",
		64:  "HOSTING_COMPONENT_TYPE_PROVIDER",
		128: "HOSTING_COMPONENT_TYPE_STARTED_SERVICE",
		256: "HOSTING_COMPONENT_TYPE_FOREGROUND_SERVICE",
		512: "HOSTING_COMPONENT_TYPE_BOUND_SERVICE",
	}
	HostingComponentType_value = map[string]int32{
		"HOSTING_COMPONENT_TYPE_EMPTY":              0,
		"HOSTING_COMPONENT_TYPE_SYSTEM":             1,
		"HOSTING_COMPONENT_TYPE_PERSISTENT":         2,
		"HOSTING_COMPONENT_TYPE_BACKUP":             4,
		"HOSTING_COMPONENT_TYPE_INSTRUMENTATION":    8,
		"HOSTING_COMPONENT_TYPE_ACTIVITY":           16,
		"HOSTING_COMPONENT_TYPE_BROADCAST_RECEIVER": 32,
		"HOSTING_COMPONENT_TYPE_PROVIDER":           64,
		"HOSTING_COMPONENT_TYPE_STARTED_SERVICE":    128,
		"HOSTING_COMPONENT_TYPE_FOREGROUND_SERVICE": 256,
		"HOSTING_COMPONENT_TYPE_BOUND_SERVICE":      512,
	}
)

func (x HostingComponentType) Enum() *HostingComponentType {
	p := new(HostingComponentType)
	*p = x
	return p
}

func (x HostingComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostingComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[10].Descriptor()
}

func (HostingComponentType) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[10]
}

func (x HostingComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HostingComponentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HostingComponentType(num)
	return nil
}

// Deprecated: Use HostingComponentType.Descriptor instead.
func (HostingComponentType) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{10}
}

// *
// Types of broadcast.
type BroadcastType int32

const (
	BroadcastType_BROADCAST_TYPE_NONE                    BroadcastType = 0
	BroadcastType_BROADCAST_TYPE_BACKGROUND              BroadcastType = 1    // 1 << 0
	BroadcastType_BROADCAST_TYPE_FOREGROUND              BroadcastType = 2    // 1 << 1
	BroadcastType_BROADCAST_TYPE_ALARM                   BroadcastType = 4    // 1 << 2
	BroadcastType_BROADCAST_TYPE_INTERACTIVE             BroadcastType = 8    // 1 << 3
	BroadcastType_BROADCAST_TYPE_ORDERED                 BroadcastType = 16   // 1 << 4
	BroadcastType_BROADCAST_TYPE_PRIORITIZED             BroadcastType = 32   // 1 << 5
	BroadcastType_BROADCAST_TYPE_RESULT_TO               BroadcastType = 64   // 1 << 6
	BroadcastType_BROADCAST_TYPE_DEFERRABLE_UNTIL_ACTIVE BroadcastType = 128  // 1 << 7
	BroadcastType_BROADCAST_TYPE_PUSH_MESSAGE            BroadcastType = 256  // 1 << 8
	BroadcastType_BROADCAST_TYPE_PUSH_MESSAGE_OVER_QUOTA BroadcastType = 512  // 1 << 9
	BroadcastType_BROADCAST_TYPE_STICKY                  BroadcastType = 1024 // 1 << 10
	BroadcastType_BROADCAST_TYPE_INITIAL_STICKY          BroadcastType = 2048 // 1 << 11
)

// Enum value maps for BroadcastType.
var (
	BroadcastType_name = map[int32]string{
		0:    "BROADCAST_TYPE_NONE",
		1:    "BROADCAST_TYPE_BACKGROUND",
		2:    "BROADCAST_TYPE_FOREGROUND",
		4:    "BROADCAST_TYPE_ALARM",
		8:    "BROADCAST_TYPE_INTERACTIVE",
		16:   "BROADCAST_TYPE_ORDERED",
		32:   "BROADCAST_TYPE_PRIORITIZED",
		64:   "BROADCAST_TYPE_RESULT_TO",
		128:  "BROADCAST_TYPE_DEFERRABLE_UNTIL_ACTIVE",
		256:  "BROADCAST_TYPE_PUSH_MESSAGE",
		512:  "BROADCAST_TYPE_PUSH_MESSAGE_OVER_QUOTA",
		1024: "BROADCAST_TYPE_STICKY",
		2048: "BROADCAST_TYPE_INITIAL_STICKY",
	}
	BroadcastType_value = map[string]int32{
		"BROADCAST_TYPE_NONE":                    0,
		"BROADCAST_TYPE_BACKGROUND":              1,
		"BROADCAST_TYPE_FOREGROUND":              2,
		"BROADCAST_TYPE_ALARM":                   4,
		"BROADCAST_TYPE_INTERACTIVE":             8,
		"BROADCAST_TYPE_ORDERED":                 16,
		"BROADCAST_TYPE_PRIORITIZED":             32,
		"BROADCAST_TYPE_RESULT_TO":               64,
		"BROADCAST_TYPE_DEFERRABLE_UNTIL_ACTIVE": 128,
		"BROADCAST_TYPE_PUSH_MESSAGE":            256,
		"BROADCAST_TYPE_PUSH_MESSAGE_OVER_QUOTA": 512,
		"BROADCAST_TYPE_STICKY":                  1024,
		"BROADCAST_TYPE_INITIAL_STICKY":          2048,
	}
)

func (x BroadcastType) Enum() *BroadcastType {
	p := new(BroadcastType)
	*p = x
	return p
}

func (x BroadcastType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastType) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[11].Descriptor()
}

func (BroadcastType) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[11]
}

func (x BroadcastType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BroadcastType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BroadcastType(num)
	return nil
}

// Deprecated: Use BroadcastType.Descriptor instead.
func (BroadcastType) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{11}
}

// *
// Delivery group policy applied to a broadcast.
// Keep it in sync with BroadcastOptions#DeliveryGroupPolicy.
type BroadcastDeliveryGroupPolicy int32

const (
	BroadcastDeliveryGroupPolicy_BROADCAST_DELIVERY_GROUP_POLICY_ALL         BroadcastDeliveryGroupPolicy = 0
	BroadcastDeliveryGroupPolicy_BROADCAST_DELIVERY_GROUP_POLICY_MOST_RECENT BroadcastDeliveryGroupPolicy = 1
	BroadcastDeliveryGroupPolicy_BROADCAST_DELIVERY_GROUP_POLICY_MERGED      BroadcastDeliveryGroupPolicy = 2
)

// Enum value maps for BroadcastDeliveryGroupPolicy.
var (
	BroadcastDeliveryGroupPolicy_name = map[int32]string{
		0: "BROADCAST_DELIVERY_GROUP_POLICY_ALL",
		1: "BROADCAST_DELIVERY_GROUP_POLICY_MOST_RECENT",
		2: "BROADCAST_DELIVERY_GROUP_POLICY_MERGED",
	}
	BroadcastDeliveryGroupPolicy_value = map[string]int32{
		"BROADCAST_DELIVERY_GROUP_POLICY_ALL":         0,
		"BROADCAST_DELIVERY_GROUP_POLICY_MOST_RECENT": 1,
		"BROADCAST_DELIVERY_GROUP_POLICY_MERGED":      2,
	}
)

func (x BroadcastDeliveryGroupPolicy) Enum() *BroadcastDeliveryGroupPolicy {
	p := new(BroadcastDeliveryGroupPolicy)
	*p = x
	return p
}

func (x BroadcastDeliveryGroupPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastDeliveryGroupPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[12].Descriptor()
}

func (BroadcastDeliveryGroupPolicy) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[12]
}

func (x BroadcastDeliveryGroupPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BroadcastDeliveryGroupPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BroadcastDeliveryGroupPolicy(num)
	return nil
}

// Deprecated: Use BroadcastDeliveryGroupPolicy.Descriptor instead.
func (BroadcastDeliveryGroupPolicy) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{12}
}

// *
// Most recent state of startup.
type AppStartStartupState int32

const (
	AppStartStartupState_STARTUP_STATE_STARTED           AppStartStartupState = 0
	AppStartStartupState_STARTUP_STATE_ERROR             AppStartStartupState = 1
	AppStartStartupState_STARTUP_STATE_FIRST_FRAME_DRAWN AppStartStartupState = 2
)

// Enum value maps for AppStartStartupState.
var (
	AppStartStartupState_name = map[int32]string{
		0: "STARTUP_STATE_STARTED",
		1: "STARTUP_STATE_ERROR",
		2: "STARTUP_STATE_FIRST_FRAME_DRAWN",
	}
	AppStartStartupState_value = map[string]int32{
		"STARTUP_STATE_STARTED":           0,
		"STARTUP_STATE_ERROR":             1,
		"STARTUP_STATE_FIRST_FRAME_DRAWN": 2,
	}
)

func (x AppStartStartupState) Enum() *AppStartStartupState {
	p := new(AppStartStartupState)
	*p = x
	return p
}

func (x AppStartStartupState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppStartStartupState) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[13].Descriptor()
}

func (AppStartStartupState) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[13]
}

func (x AppStartStartupState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppStartStartupState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppStartStartupState(num)
	return nil
}

// Deprecated: Use AppStartStartupState.Descriptor instead.
func (AppStartStartupState) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{13}
}

// *
// The reason code of what triggered the process's start.
type AppStartReasonCode int32

const (
	AppStartReasonCode_START_REASON_ALARM            AppStartReasonCode = 0
	AppStartReasonCode_START_REASON_BACKUP           AppStartReasonCode = 1
	AppStartReasonCode_START_REASON_BOOT_COMPLETE    AppStartReasonCode = 2
	AppStartReasonCode_START_REASON_BROADCAST        AppStartReasonCode = 3
	AppStartReasonCode_START_REASON_CONTENT_PROVIDER AppStartReasonCode = 4
	AppStartReasonCode_START_REASON_JOB              AppStartReasonCode = 5
	AppStartReasonCode_START_REASON_LAUNCHER         AppStartReasonCode = 6
	AppStartReasonCode_START_REASON_OTHER            AppStartReasonCode = 7
	AppStartReasonCode_START_REASON_PUSH             AppStartReasonCode = 8
	AppStartReasonCode_START_REASON_RESUMED_ACTIVITY AppStartReasonCode = 9
	AppStartReasonCode_START_REASON_SERVICE          AppStartReasonCode = 10
	AppStartReasonCode_START_REASON_START_ACTIVITY   AppStartReasonCode = 11
)

// Enum value maps for AppStartReasonCode.
var (
	AppStartReasonCode_name = map[int32]string{
		0:  "START_REASON_ALARM",
		1:  "START_REASON_BACKUP",
		2:  "START_REASON_BOOT_COMPLETE",
		3:  "START_REASON_BROADCAST",
		4:  "START_REASON_CONTENT_PROVIDER",
		5:  "START_REASON_JOB",
		6:  "START_REASON_LAUNCHER",
		7:  "START_REASON_OTHER",
		8:  "START_REASON_PUSH",
		9:  "START_REASON_RESUMED_ACTIVITY",
		10: "START_REASON_SERVICE",
		11: "START_REASON_START_ACTIVITY",
	}
	AppStartReasonCode_value = map[string]int32{
		"START_REASON_ALARM":            0,
		"START_REASON_BACKUP":           1,
		"START_REASON_BOOT_COMPLETE":    2,
		"START_REASON_BROADCAST":        3,
		"START_REASON_CONTENT_PROVIDER": 4,
		"START_REASON_JOB":              5,
		"START_REASON_LAUNCHER":         6,
		"START_REASON_OTHER":            7,
		"START_REASON_PUSH":             8,
		"START_REASON_RESUMED_ACTIVITY": 9,
		"START_REASON_SERVICE":          10,
		"START_REASON_START_ACTIVITY":   11,
	}
)

func (x AppStartReasonCode) Enum() *AppStartReasonCode {
	p := new(AppStartReasonCode)
	*p = x
	return p
}

func (x AppStartReasonCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppStartReasonCode) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[14].Descriptor()
}

func (AppStartReasonCode) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[14]
}

func (x AppStartReasonCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppStartReasonCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppStartReasonCode(num)
	return nil
}

// Deprecated: Use AppStartReasonCode.Descriptor instead.
func (AppStartReasonCode) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{14}
}

// *
// Type of process start.
type AppStartStartType int32

const (
	AppStartStartType_START_TYPE_COLD AppStartStartType = 0
	AppStartStartType_START_TYPE_WARM AppStartStartType = 1
	AppStartStartType_START_TYPE_HOT  AppStartStartType = 2
)

// Enum value maps for AppStartStartType.
var (
	AppStartStartType_name = map[int32]string{
		0: "START_TYPE_COLD",
		1: "START_TYPE_WARM",
		2: "START_TYPE_HOT",
	}
	AppStartStartType_value = map[string]int32{
		"START_TYPE_COLD": 0,
		"START_TYPE_WARM": 1,
		"START_TYPE_HOT":  2,
	}
)

func (x AppStartStartType) Enum() *AppStartStartType {
	p := new(AppStartStartType)
	*p = x
	return p
}

func (x AppStartStartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppStartStartType) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[15].Descriptor()
}

func (AppStartStartType) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[15]
}

func (x AppStartStartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppStartStartType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppStartStartType(num)
	return nil
}

// Deprecated: Use AppStartStartType.Descriptor instead.
func (AppStartStartType) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{15}
}

// *
// An instruction on how the activity should be launched.
type AppStartLaunchMode int32

const (
	AppStartLaunchMode_LAUNCH_MODE_STANDARD                 AppStartLaunchMode = 0
	AppStartLaunchMode_LAUNCH_MODE_SINGLE_TOP               AppStartLaunchMode = 1
	AppStartLaunchMode_LAUNCH_MODE_SINGLE_INSTANCE          AppStartLaunchMode = 2
	AppStartLaunchMode_LAUNCH_MODE_SINGLE_TASK              AppStartLaunchMode = 3
	AppStartLaunchMode_LAUNCH_MODE_SINGLE_INSTANCE_PER_TASK AppStartLaunchMode = 4
)

// Enum value maps for AppStartLaunchMode.
var (
	AppStartLaunchMode_name = map[int32]string{
		0: "LAUNCH_MODE_STANDARD",
		1: "LAUNCH_MODE_SINGLE_TOP",
		2: "LAUNCH_MODE_SINGLE_INSTANCE",
		3: "LAUNCH_MODE_SINGLE_TASK",
		4: "LAUNCH_MODE_SINGLE_INSTANCE_PER_TASK",
	}
	AppStartLaunchMode_value = map[string]int32{
		"LAUNCH_MODE_STANDARD":                 0,
		"LAUNCH_MODE_SINGLE_TOP":               1,
		"LAUNCH_MODE_SINGLE_INSTANCE":          2,
		"LAUNCH_MODE_SINGLE_TASK":              3,
		"LAUNCH_MODE_SINGLE_INSTANCE_PER_TASK": 4,
	}
)

func (x AppStartLaunchMode) Enum() *AppStartLaunchMode {
	p := new(AppStartLaunchMode)
	*p = x
	return p
}

func (x AppStartLaunchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppStartLaunchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[16].Descriptor()
}

func (AppStartLaunchMode) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes[16]
}

func (x AppStartLaunchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppStartLaunchMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppStartLaunchMode(num)
	return nil
}

// Deprecated: Use AppStartLaunchMode.Descriptor instead.
func (AppStartLaunchMode) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP(), []int{16}
}

var File_frameworks_proto_logging_stats_enums_app_enums_proto protoreflect.FileDescriptor

var file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDesc = []byte{
	0x0a, 0x34, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x61, 0x70, 0x70, 0x2a, 0xda, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x50, 0x4c, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44,
	0x52, 0x41, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x10, 0x05,
	0x2a, 0x9c, 0x06, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0xe6, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0xe8, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x49, 0x10, 0xe9, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0xea, 0x07, 0x12,
	0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0xfc, 0x07, 0x12, 0x25, 0x0a,
	0x20, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0xeb, 0x07, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x45,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0xec,
	0x07, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xed, 0x07, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0xee, 0x07, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xef, 0x07, 0x12, 0x19, 0x0a, 0x14,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x10, 0xf0, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x10, 0xf1, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10, 0xf2, 0x07,
	0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x49, 0x4e, 0x47, 0x10, 0xf3,
	0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10,
	0xf4, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0xf5, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xf6, 0x07, 0x12, 0x22, 0x0a,
	0x1d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0xf7,
	0x07, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0xf8, 0x07, 0x12, 0x20, 0x0a, 0x1b,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x43, 0x48, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x10, 0xf9, 0x07, 0x12, 0x1f,
	0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xfa, 0x07, 0x12,
	0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xfb, 0x07, 0x2a,
	0xba, 0x06, 0x0a, 0x13, 0x4f, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x1f, 0x4f, 0x4f, 0x4d, 0x5f, 0x41,
	0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4f,
	0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44,
	0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x4f, 0x4d, 0x5f,
	0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x4f, 0x4d,
	0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x49, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x0b, 0x12,
	0x1e, 0x0a, 0x1a, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0c, 0x12,
	0x24, 0x0a, 0x20, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x47, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x0f,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x4f,
	0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x4f,
	0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x49, 0x44,
	0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x4f, 0x4d, 0x5f, 0x41,
	0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x4f, 0x4d, 0x5f,
	0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x14, 0x12, 0x25,
	0x0a, 0x21, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x44, 0x4a,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x16, 0x2a, 0x80, 0x26, 0x0a,
	0x09, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x0b, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x46, 0x49, 0x4e, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x56, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x43, 0x54, 0x53, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54,
	0x53, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44, 0x41, 0x52, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x53, 0x43, 0x41,
	0x4e, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x49, 0x47,
	0x48, 0x42, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x10, 0x0c, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10,
	0x0f, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50,
	0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x4d,
	0x53, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x41, 0x50, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x13,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f,
	0x53, 0x4d, 0x53, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x43, 0x43, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x15, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49,
	0x43, 0x43, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x1b,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x50, 0x42, 0x4f, 0x41, 0x52, 0x44,
	0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x50, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x10, 0x1e, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x53, 0x10, 0x1f, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x20, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x22, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50,
	0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x56,
	0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x23, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f,
	0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x10, 0x24, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x10, 0x25, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x26, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x42, 0x4c, 0x55, 0x45,
	0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x27, 0x12, 0x14,
	0x0a, 0x10, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4d,
	0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x29, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50,
	0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x53, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x4d, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10,
	0x2c, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x54, 0x4f, 0x41, 0x53,
	0x54, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x2f, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x57, 0x41,
	0x4c, 0x4c, 0x50, 0x41, 0x50, 0x45, 0x52, 0x10, 0x30, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50,
	0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x31, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50,
	0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x48,
	0x4f, 0x54, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x33, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x34, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x49, 0x50, 0x10, 0x35, 0x12,
	0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x4f, 0x55, 0x54, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53,
	0x10, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x37, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x53, 0x10, 0x38, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x53, 0x10, 0x39, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x3a, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x3b, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x4f,
	0x50, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4f, 0x4e,
	0x10, 0x3d, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x3e, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x3f, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x50, 0x50,
	0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x40,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x41, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x53, 0x10, 0x42, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x50,
	0x49, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x49, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x43, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x44, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x53, 0x10, 0x45, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x49, 0x4e,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x46, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x57,
	0x49, 0x46, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x47, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x53, 0x10, 0x48, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x49, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4f, 0x56, 0x45, 0x52,
	0x10, 0x4a, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x53, 0x10, 0x4b, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x4c,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x54,
	0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x10, 0x4d, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x10, 0x4e, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4f, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50,
	0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x50, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x51, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x52, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x53, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x10, 0x54, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x55, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x10, 0x56,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43,
	0x59, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x57, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x58, 0x12, 0x22, 0x0a, 0x1e,
	0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x10, 0x59,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x5a, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x5b, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x5c, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x5d, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x5e, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x5f, 0x12, 0x1b, 0x0a, 0x13, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x31, 0x10, 0x60, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x46, 0x5f, 0x55, 0x4e,
	0x55, 0x53, 0x45, 0x44, 0x10, 0x61, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45,
	0x52, 0x10, 0x62, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x63, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x10, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x10, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x48, 0x4f, 0x54, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x66, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x53, 0x10, 0x67, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x53, 0x10, 0x68, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x49, 0x43, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x10, 0x69, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x10, 0x6a, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x10, 0x6b, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x46, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x6c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50,
	0x5f, 0x43, 0x4f, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50,
	0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x10, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x4c, 0x55,
	0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x6f,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x57, 0x42, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x70, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x71,
	0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x54,
	0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10, 0x72,
	0x12, 0x26, 0x0a, 0x22, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x42, 0x59, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x10, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x56, 0x50, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x75, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x56,
	0x50, 0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x76, 0x12, 0x25, 0x0a, 0x21,
	0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x10, 0x77, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4d, 0x42, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x78, 0x12, 0x32, 0x0a,
	0x2e, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10,
	0x79, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x55, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4a,
	0x4f, 0x42, 0x53, 0x10, 0x7a, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x56, 0x49, 0x53, 0x55, 0x41,
	0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x7b, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x45, 0x58, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53,
	0x55, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x7c, 0x12, 0x37, 0x0a, 0x33, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x45,
	0x4d, 0x50, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x7d, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x7e, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x5f, 0x4f,
	0x50, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45,
	0x10, 0x7f, 0x12, 0x31, 0x0a, 0x2c, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x80, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x48, 0x49, 0x42, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x81,
	0x01, 0x12, 0x3c, 0x0a, 0x37, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x45, 0x58, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x82, 0x01, 0x12,
	0x3c, 0x0a, 0x37, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x55,
	0x47, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x45, 0x42, 0x55, 0x47, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x83, 0x01, 0x12, 0x2e, 0x0a,
	0x25, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x53, 0x5f, 0x57, 0x52, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x84, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x85,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x45, 0x44, 0x10, 0x86, 0x01, 0x12,
	0x22, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x45, 0x44,
	0x10, 0x87, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x88, 0x01, 0x12, 0x35,
	0x0a, 0x30, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x89, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x8a, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10,
	0x8b, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x42, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x8c, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x8d, 0x01, 0x12, 0x31, 0x0a, 0x2c,
	0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x41, 0x50, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x45,
	0x41, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x42, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45, 0x52, 0x10, 0x8e, 0x01, 0x12,
	0x2a, 0x0a, 0x25, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x8f, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x41,
	0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x5f, 0x4a, 0x4f, 0x42, 0x53, 0x10, 0x90, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f,
	0x4f, 0x50, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x91, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x41, 0x50,
	0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x92, 0x01, 0x12,
	0x1e, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x93, 0x01, 0x2a,
	0xbd, 0x03, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c,
	0x4f, 0x57, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x5f, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x41, 0x4e, 0x52, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x0b,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x52,
	0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x2a,
	0xfa, 0x07, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x45, 0x78, 0x69, 0x74, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x47, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x07, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10,
	0x08, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b,
	0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x47, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x41,
	0x4c, 0x4c, 0x5f, 0x42, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x0a, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4c, 0x4c,
	0x5f, 0x55, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x49,
	0x42, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4c, 0x52, 0x55, 0x10, 0x10, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x11, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x12,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5a, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4f, 0x43,
	0x54, 0x4c, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x15, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x55, 0x42, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55,
	0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x19, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x42, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x1a, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x53,
	0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x44, 0x49, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x53,
	0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x1c, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45,
	0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x4f, 0x4d, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x10, 0x1e, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x55, 0x42, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x41, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x1f, 0x2a, 0xae, 0x03, 0x0a,
	0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x7d, 0x12, 0x23, 0x0a, 0x1e, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x4c, 0x45, 0x45,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x32, 0x38, 0x10, 0x96, 0x01, 0x12, 0x17,
	0x0a, 0x12, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x53,
	0x49, 0x42, 0x4c, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x32, 0x36, 0x10, 0x82, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0xe6, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x56, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x32, 0x36, 0x10, 0xaa, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0xac, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x4c, 0x45, 0x45,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0xc5, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0xde, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x90, 0x03,
	0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x90, 0x03, 0x12, 0x15, 0x0a, 0x10,
	0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x10, 0xf4, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x47, 0x4f, 0x4e, 0x45, 0x10, 0xe8, 0x07, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x6a, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x41, 0x50, 0x49, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53, 0x10, 0x02, 0x2a, 0xa0, 0x01, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x05, 0x2a, 0x91, 0x02, 0x0a,
	0x16, 0x46, 0x67, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x47, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x47,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x47, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x46, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x46, 0x47,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x10, 0x05,
	0x2a, 0xd2, 0x03, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x10, 0x12, 0x2d, 0x0a, 0x29, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10, 0x20, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x40, 0x12, 0x2b, 0x0a,
	0x26, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x80, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x80, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x80, 0x04, 0x2a, 0xb6, 0x03, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x4f,
	0x10, 0x40, 0x12, 0x2b, 0x0a, 0x26, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x80, 0x01, 0x12,
	0x20, 0x0a, 0x1b, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x80,
	0x02, 0x12, 0x2b, 0x0a, 0x26, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x80, 0x04, 0x12, 0x1a,
	0x0a, 0x15, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x59, 0x10, 0x80, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x52,
	0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x59, 0x10, 0x80, 0x10, 0x2a, 0xa4,
	0x01, 0x0a, 0x1c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x27, 0x0a, 0x23, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44,
	0x52, 0x41, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0xe2, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4c,
	0x41, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42,
	0x4f, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f,
	0x42, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x08, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x09,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x2a, 0x51, 0x0a, 0x11, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x54, 0x10, 0x02, 0x2a, 0xb2,
	0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c,
	0x41, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47,
	0x4c, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x41, 0x55,
	0x4e, 0x43, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x10, 0x04, 0x42, 0x11, 0x42, 0x0d, 0x41, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45,
	0x6e, 0x75, 0x6d, 0x73, 0x50, 0x01,
}

var (
	file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescOnce sync.Once
	file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescData = file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDesc
)

func file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescGZIP() []byte {
	file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescOnce.Do(func() {
		file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescData)
	})
	return file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDescData
}

var file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_frameworks_proto_logging_stats_enums_app_enums_proto_goTypes = []any{
	(AppTransitionReasonEnum)(0),      // 0: android.app.AppTransitionReasonEnum
	(ProcessStateEnum)(0),             // 1: android.app.ProcessStateEnum
	(OomChangeReasonEnum)(0),          // 2: android.app.OomChangeReasonEnum
	(AppOpEnum)(0),                    // 3: android.app.AppOpEnum
	(AppExitReasonCode)(0),            // 4: android.app.AppExitReasonCode
	(AppExitSubReasonCode)(0),         // 5: android.app.AppExitSubReasonCode
	(Importance)(0),                   // 6: android.app.Importance
	(ResourceApiEnum)(0),              // 7: android.app.ResourceApiEnum
	(GameMode)(0),                     // 8: android.app.GameMode
	(FgsTypePolicyCheckEnum)(0),       // 9: android.app.FgsTypePolicyCheckEnum
	(HostingComponentType)(0),         // 10: android.app.HostingComponentType
	(BroadcastType)(0),                // 11: android.app.BroadcastType
	(BroadcastDeliveryGroupPolicy)(0), // 12: android.app.BroadcastDeliveryGroupPolicy
	(AppStartStartupState)(0),         // 13: android.app.AppStartStartupState
	(AppStartReasonCode)(0),           // 14: android.app.AppStartReasonCode
	(AppStartStartType)(0),            // 15: android.app.AppStartStartType
	(AppStartLaunchMode)(0),           // 16: android.app.AppStartLaunchMode
}
var file_frameworks_proto_logging_stats_enums_app_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_frameworks_proto_logging_stats_enums_app_enums_proto_init() }
func file_frameworks_proto_logging_stats_enums_app_enums_proto_init() {
	if File_frameworks_proto_logging_stats_enums_app_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_frameworks_proto_logging_stats_enums_app_enums_proto_goTypes,
		DependencyIndexes: file_frameworks_proto_logging_stats_enums_app_enums_proto_depIdxs,
		EnumInfos:         file_frameworks_proto_logging_stats_enums_app_enums_proto_enumTypes,
	}.Build()
	File_frameworks_proto_logging_stats_enums_app_enums_proto = out.File
	file_frameworks_proto_logging_stats_enums_app_enums_proto_rawDesc = nil
	file_frameworks_proto_logging_stats_enums_app_enums_proto_goTypes = nil
	file_frameworks_proto_logging_stats_enums_app_enums_proto_depIdxs = nil
}
