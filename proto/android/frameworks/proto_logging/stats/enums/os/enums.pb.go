//
// Copyright (C) 2018 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.4
// source: frameworks/proto_logging/stats/enums/os/enums.proto

package os

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These constants are defined in hardware/interfaces/health/1.0/types.hal
// They are primarily used by android/os/BatteryManager.java.
type BatteryHealthEnum int32

const (
	BatteryHealthEnum_BATTERY_HEALTH_INVALID             BatteryHealthEnum = 0
	BatteryHealthEnum_BATTERY_HEALTH_UNKNOWN             BatteryHealthEnum = 1
	BatteryHealthEnum_BATTERY_HEALTH_GOOD                BatteryHealthEnum = 2
	BatteryHealthEnum_BATTERY_HEALTH_OVERHEAT            BatteryHealthEnum = 3
	BatteryHealthEnum_BATTERY_HEALTH_DEAD                BatteryHealthEnum = 4
	BatteryHealthEnum_BATTERY_HEALTH_OVER_VOLTAGE        BatteryHealthEnum = 5
	BatteryHealthEnum_BATTERY_HEALTH_UNSPECIFIED_FAILURE BatteryHealthEnum = 6
	BatteryHealthEnum_BATTERY_HEALTH_COLD                BatteryHealthEnum = 7
	BatteryHealthEnum_BATTERY_HEALTH_FAIR                BatteryHealthEnum = 8
	BatteryHealthEnum_BATTERY_HEALTH_NOT_AVAILABLE       BatteryHealthEnum = 11
	BatteryHealthEnum_BATTERY_HEALTH_INCONSISTENT        BatteryHealthEnum = 12
)

// Enum value maps for BatteryHealthEnum.
var (
	BatteryHealthEnum_name = map[int32]string{
		0:  "BATTERY_HEALTH_INVALID",
		1:  "BATTERY_HEALTH_UNKNOWN",
		2:  "BATTERY_HEALTH_GOOD",
		3:  "BATTERY_HEALTH_OVERHEAT",
		4:  "BATTERY_HEALTH_DEAD",
		5:  "BATTERY_HEALTH_OVER_VOLTAGE",
		6:  "BATTERY_HEALTH_UNSPECIFIED_FAILURE",
		7:  "BATTERY_HEALTH_COLD",
		8:  "BATTERY_HEALTH_FAIR",
		11: "BATTERY_HEALTH_NOT_AVAILABLE",
		12: "BATTERY_HEALTH_INCONSISTENT",
	}
	BatteryHealthEnum_value = map[string]int32{
		"BATTERY_HEALTH_INVALID":             0,
		"BATTERY_HEALTH_UNKNOWN":             1,
		"BATTERY_HEALTH_GOOD":                2,
		"BATTERY_HEALTH_OVERHEAT":            3,
		"BATTERY_HEALTH_DEAD":                4,
		"BATTERY_HEALTH_OVER_VOLTAGE":        5,
		"BATTERY_HEALTH_UNSPECIFIED_FAILURE": 6,
		"BATTERY_HEALTH_COLD":                7,
		"BATTERY_HEALTH_FAIR":                8,
		"BATTERY_HEALTH_NOT_AVAILABLE":       11,
		"BATTERY_HEALTH_INCONSISTENT":        12,
	}
)

func (x BatteryHealthEnum) Enum() *BatteryHealthEnum {
	p := new(BatteryHealthEnum)
	*p = x
	return p
}

func (x BatteryHealthEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryHealthEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[0].Descriptor()
}

func (BatteryHealthEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[0]
}

func (x BatteryHealthEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BatteryHealthEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BatteryHealthEnum(num)
	return nil
}

// Deprecated: Use BatteryHealthEnum.Descriptor instead.
func (BatteryHealthEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{0}
}

// Plug states, primarily used by android/os/BatteryManager.java.
type BatteryPluggedStateEnum int32

const (
	// Note that NONE is not in BatteryManager.java's constants.
	BatteryPluggedStateEnum_BATTERY_PLUGGED_NONE BatteryPluggedStateEnum = 0
	// Power source is an AC charger.
	BatteryPluggedStateEnum_BATTERY_PLUGGED_AC BatteryPluggedStateEnum = 1
	// Power source is a USB port.
	BatteryPluggedStateEnum_BATTERY_PLUGGED_USB BatteryPluggedStateEnum = 2
	// Power source is wireless.
	BatteryPluggedStateEnum_BATTERY_PLUGGED_WIRELESS BatteryPluggedStateEnum = 4
	// Power source is dock.
	BatteryPluggedStateEnum_BATTERY_PLUGGED_DOCK BatteryPluggedStateEnum = 8
)

// Enum value maps for BatteryPluggedStateEnum.
var (
	BatteryPluggedStateEnum_name = map[int32]string{
		0: "BATTERY_PLUGGED_NONE",
		1: "BATTERY_PLUGGED_AC",
		2: "BATTERY_PLUGGED_USB",
		4: "BATTERY_PLUGGED_WIRELESS",
		8: "BATTERY_PLUGGED_DOCK",
	}
	BatteryPluggedStateEnum_value = map[string]int32{
		"BATTERY_PLUGGED_NONE":     0,
		"BATTERY_PLUGGED_AC":       1,
		"BATTERY_PLUGGED_USB":      2,
		"BATTERY_PLUGGED_WIRELESS": 4,
		"BATTERY_PLUGGED_DOCK":     8,
	}
)

func (x BatteryPluggedStateEnum) Enum() *BatteryPluggedStateEnum {
	p := new(BatteryPluggedStateEnum)
	*p = x
	return p
}

func (x BatteryPluggedStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryPluggedStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[1].Descriptor()
}

func (BatteryPluggedStateEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[1]
}

func (x BatteryPluggedStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BatteryPluggedStateEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BatteryPluggedStateEnum(num)
	return nil
}

// Deprecated: Use BatteryPluggedStateEnum.Descriptor instead.
func (BatteryPluggedStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{1}
}

// These constants are defined in hardware/interfaces/health/1.0/types.hal
// They are primarily used by android/os/BatteryManager.java.
type BatteryStatusEnum int32

const (
	BatteryStatusEnum_BATTERY_STATUS_INVALID      BatteryStatusEnum = 0
	BatteryStatusEnum_BATTERY_STATUS_UNKNOWN      BatteryStatusEnum = 1
	BatteryStatusEnum_BATTERY_STATUS_CHARGING     BatteryStatusEnum = 2
	BatteryStatusEnum_BATTERY_STATUS_DISCHARGING  BatteryStatusEnum = 3
	BatteryStatusEnum_BATTERY_STATUS_NOT_CHARGING BatteryStatusEnum = 4
	BatteryStatusEnum_BATTERY_STATUS_FULL         BatteryStatusEnum = 5
)

// Enum value maps for BatteryStatusEnum.
var (
	BatteryStatusEnum_name = map[int32]string{
		0: "BATTERY_STATUS_INVALID",
		1: "BATTERY_STATUS_UNKNOWN",
		2: "BATTERY_STATUS_CHARGING",
		3: "BATTERY_STATUS_DISCHARGING",
		4: "BATTERY_STATUS_NOT_CHARGING",
		5: "BATTERY_STATUS_FULL",
	}
	BatteryStatusEnum_value = map[string]int32{
		"BATTERY_STATUS_INVALID":      0,
		"BATTERY_STATUS_UNKNOWN":      1,
		"BATTERY_STATUS_CHARGING":     2,
		"BATTERY_STATUS_DISCHARGING":  3,
		"BATTERY_STATUS_NOT_CHARGING": 4,
		"BATTERY_STATUS_FULL":         5,
	}
)

func (x BatteryStatusEnum) Enum() *BatteryStatusEnum {
	p := new(BatteryStatusEnum)
	*p = x
	return p
}

func (x BatteryStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[2].Descriptor()
}

func (BatteryStatusEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[2]
}

func (x BatteryStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BatteryStatusEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BatteryStatusEnum(num)
	return nil
}

// Deprecated: Use BatteryStatusEnum.Descriptor instead.
func (BatteryStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{2}
}

type PowerComponentEnum int32

const (
	PowerComponentEnum_POWER_COMPONENT_SCREEN          PowerComponentEnum = 0
	PowerComponentEnum_POWER_COMPONENT_CPU             PowerComponentEnum = 1
	PowerComponentEnum_POWER_COMPONENT_BLUETOOTH       PowerComponentEnum = 2
	PowerComponentEnum_POWER_COMPONENT_CAMERA          PowerComponentEnum = 3
	PowerComponentEnum_POWER_COMPONENT_AUDIO           PowerComponentEnum = 4
	PowerComponentEnum_POWER_COMPONENT_VIDEO           PowerComponentEnum = 5
	PowerComponentEnum_POWER_COMPONENT_FLASHLIGHT      PowerComponentEnum = 6
	PowerComponentEnum_POWER_COMPONENT_SYSTEM_SERVICES PowerComponentEnum = 7
	PowerComponentEnum_POWER_COMPONENT_MOBILE_RADIO    PowerComponentEnum = 8
	PowerComponentEnum_POWER_COMPONENT_SENSORS         PowerComponentEnum = 9
	PowerComponentEnum_POWER_COMPONENT_GNSS            PowerComponentEnum = 10
	PowerComponentEnum_POWER_COMPONENT_WIFI            PowerComponentEnum = 11
	PowerComponentEnum_POWER_COMPONENT_WAKELOCK        PowerComponentEnum = 12
	PowerComponentEnum_POWER_COMPONENT_MEMORY          PowerComponentEnum = 13
	PowerComponentEnum_POWER_COMPONENT_PHONE           PowerComponentEnum = 14
	PowerComponentEnum_POWER_COMPONENT_AMBIENT_DISPLAY PowerComponentEnum = 15
	PowerComponentEnum_POWER_COMPONENT_IDLE            PowerComponentEnum = 16
	// Power that is re-attributed to other battery consumers. For example, for System Server
	// this represents the power attributed to apps requesting system services.
	// The value should be negative or zero.
	PowerComponentEnum_POWER_COMPONENT_REATTRIBUTED_TO_OTHER_CONSUMERS PowerComponentEnum = 17
)

// Enum value maps for PowerComponentEnum.
var (
	PowerComponentEnum_name = map[int32]string{
		0:  "POWER_COMPONENT_SCREEN",
		1:  "POWER_COMPONENT_CPU",
		2:  "POWER_COMPONENT_BLUETOOTH",
		3:  "POWER_COMPONENT_CAMERA",
		4:  "POWER_COMPONENT_AUDIO",
		5:  "POWER_COMPONENT_VIDEO",
		6:  "POWER_COMPONENT_FLASHLIGHT",
		7:  "POWER_COMPONENT_SYSTEM_SERVICES",
		8:  "POWER_COMPONENT_MOBILE_RADIO",
		9:  "POWER_COMPONENT_SENSORS",
		10: "POWER_COMPONENT_GNSS",
		11: "POWER_COMPONENT_WIFI",
		12: "POWER_COMPONENT_WAKELOCK",
		13: "POWER_COMPONENT_MEMORY",
		14: "POWER_COMPONENT_PHONE",
		15: "POWER_COMPONENT_AMBIENT_DISPLAY",
		16: "POWER_COMPONENT_IDLE",
		17: "POWER_COMPONENT_REATTRIBUTED_TO_OTHER_CONSUMERS",
	}
	PowerComponentEnum_value = map[string]int32{
		"POWER_COMPONENT_SCREEN":                          0,
		"POWER_COMPONENT_CPU":                             1,
		"POWER_COMPONENT_BLUETOOTH":                       2,
		"POWER_COMPONENT_CAMERA":                          3,
		"POWER_COMPONENT_AUDIO":                           4,
		"POWER_COMPONENT_VIDEO":                           5,
		"POWER_COMPONENT_FLASHLIGHT":                      6,
		"POWER_COMPONENT_SYSTEM_SERVICES":                 7,
		"POWER_COMPONENT_MOBILE_RADIO":                    8,
		"POWER_COMPONENT_SENSORS":                         9,
		"POWER_COMPONENT_GNSS":                            10,
		"POWER_COMPONENT_WIFI":                            11,
		"POWER_COMPONENT_WAKELOCK":                        12,
		"POWER_COMPONENT_MEMORY":                          13,
		"POWER_COMPONENT_PHONE":                           14,
		"POWER_COMPONENT_AMBIENT_DISPLAY":                 15,
		"POWER_COMPONENT_IDLE":                            16,
		"POWER_COMPONENT_REATTRIBUTED_TO_OTHER_CONSUMERS": 17,
	}
)

func (x PowerComponentEnum) Enum() *PowerComponentEnum {
	p := new(PowerComponentEnum)
	*p = x
	return p
}

func (x PowerComponentEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerComponentEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[3].Descriptor()
}

func (PowerComponentEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[3]
}

func (x PowerComponentEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PowerComponentEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PowerComponentEnum(num)
	return nil
}

// Deprecated: Use PowerComponentEnum.Descriptor instead.
func (PowerComponentEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{3}
}

// These constants are defined in hardware/interfaces/thermal/1.0/types.hal
// and in hardware/interfaces/thermal/2.0/types.hal
// They are primarily used by android/os/HardwarePropertiesManager.java.
// Any change to the types in the thermal hal should be made here as well.
type TemperatureTypeEnum int32

const (
	TemperatureTypeEnum_TEMPERATURE_TYPE_UNKNOWN         TemperatureTypeEnum = -1
	TemperatureTypeEnum_TEMPERATURE_TYPE_CPU             TemperatureTypeEnum = 0
	TemperatureTypeEnum_TEMPERATURE_TYPE_GPU             TemperatureTypeEnum = 1
	TemperatureTypeEnum_TEMPERATURE_TYPE_BATTERY         TemperatureTypeEnum = 2
	TemperatureTypeEnum_TEMPERATURE_TYPE_SKIN            TemperatureTypeEnum = 3
	TemperatureTypeEnum_TEMPERATURE_TYPE_USB_PORT        TemperatureTypeEnum = 4
	TemperatureTypeEnum_TEMPERATURE_TYPE_POWER_AMPLIFIER TemperatureTypeEnum = 5
	// Battery Charge Limit - virtual thermal sensors.
	TemperatureTypeEnum_TEMPERATURE_TYPE_BCL_VOLTAGE    TemperatureTypeEnum = 6
	TemperatureTypeEnum_TEMPERATURE_TYPE_BCL_CURRENT    TemperatureTypeEnum = 7
	TemperatureTypeEnum_TEMPERATURE_TYPE_BCL_PERCENTAGE TemperatureTypeEnum = 8
	// Neural Processing Unit.
	TemperatureTypeEnum_TEMPERATURE_TYPE_NPU        TemperatureTypeEnum = 9
	TemperatureTypeEnum_TEMPERATURE_TYPE_TPU        TemperatureTypeEnum = 10
	TemperatureTypeEnum_TEMPERATURE_TYPE_DISPLAY    TemperatureTypeEnum = 11
	TemperatureTypeEnum_TEMPERATURE_TYPE_MODEM      TemperatureTypeEnum = 12
	TemperatureTypeEnum_TEMPERATURE_TYPE_SOC        TemperatureTypeEnum = 13
	TemperatureTypeEnum_TEMPERATURE_TYPE_WIFI       TemperatureTypeEnum = 14
	TemperatureTypeEnum_TEMPERATURE_TYPE_CAMERA     TemperatureTypeEnum = 15
	TemperatureTypeEnum_TEMPERATURE_TYPE_FLASHLIGHT TemperatureTypeEnum = 16
	TemperatureTypeEnum_TEMPERATURE_TYPE_SPEAKER    TemperatureTypeEnum = 17
	TemperatureTypeEnum_TEMPERATURE_TYPE_AMBIENT    TemperatureTypeEnum = 18
	TemperatureTypeEnum_TEMPERATURE_TYPE_POGO       TemperatureTypeEnum = 19
)

// Enum value maps for TemperatureTypeEnum.
var (
	TemperatureTypeEnum_name = map[int32]string{
		-1: "TEMPERATURE_TYPE_UNKNOWN",
		0:  "TEMPERATURE_TYPE_CPU",
		1:  "TEMPERATURE_TYPE_GPU",
		2:  "TEMPERATURE_TYPE_BATTERY",
		3:  "TEMPERATURE_TYPE_SKIN",
		4:  "TEMPERATURE_TYPE_USB_PORT",
		5:  "TEMPERATURE_TYPE_POWER_AMPLIFIER",
		6:  "TEMPERATURE_TYPE_BCL_VOLTAGE",
		7:  "TEMPERATURE_TYPE_BCL_CURRENT",
		8:  "TEMPERATURE_TYPE_BCL_PERCENTAGE",
		9:  "TEMPERATURE_TYPE_NPU",
		10: "TEMPERATURE_TYPE_TPU",
		11: "TEMPERATURE_TYPE_DISPLAY",
		12: "TEMPERATURE_TYPE_MODEM",
		13: "TEMPERATURE_TYPE_SOC",
		14: "TEMPERATURE_TYPE_WIFI",
		15: "TEMPERATURE_TYPE_CAMERA",
		16: "TEMPERATURE_TYPE_FLASHLIGHT",
		17: "TEMPERATURE_TYPE_SPEAKER",
		18: "TEMPERATURE_TYPE_AMBIENT",
		19: "TEMPERATURE_TYPE_POGO",
	}
	TemperatureTypeEnum_value = map[string]int32{
		"TEMPERATURE_TYPE_UNKNOWN":         -1,
		"TEMPERATURE_TYPE_CPU":             0,
		"TEMPERATURE_TYPE_GPU":             1,
		"TEMPERATURE_TYPE_BATTERY":         2,
		"TEMPERATURE_TYPE_SKIN":            3,
		"TEMPERATURE_TYPE_USB_PORT":        4,
		"TEMPERATURE_TYPE_POWER_AMPLIFIER": 5,
		"TEMPERATURE_TYPE_BCL_VOLTAGE":     6,
		"TEMPERATURE_TYPE_BCL_CURRENT":     7,
		"TEMPERATURE_TYPE_BCL_PERCENTAGE":  8,
		"TEMPERATURE_TYPE_NPU":             9,
		"TEMPERATURE_TYPE_TPU":             10,
		"TEMPERATURE_TYPE_DISPLAY":         11,
		"TEMPERATURE_TYPE_MODEM":           12,
		"TEMPERATURE_TYPE_SOC":             13,
		"TEMPERATURE_TYPE_WIFI":            14,
		"TEMPERATURE_TYPE_CAMERA":          15,
		"TEMPERATURE_TYPE_FLASHLIGHT":      16,
		"TEMPERATURE_TYPE_SPEAKER":         17,
		"TEMPERATURE_TYPE_AMBIENT":         18,
		"TEMPERATURE_TYPE_POGO":            19,
	}
)

func (x TemperatureTypeEnum) Enum() *TemperatureTypeEnum {
	p := new(TemperatureTypeEnum)
	*p = x
	return p
}

func (x TemperatureTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemperatureTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[4].Descriptor()
}

func (TemperatureTypeEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[4]
}

func (x TemperatureTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TemperatureTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TemperatureTypeEnum(num)
	return nil
}

// Deprecated: Use TemperatureTypeEnum.Descriptor instead.
func (TemperatureTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{4}
}

// Device throttling severity
// These constants are defined in hardware/interfaces/thermal/2.0/types.hal.
// Any change to the types in the thermal hal should be made here as well.
type ThrottlingSeverityEnum int32

const (
	// Not under throttling.
	ThrottlingSeverityEnum_NONE ThrottlingSeverityEnum = 0
	// Light throttling where UX is not impacted.
	ThrottlingSeverityEnum_LIGHT ThrottlingSeverityEnum = 1
	// Moderate throttling where UX is not largely impacted.
	ThrottlingSeverityEnum_MODERATE ThrottlingSeverityEnum = 2
	// Severe throttling where UX is largely impacted.
	// Similar to 1.0 throttlingThreshold.
	ThrottlingSeverityEnum_SEVERE ThrottlingSeverityEnum = 3
	// Platform has done everything to reduce power.
	ThrottlingSeverityEnum_CRITICAL ThrottlingSeverityEnum = 4
	// Key components in platform are shutting down due to thermal condition.
	// Device functionalities will be limited.
	ThrottlingSeverityEnum_EMERGENCY ThrottlingSeverityEnum = 5
	// Need shutdown immediately.
	ThrottlingSeverityEnum_SHUTDOWN ThrottlingSeverityEnum = 6
)

// Enum value maps for ThrottlingSeverityEnum.
var (
	ThrottlingSeverityEnum_name = map[int32]string{
		0: "NONE",
		1: "LIGHT",
		2: "MODERATE",
		3: "SEVERE",
		4: "CRITICAL",
		5: "EMERGENCY",
		6: "SHUTDOWN",
	}
	ThrottlingSeverityEnum_value = map[string]int32{
		"NONE":      0,
		"LIGHT":     1,
		"MODERATE":  2,
		"SEVERE":    3,
		"CRITICAL":  4,
		"EMERGENCY": 5,
		"SHUTDOWN":  6,
	}
)

func (x ThrottlingSeverityEnum) Enum() *ThrottlingSeverityEnum {
	p := new(ThrottlingSeverityEnum)
	*p = x
	return p
}

func (x ThrottlingSeverityEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThrottlingSeverityEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[5].Descriptor()
}

func (ThrottlingSeverityEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[5]
}

func (x ThrottlingSeverityEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ThrottlingSeverityEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ThrottlingSeverityEnum(num)
	return nil
}

// Deprecated: Use ThrottlingSeverityEnum.Descriptor instead.
func (ThrottlingSeverityEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{5}
}

// Device cooling device types.
// These constants are defined in hardware/interfaces/thermal/2.0/types.hal.
// Any change to the types in the thermal hal should be made here as well.
type CoolingTypeEnum int32

const (
	CoolingTypeEnum_FAN             CoolingTypeEnum = 0
	CoolingTypeEnum_BATTERY         CoolingTypeEnum = 1
	CoolingTypeEnum_CPU             CoolingTypeEnum = 2
	CoolingTypeEnum_GPU             CoolingTypeEnum = 3
	CoolingTypeEnum_MODEM           CoolingTypeEnum = 4
	CoolingTypeEnum_NPU             CoolingTypeEnum = 5
	CoolingTypeEnum_COMPONENT       CoolingTypeEnum = 6
	CoolingTypeEnum_TPU             CoolingTypeEnum = 7
	CoolingTypeEnum_POWER_AMPLIFIER CoolingTypeEnum = 8
	CoolingTypeEnum_DISPLAY         CoolingTypeEnum = 9
	CoolingTypeEnum_SPEAKER         CoolingTypeEnum = 10
	CoolingTypeEnum_WIFI            CoolingTypeEnum = 11
	CoolingTypeEnum_CAMERA          CoolingTypeEnum = 12
	CoolingTypeEnum_FLASHLIGHT      CoolingTypeEnum = 13
	CoolingTypeEnum_USB_PORT        CoolingTypeEnum = 14
)

// Enum value maps for CoolingTypeEnum.
var (
	CoolingTypeEnum_name = map[int32]string{
		0:  "FAN",
		1:  "BATTERY",
		2:  "CPU",
		3:  "GPU",
		4:  "MODEM",
		5:  "NPU",
		6:  "COMPONENT",
		7:  "TPU",
		8:  "POWER_AMPLIFIER",
		9:  "DISPLAY",
		10: "SPEAKER",
		11: "WIFI",
		12: "CAMERA",
		13: "FLASHLIGHT",
		14: "USB_PORT",
	}
	CoolingTypeEnum_value = map[string]int32{
		"FAN":             0,
		"BATTERY":         1,
		"CPU":             2,
		"GPU":             3,
		"MODEM":           4,
		"NPU":             5,
		"COMPONENT":       6,
		"TPU":             7,
		"POWER_AMPLIFIER": 8,
		"DISPLAY":         9,
		"SPEAKER":         10,
		"WIFI":            11,
		"CAMERA":          12,
		"FLASHLIGHT":      13,
		"USB_PORT":        14,
	}
)

func (x CoolingTypeEnum) Enum() *CoolingTypeEnum {
	p := new(CoolingTypeEnum)
	*p = x
	return p
}

func (x CoolingTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoolingTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[6].Descriptor()
}

func (CoolingTypeEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[6]
}

func (x CoolingTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CoolingTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CoolingTypeEnum(num)
	return nil
}

// Deprecated: Use CoolingTypeEnum.Descriptor instead.
func (CoolingTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{6}
}

// Wakelock types, primarily used by android/os/PowerManager.java.
type WakeLockLevelEnum int32

const (
	// Ensures that the CPU is running; the screen and keyboard backlight
	// will be allowed to go off.
	WakeLockLevelEnum_PARTIAL_WAKE_LOCK WakeLockLevelEnum = 1
	// Ensures that the screen is on (but may be dimmed); the keyboard
	// backlight will be allowed to go off. If the user presses the power
	// button, then the SCREEN_DIM_WAKE_LOCK will be implicitly released by
	// the system, causing both the screen and the CPU to be turned off.
	//
	// Deprecated: Marked as deprecated in frameworks/proto_logging/stats/enums/os/enums.proto.
	WakeLockLevelEnum_SCREEN_DIM_WAKE_LOCK WakeLockLevelEnum = 6
	// Ensures that the screen is on at full brightness; the keyboard
	// backlight will be allowed to go off. If the user presses the power
	// button, then the SCREEN_BRIGHT_WAKE_LOCK will be implicitly released
	// by the system, causing both the screen and the CPU to be turned off.
	//
	// Deprecated: Marked as deprecated in frameworks/proto_logging/stats/enums/os/enums.proto.
	WakeLockLevelEnum_SCREEN_BRIGHT_WAKE_LOCK WakeLockLevelEnum = 10
	// Ensures that the screen and keyboard backlight are on at full
	// brightness. If the user presses the power button, then the
	// FULL_WAKE_LOCK will be implicitly released by the system, causing
	// both the screen and the CPU to be turned off.
	//
	// Deprecated: Marked as deprecated in frameworks/proto_logging/stats/enums/os/enums.proto.
	WakeLockLevelEnum_FULL_WAKE_LOCK WakeLockLevelEnum = 26
	// Turns the screen off when the proximity sensor activates. If the
	// proximity sensor detects that an object is nearby, the screen turns
	// off immediately. Shortly after the object moves away, the screen
	// turns on again.
	// A proximity wake lock does not prevent the device from falling asleep
	// unlike FULL_WAKE_LOCK, SCREEN_BRIGHT_WAKE_LOCK and
	// SCREEN_DIM_WAKE_LOCK. If there is no user activity and no other wake
	// locks are held, then the device will fall asleep (and lock) as usual.
	// However, the device will not fall asleep while the screen has been
	// turned off by the proximity sensor because it effectively counts as
	// ongoing user activity.
	WakeLockLevelEnum_PROXIMITY_SCREEN_OFF_WAKE_LOCK WakeLockLevelEnum = 32
	// Put the screen in a low power state and allow the CPU to suspend if
	// no other wake locks are held. This is used by the dream manager to
	// implement doze mode. It currently has no effect unless the power
	// manager is in the dozing state.
	WakeLockLevelEnum_DOZE_WAKE_LOCK WakeLockLevelEnum = 64
	// Keep the device awake enough to allow drawing to occur. This is used
	// by the window manager to allow applications to draw while the system
	// is dozing. It currently has no effect unless the power manager is in
	// the dozing state.
	WakeLockLevelEnum_DRAW_WAKE_LOCK WakeLockLevelEnum = 128
)

// Enum value maps for WakeLockLevelEnum.
var (
	WakeLockLevelEnum_name = map[int32]string{
		1:   "PARTIAL_WAKE_LOCK",
		6:   "SCREEN_DIM_WAKE_LOCK",
		10:  "SCREEN_BRIGHT_WAKE_LOCK",
		26:  "FULL_WAKE_LOCK",
		32:  "PROXIMITY_SCREEN_OFF_WAKE_LOCK",
		64:  "DOZE_WAKE_LOCK",
		128: "DRAW_WAKE_LOCK",
	}
	WakeLockLevelEnum_value = map[string]int32{
		"PARTIAL_WAKE_LOCK":              1,
		"SCREEN_DIM_WAKE_LOCK":           6,
		"SCREEN_BRIGHT_WAKE_LOCK":        10,
		"FULL_WAKE_LOCK":                 26,
		"PROXIMITY_SCREEN_OFF_WAKE_LOCK": 32,
		"DOZE_WAKE_LOCK":                 64,
		"DRAW_WAKE_LOCK":                 128,
	}
)

func (x WakeLockLevelEnum) Enum() *WakeLockLevelEnum {
	p := new(WakeLockLevelEnum)
	*p = x
	return p
}

func (x WakeLockLevelEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WakeLockLevelEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[7].Descriptor()
}

func (WakeLockLevelEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[7]
}

func (x WakeLockLevelEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WakeLockLevelEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WakeLockLevelEnum(num)
	return nil
}

// Deprecated: Use WakeLockLevelEnum.Descriptor instead.
func (WakeLockLevelEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{7}
}

// They are primarily used by android/os/BatteryManager.java.
type BatteryChargingStatusEnum int32

const (
	BatteryChargingStatusEnum_BATTERY_STATUS_NORMAL    BatteryChargingStatusEnum = 1
	BatteryChargingStatusEnum_BATTERY_STATUS_TOO_COLD  BatteryChargingStatusEnum = 2
	BatteryChargingStatusEnum_BATTERY_STATUS_TOO_HOT   BatteryChargingStatusEnum = 3
	BatteryChargingStatusEnum_BATTERY_STATUS_LONG_LIFE BatteryChargingStatusEnum = 4
	BatteryChargingStatusEnum_BATTERY_STATUS_ADAPTIVE  BatteryChargingStatusEnum = 5
)

// Enum value maps for BatteryChargingStatusEnum.
var (
	BatteryChargingStatusEnum_name = map[int32]string{
		1: "BATTERY_STATUS_NORMAL",
		2: "BATTERY_STATUS_TOO_COLD",
		3: "BATTERY_STATUS_TOO_HOT",
		4: "BATTERY_STATUS_LONG_LIFE",
		5: "BATTERY_STATUS_ADAPTIVE",
	}
	BatteryChargingStatusEnum_value = map[string]int32{
		"BATTERY_STATUS_NORMAL":    1,
		"BATTERY_STATUS_TOO_COLD":  2,
		"BATTERY_STATUS_TOO_HOT":   3,
		"BATTERY_STATUS_LONG_LIFE": 4,
		"BATTERY_STATUS_ADAPTIVE":  5,
	}
)

func (x BatteryChargingStatusEnum) Enum() *BatteryChargingStatusEnum {
	p := new(BatteryChargingStatusEnum)
	*p = x
	return p
}

func (x BatteryChargingStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryChargingStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[8].Descriptor()
}

func (BatteryChargingStatusEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[8]
}

func (x BatteryChargingStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BatteryChargingStatusEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BatteryChargingStatusEnum(num)
	return nil
}

// Deprecated: Use BatteryChargingStatusEnum.Descriptor instead.
func (BatteryChargingStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{8}
}

// They are primarily used by android/os/BatteryManager.java.
type BatteryChargingPolicyEnum int32

const (
	BatteryChargingPolicyEnum_CHARGING_POLICY_DEFAULT           BatteryChargingPolicyEnum = 1
	BatteryChargingPolicyEnum_CHARGING_POLICY_ADAPTIVE_AON      BatteryChargingPolicyEnum = 2
	BatteryChargingPolicyEnum_CHARGING_POLICY_ADAPTIVE_AC       BatteryChargingPolicyEnum = 3
	BatteryChargingPolicyEnum_CHARGING_POLICY_ADAPTIVE_LONGLIFE BatteryChargingPolicyEnum = 4
)

// Enum value maps for BatteryChargingPolicyEnum.
var (
	BatteryChargingPolicyEnum_name = map[int32]string{
		1: "CHARGING_POLICY_DEFAULT",
		2: "CHARGING_POLICY_ADAPTIVE_AON",
		3: "CHARGING_POLICY_ADAPTIVE_AC",
		4: "CHARGING_POLICY_ADAPTIVE_LONGLIFE",
	}
	BatteryChargingPolicyEnum_value = map[string]int32{
		"CHARGING_POLICY_DEFAULT":           1,
		"CHARGING_POLICY_ADAPTIVE_AON":      2,
		"CHARGING_POLICY_ADAPTIVE_AC":       3,
		"CHARGING_POLICY_ADAPTIVE_LONGLIFE": 4,
	}
)

func (x BatteryChargingPolicyEnum) Enum() *BatteryChargingPolicyEnum {
	p := new(BatteryChargingPolicyEnum)
	*p = x
	return p
}

func (x BatteryChargingPolicyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryChargingPolicyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[9].Descriptor()
}

func (BatteryChargingPolicyEnum) Type() protoreflect.EnumType {
	return &file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes[9]
}

func (x BatteryChargingPolicyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BatteryChargingPolicyEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BatteryChargingPolicyEnum(num)
	return nil
}

// Deprecated: Use BatteryChargingPolicyEnum.Descriptor instead.
func (BatteryChargingPolicyEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP(), []int{9}
}

var File_frameworks_proto_logging_stats_enums_os_enums_proto protoreflect.FileDescriptor

var file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDesc = []byte{
	0x0a, 0x33, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6f,
	0x73, 0x2a, 0xd8, 0x02, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x48,
	0x45, 0x41, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59,
	0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x1f,
	0x0a, 0x1b, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12,
	0x26, 0x0a, 0x22, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x10, 0x07,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x52, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x2a, 0x9c, 0x01, 0x0a,
	0x17, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x4c,
	0x55, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x55, 0x53,
	0x42, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x50,
	0x4c, 0x55, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x4c, 0x55,
	0x47, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x10, 0x08, 0x2a, 0xc2, 0x01, 0x0a, 0x11,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05,
	0x2a, 0xbb, 0x04, 0x0a, 0x12, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45,
	0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x42, 0x4c, 0x55, 0x45, 0x54, 0x4f, 0x4f, 0x54, 0x48, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x06, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53,
	0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x44,
	0x49, 0x4f, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x53, 0x10,
	0x09, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x4e, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x57,
	0x49, 0x46, 0x49, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x0d, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4d,
	0x42, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x0f, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x53, 0x10, 0x11, 0x2a, 0x8f,
	0x05, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x18, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x4d, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x50, 0x55, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45,
	0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x53, 0x42, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x4d,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x43, 0x4c, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x10,
	0x06, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x43, 0x4c, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x43, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x4d, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x55,
	0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x50, 0x55, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45,
	0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4d, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x10, 0x0d,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x45, 0x4d, 0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x4d, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41,
	0x53, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x4d,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50,
	0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x4d, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d, 0x42, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x47, 0x4f, 0x10, 0x13,
	0x2a, 0x72, 0x0a, 0x16, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x06, 0x2a, 0xc8, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x50, 0x55, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x44, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x50, 0x55, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x50, 0x55, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x49, 0x46, 0x49, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10,
	0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x42, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0e, 0x2a,
	0xce, 0x01, 0x0a, 0x11, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x14,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x44, 0x49, 0x4d, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1f, 0x0a, 0x17, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x5f, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x57, 0x41, 0x4b, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0a, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x16, 0x0a, 0x0e, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x1a, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d, 0x49, 0x54, 0x59,
	0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x57, 0x41, 0x4b, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x20, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x5a, 0x45, 0x5f,
	0x57, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x40, 0x12, 0x13, 0x0a, 0x0e, 0x44,
	0x52, 0x41, 0x57, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x80, 0x01,
	0x2a, 0xaa, 0x01, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x19,
	0x0a, 0x15, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x43, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x48, 0x4f, 0x54,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x2a, 0xa2, 0x01,
	0x0a, 0x19, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x4c, 0x49, 0x46, 0x45,
	0x10, 0x04, 0x42, 0x10, 0x42, 0x0c, 0x4f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x50, 0x01,
}

var (
	file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescOnce sync.Once
	file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescData = file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDesc
)

func file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescGZIP() []byte {
	file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescOnce.Do(func() {
		file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescData)
	})
	return file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDescData
}

var file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_frameworks_proto_logging_stats_enums_os_enums_proto_goTypes = []any{
	(BatteryHealthEnum)(0),         // 0: android.os.BatteryHealthEnum
	(BatteryPluggedStateEnum)(0),   // 1: android.os.BatteryPluggedStateEnum
	(BatteryStatusEnum)(0),         // 2: android.os.BatteryStatusEnum
	(PowerComponentEnum)(0),        // 3: android.os.PowerComponentEnum
	(TemperatureTypeEnum)(0),       // 4: android.os.TemperatureTypeEnum
	(ThrottlingSeverityEnum)(0),    // 5: android.os.ThrottlingSeverityEnum
	(CoolingTypeEnum)(0),           // 6: android.os.CoolingTypeEnum
	(WakeLockLevelEnum)(0),         // 7: android.os.WakeLockLevelEnum
	(BatteryChargingStatusEnum)(0), // 8: android.os.BatteryChargingStatusEnum
	(BatteryChargingPolicyEnum)(0), // 9: android.os.BatteryChargingPolicyEnum
}
var file_frameworks_proto_logging_stats_enums_os_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_frameworks_proto_logging_stats_enums_os_enums_proto_init() }
func file_frameworks_proto_logging_stats_enums_os_enums_proto_init() {
	if File_frameworks_proto_logging_stats_enums_os_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_frameworks_proto_logging_stats_enums_os_enums_proto_goTypes,
		DependencyIndexes: file_frameworks_proto_logging_stats_enums_os_enums_proto_depIdxs,
		EnumInfos:         file_frameworks_proto_logging_stats_enums_os_enums_proto_enumTypes,
	}.Build()
	File_frameworks_proto_logging_stats_enums_os_enums_proto = out.File
	file_frameworks_proto_logging_stats_enums_os_enums_proto_rawDesc = nil
	file_frameworks_proto_logging_stats_enums_os_enums_proto_goTypes = nil
	file_frameworks_proto_logging_stats_enums_os_enums_proto_depIdxs = nil
}
