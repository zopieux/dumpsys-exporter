//
// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.4
// source: frameworks/base/core/proto/android/server/powermanagerservice.proto

package server

import (
	_ "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/base/core/proto/android"
	content "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/base/core/proto/android/content"
	os "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/base/core/proto/android/os"
	providers "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/base/core/proto/android/providers"
	app "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/proto_logging/stats/enums/app"
	os1 "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/proto_logging/stats/enums/os"
	view "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/proto_logging/stats/enums/view"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatterySaverStateMachineProto_StateEnum int32

const (
	BatterySaverStateMachineProto_STATE_UNKNOWN               BatterySaverStateMachineProto_StateEnum = 0
	BatterySaverStateMachineProto_STATE_OFF                   BatterySaverStateMachineProto_StateEnum = 1
	BatterySaverStateMachineProto_STATE_MANUAL_ON             BatterySaverStateMachineProto_StateEnum = 2
	BatterySaverStateMachineProto_STATE_AUTOMATIC_ON          BatterySaverStateMachineProto_StateEnum = 3
	BatterySaverStateMachineProto_STATE_OFF_AUTOMATIC_SNOOZED BatterySaverStateMachineProto_StateEnum = 4
	BatterySaverStateMachineProto_STATE_PENDING_STICKY_ON     BatterySaverStateMachineProto_StateEnum = 5
)

// Enum value maps for BatterySaverStateMachineProto_StateEnum.
var (
	BatterySaverStateMachineProto_StateEnum_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_OFF",
		2: "STATE_MANUAL_ON",
		3: "STATE_AUTOMATIC_ON",
		4: "STATE_OFF_AUTOMATIC_SNOOZED",
		5: "STATE_PENDING_STICKY_ON",
	}
	BatterySaverStateMachineProto_StateEnum_value = map[string]int32{
		"STATE_UNKNOWN":               0,
		"STATE_OFF":                   1,
		"STATE_MANUAL_ON":             2,
		"STATE_AUTOMATIC_ON":          3,
		"STATE_OFF_AUTOMATIC_SNOOZED": 4,
		"STATE_PENDING_STICKY_ON":     5,
	}
)

func (x BatterySaverStateMachineProto_StateEnum) Enum() *BatterySaverStateMachineProto_StateEnum {
	p := new(BatterySaverStateMachineProto_StateEnum)
	*p = x
	return p
}

func (x BatterySaverStateMachineProto_StateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatterySaverStateMachineProto_StateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_enumTypes[0].Descriptor()
}

func (BatterySaverStateMachineProto_StateEnum) Type() protoreflect.EnumType {
	return &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_enumTypes[0]
}

func (x BatterySaverStateMachineProto_StateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BatterySaverStateMachineProto_StateEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BatterySaverStateMachineProto_StateEnum(num)
	return nil
}

// Deprecated: Use BatterySaverStateMachineProto_StateEnum.Descriptor instead.
func (BatterySaverStateMachineProto_StateEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{4, 0}
}

// Denotes which threshold should be used for automatic Battery Saver triggering.
type BatterySaverStateMachineProto_AutomaticTriggerEnum int32

const (
	BatterySaverStateMachineProto_TRIGGER_PERCENTAGE BatterySaverStateMachineProto_AutomaticTriggerEnum = 0
	BatterySaverStateMachineProto_TRIGGER_DYNAMIC    BatterySaverStateMachineProto_AutomaticTriggerEnum = 1
)

// Enum value maps for BatterySaverStateMachineProto_AutomaticTriggerEnum.
var (
	BatterySaverStateMachineProto_AutomaticTriggerEnum_name = map[int32]string{
		0: "TRIGGER_PERCENTAGE",
		1: "TRIGGER_DYNAMIC",
	}
	BatterySaverStateMachineProto_AutomaticTriggerEnum_value = map[string]int32{
		"TRIGGER_PERCENTAGE": 0,
		"TRIGGER_DYNAMIC":    1,
	}
)

func (x BatterySaverStateMachineProto_AutomaticTriggerEnum) Enum() *BatterySaverStateMachineProto_AutomaticTriggerEnum {
	p := new(BatterySaverStateMachineProto_AutomaticTriggerEnum)
	*p = x
	return p
}

func (x BatterySaverStateMachineProto_AutomaticTriggerEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatterySaverStateMachineProto_AutomaticTriggerEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_enumTypes[1].Descriptor()
}

func (BatterySaverStateMachineProto_AutomaticTriggerEnum) Type() protoreflect.EnumType {
	return &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_enumTypes[1]
}

func (x BatterySaverStateMachineProto_AutomaticTriggerEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BatterySaverStateMachineProto_AutomaticTriggerEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BatterySaverStateMachineProto_AutomaticTriggerEnum(num)
	return nil
}

// Deprecated: Use BatterySaverStateMachineProto_AutomaticTriggerEnum.Descriptor instead.
func (BatterySaverStateMachineProto_AutomaticTriggerEnum) EnumDescriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{4, 1}
}

type PowerManagerServiceDumpProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constants *PowerManagerServiceDumpProto_ConstantsProto `protobuf:"bytes,1,opt,name=constants" json:"constants,omitempty"`
	// A bitfield that indicates what parts of the power state have
	// changed and need to be recalculated.
	Dirty *int32 `protobuf:"varint,2,opt,name=dirty" json:"dirty,omitempty"`
	// Indicates whether the device is awake or asleep or somewhere in between.
	Wakefulness           *os.PowerManagerInternalProto_Wakefulness `protobuf:"varint,3,opt,name=wakefulness,enum=android.os.PowerManagerInternalProto_Wakefulness" json:"wakefulness,omitempty"`
	IsWakefulnessChanging *bool                                     `protobuf:"varint,4,opt,name=is_wakefulness_changing,json=isWakefulnessChanging" json:"is_wakefulness_changing,omitempty"`
	// True if the device is plugged into a power source.
	IsPowered *bool `protobuf:"varint,5,opt,name=is_powered,json=isPowered" json:"is_powered,omitempty"`
	// The current plug type
	PlugType *os1.BatteryPluggedStateEnum `protobuf:"varint,6,opt,name=plug_type,json=plugType,enum=android.os.BatteryPluggedStateEnum" json:"plug_type,omitempty"`
	// The current battery level percentage.
	BatteryLevel *int32 `protobuf:"varint,7,opt,name=battery_level,json=batteryLevel" json:"battery_level,omitempty"`
	// The battery level percentage at the time the dream started.
	BatteryLevelWhenDreamStarted *int32 `protobuf:"varint,8,opt,name=battery_level_when_dream_started,json=batteryLevelWhenDreamStarted" json:"battery_level_when_dream_started,omitempty"`
	// The current dock state.
	DockState *content.IntentProto_DockState `protobuf:"varint,9,opt,name=dock_state,json=dockState,enum=android.content.IntentProto_DockState" json:"dock_state,omitempty"`
	// True if the device should stay on.
	IsStayOn *bool `protobuf:"varint,10,opt,name=is_stay_on,json=isStayOn" json:"is_stay_on,omitempty"`
	// True if the proximity sensor reads a positive result.
	IsProximityPositive *bool `protobuf:"varint,11,opt,name=is_proximity_positive,json=isProximityPositive" json:"is_proximity_positive,omitempty"`
	// True if boot completed occurred.  We keep the screen on until this happens.
	IsBootCompleted *bool `protobuf:"varint,12,opt,name=is_boot_completed,json=isBootCompleted" json:"is_boot_completed,omitempty"`
	// True if systemReady() has been called.
	IsSystemReady *bool `protobuf:"varint,13,opt,name=is_system_ready,json=isSystemReady" json:"is_system_ready,omitempty"`
	// True if auto-suspend mode is enabled.
	IsHalAutoSuspendModeEnabled *bool `protobuf:"varint,14,opt,name=is_hal_auto_suspend_mode_enabled,json=isHalAutoSuspendModeEnabled" json:"is_hal_auto_suspend_mode_enabled,omitempty"`
	// True if interactive mode is enabled.
	IsHalAutoInteractiveModeEnabled *bool `protobuf:"varint,15,opt,name=is_hal_auto_interactive_mode_enabled,json=isHalAutoInteractiveModeEnabled" json:"is_hal_auto_interactive_mode_enabled,omitempty"`
	// Summarizes the state of all active wakelocks.
	ActiveWakeLocks *PowerManagerServiceDumpProto_ActiveWakeLocksProto `protobuf:"bytes,16,opt,name=active_wake_locks,json=activeWakeLocks" json:"active_wake_locks,omitempty"`
	// Have we scheduled a message to check for long wake locks?  This is when
	// we will check. (In milliseconds timestamp)
	NotifyLongScheduledMs *int64 `protobuf:"varint,17,opt,name=notify_long_scheduled_ms,json=notifyLongScheduledMs" json:"notify_long_scheduled_ms,omitempty"`
	// Last time we checked for long wake locks. (In milliseconds timestamp)
	NotifyLongDispatchedMs *int64 `protobuf:"varint,18,opt,name=notify_long_dispatched_ms,json=notifyLongDispatchedMs" json:"notify_long_dispatched_ms,omitempty"`
	// The time we decided to do next long check. (In milliseconds timestamp)
	NotifyLongNextCheckMs *int64 `protobuf:"varint,19,opt,name=notify_long_next_check_ms,json=notifyLongNextCheckMs" json:"notify_long_next_check_ms,omitempty"`
	// Summarizes the effect of the user activity timer.
	UserActivity []*PowerManagerServiceDumpProto_UserActivityProto `protobuf:"bytes,20,rep,name=user_activity,json=userActivity" json:"user_activity,omitempty"`
	// If true, instructs the display controller to wait for the proximity
	// sensor to go negative before turning the screen on.
	IsRequestWaitForNegativeProximity *bool `protobuf:"varint,21,opt,name=is_request_wait_for_negative_proximity,json=isRequestWaitForNegativeProximity" json:"is_request_wait_for_negative_proximity,omitempty"`
	// True if MSG_SANDMAN has been scheduled.
	IsSandmanScheduled *bool `protobuf:"varint,22,opt,name=is_sandman_scheduled,json=isSandmanScheduled" json:"is_sandman_scheduled,omitempty"`
	// True if the sandman has just been summoned for the first time since entering
	// the dreaming or dozing state.  Indicates whether a new dream should begin.
	IsSandmanSummoned *bool `protobuf:"varint,23,opt,name=is_sandman_summoned,json=isSandmanSummoned" json:"is_sandman_summoned,omitempty"`
	// True if the battery level is currently considered low.
	IsBatteryLevelLow *bool `protobuf:"varint,24,opt,name=is_battery_level_low,json=isBatteryLevelLow" json:"is_battery_level_low,omitempty"`
	// True if we are currently in light device idle mode.
	IsLightDeviceIdleMode *bool `protobuf:"varint,25,opt,name=is_light_device_idle_mode,json=isLightDeviceIdleMode" json:"is_light_device_idle_mode,omitempty"`
	// True if we are currently in device idle mode.
	IsDeviceIdleMode *bool `protobuf:"varint,26,opt,name=is_device_idle_mode,json=isDeviceIdleMode" json:"is_device_idle_mode,omitempty"`
	// Set of app ids that we will respect the wake locks for while in device idle mode.
	DeviceIdleWhitelist []int32 `protobuf:"varint,27,rep,name=device_idle_whitelist,json=deviceIdleWhitelist" json:"device_idle_whitelist,omitempty"`
	// Set of app ids that are temporarily allowed to acquire wakelocks due to
	// high-pri message
	DeviceIdleTempWhitelist []int32 `protobuf:"varint,28,rep,name=device_idle_temp_whitelist,json=deviceIdleTempWhitelist" json:"device_idle_temp_whitelist,omitempty"`
	// Timestamp of the last time the device was awoken.
	LastWakeTimeMs *int64 `protobuf:"varint,29,opt,name=last_wake_time_ms,json=lastWakeTimeMs" json:"last_wake_time_ms,omitempty"`
	// Timestamp of the last time the device was put to sleep.
	LastSleepTimeMs *int64 `protobuf:"varint,30,opt,name=last_sleep_time_ms,json=lastSleepTimeMs" json:"last_sleep_time_ms,omitempty"`
	// Timestamp of the last call to user activity.
	//
	// Deprecated: Marked as deprecated in frameworks/base/core/proto/android/server/powermanagerservice.proto.
	LastUserActivityTimeMs *int64 `protobuf:"varint,31,opt,name=last_user_activity_time_ms,json=lastUserActivityTimeMs" json:"last_user_activity_time_ms,omitempty"`
	// Deprecated: Marked as deprecated in frameworks/base/core/proto/android/server/powermanagerservice.proto.
	LastUserActivityTimeNoChangeLightsMs *int64 `protobuf:"varint,32,opt,name=last_user_activity_time_no_change_lights_ms,json=lastUserActivityTimeNoChangeLightsMs" json:"last_user_activity_time_no_change_lights_ms,omitempty"`
	// Timestamp of last interactive power hint.
	LastInteractivePowerHintTimeMs *int64 `protobuf:"varint,33,opt,name=last_interactive_power_hint_time_ms,json=lastInteractivePowerHintTimeMs" json:"last_interactive_power_hint_time_ms,omitempty"`
	// Timestamp of the last screen brightness boost.
	LastScreenBrightnessBoostTimeMs *int64 `protobuf:"varint,34,opt,name=last_screen_brightness_boost_time_ms,json=lastScreenBrightnessBoostTimeMs" json:"last_screen_brightness_boost_time_ms,omitempty"`
	// True if screen brightness boost is in progress.
	IsScreenBrightnessBoostInProgress *bool `protobuf:"varint,35,opt,name=is_screen_brightness_boost_in_progress,json=isScreenBrightnessBoostInProgress" json:"is_screen_brightness_boost_in_progress,omitempty"`
	// True if the display power state has been fully applied, which means the
	// display is actually on or actually off or whatever was requested.
	IsDisplayReady *bool `protobuf:"varint,36,opt,name=is_display_ready,json=isDisplayReady" json:"is_display_ready,omitempty"`
	// True if the wake lock suspend blocker has been acquired.
	IsHoldingWakeLockSuspendBlocker *bool `protobuf:"varint,37,opt,name=is_holding_wake_lock_suspend_blocker,json=isHoldingWakeLockSuspendBlocker" json:"is_holding_wake_lock_suspend_blocker,omitempty"`
	// The suspend blocker used to keep the CPU alive when the display is on, the
	// display is getting ready or there is user activity (in which case the
	// display must be on).
	IsHoldingDisplaySuspendBlocker *bool `protobuf:"varint,38,opt,name=is_holding_display_suspend_blocker,json=isHoldingDisplaySuspendBlocker" json:"is_holding_display_suspend_blocker,omitempty"`
	// Settings and configuration
	SettingsAndConfiguration *PowerServiceSettingsAndConfigurationDumpProto `protobuf:"bytes,39,opt,name=settings_and_configuration,json=settingsAndConfiguration" json:"settings_and_configuration,omitempty"`
	// Sleep timeout in ms. This can be -1.
	SleepTimeoutMs *int32 `protobuf:"zigzag32,40,opt,name=sleep_timeout_ms,json=sleepTimeoutMs" json:"sleep_timeout_ms,omitempty"`
	// Screen off timeout in ms
	ScreenOffTimeoutMs *int32 `protobuf:"varint,41,opt,name=screen_off_timeout_ms,json=screenOffTimeoutMs" json:"screen_off_timeout_ms,omitempty"`
	// Screen dim duration in ms
	ScreenDimDurationMs *int32 `protobuf:"varint,42,opt,name=screen_dim_duration_ms,json=screenDimDurationMs" json:"screen_dim_duration_ms,omitempty"`
	// We are currently in the middle of a batch change of uids.
	AreUidsChanging *bool `protobuf:"varint,43,opt,name=are_uids_changing,json=areUidsChanging" json:"are_uids_changing,omitempty"`
	// Some uids have actually changed while mUidsChanging was true.
	AreUidsChanged *bool `protobuf:"varint,44,opt,name=are_uids_changed,json=areUidsChanged" json:"are_uids_changed,omitempty"`
	// List of UIDs and their states
	UidStates []*PowerManagerServiceDumpProto_UidStateProto `protobuf:"bytes,45,rep,name=uid_states,json=uidStates" json:"uid_states,omitempty"`
	Looper    *os.LooperProto                               `protobuf:"bytes,46,opt,name=looper" json:"looper,omitempty"`
	// List of all wake locks acquired by applications.
	WakeLocks []*WakeLockProto `protobuf:"bytes,47,rep,name=wake_locks,json=wakeLocks" json:"wake_locks,omitempty"`
	// List of all suspend blockers.
	SuspendBlockers          []*SuspendBlockerProto         `protobuf:"bytes,48,rep,name=suspend_blockers,json=suspendBlockers" json:"suspend_blockers,omitempty"`
	WirelessChargerDetector  *WirelessChargerDetectorProto  `protobuf:"bytes,49,opt,name=wireless_charger_detector,json=wirelessChargerDetector" json:"wireless_charger_detector,omitempty"`
	BatterySaverStateMachine *BatterySaverStateMachineProto `protobuf:"bytes,50,opt,name=battery_saver_state_machine,json=batterySaverStateMachine" json:"battery_saver_state_machine,omitempty"`
	// Attentive timeout in ms. The timeout is disabled if it is set to -1.
	AttentiveTimeoutMs *int32 `protobuf:"zigzag32,51,opt,name=attentive_timeout_ms,json=attentiveTimeoutMs" json:"attentive_timeout_ms,omitempty"`
	// The time (in the elapsed realtime timebase) at which the battery level will reach 0%. This
	// is provided as an enhanced estimate and only valid if
	// last_enhanced_discharge_time_updated_elapsed is greater than 0.
	EnhancedDischargeTimeElapsed *int64 `protobuf:"varint,52,opt,name=enhanced_discharge_time_elapsed,json=enhancedDischargeTimeElapsed" json:"enhanced_discharge_time_elapsed,omitempty"`
	// Timestamp (in the elapsed realtime timebase) of last update to enhanced battery estimate
	// data.
	LastEnhancedDischargeTimeUpdatedElapsed *int64 `protobuf:"varint,53,opt,name=last_enhanced_discharge_time_updated_elapsed,json=lastEnhancedDischargeTimeUpdatedElapsed" json:"last_enhanced_discharge_time_updated_elapsed,omitempty"`
	// Whether or not the current enhanced discharge prediction is personalized based on device
	// usage or not.
	IsEnhancedDischargePredictionPersonalized *bool                               `protobuf:"varint,54,opt,name=is_enhanced_discharge_prediction_personalized,json=isEnhancedDischargePredictionPersonalized" json:"is_enhanced_discharge_prediction_personalized,omitempty"`
	IsLowPowerStandbyActive                   *bool                               `protobuf:"varint,55,opt,name=is_low_power_standby_active,json=isLowPowerStandbyActive" json:"is_low_power_standby_active,omitempty"`
	LowPowerStandbyController                 *LowPowerStandbyControllerDumpProto `protobuf:"bytes,56,opt,name=low_power_standby_controller,json=lowPowerStandbyController" json:"low_power_standby_controller,omitempty"`
	// The battery level drained by the dream.
	BatteryLevelDrainedWhileDreaming *int32 `protobuf:"varint,57,opt,name=battery_level_drained_while_dreaming,json=batteryLevelDrainedWhileDreaming" json:"battery_level_drained_while_dreaming,omitempty"`
}

func (x *PowerManagerServiceDumpProto) Reset() {
	*x = PowerManagerServiceDumpProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerManagerServiceDumpProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerManagerServiceDumpProto) ProtoMessage() {}

func (x *PowerManagerServiceDumpProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerManagerServiceDumpProto.ProtoReflect.Descriptor instead.
func (*PowerManagerServiceDumpProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{0}
}

func (x *PowerManagerServiceDumpProto) GetConstants() *PowerManagerServiceDumpProto_ConstantsProto {
	if x != nil {
		return x.Constants
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetDirty() int32 {
	if x != nil && x.Dirty != nil {
		return *x.Dirty
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetWakefulness() os.PowerManagerInternalProto_Wakefulness {
	if x != nil && x.Wakefulness != nil {
		return *x.Wakefulness
	}
	return os.PowerManagerInternalProto_Wakefulness(0)
}

func (x *PowerManagerServiceDumpProto) GetIsWakefulnessChanging() bool {
	if x != nil && x.IsWakefulnessChanging != nil {
		return *x.IsWakefulnessChanging
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsPowered() bool {
	if x != nil && x.IsPowered != nil {
		return *x.IsPowered
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetPlugType() os1.BatteryPluggedStateEnum {
	if x != nil && x.PlugType != nil {
		return *x.PlugType
	}
	return os1.BatteryPluggedStateEnum(0)
}

func (x *PowerManagerServiceDumpProto) GetBatteryLevel() int32 {
	if x != nil && x.BatteryLevel != nil {
		return *x.BatteryLevel
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetBatteryLevelWhenDreamStarted() int32 {
	if x != nil && x.BatteryLevelWhenDreamStarted != nil {
		return *x.BatteryLevelWhenDreamStarted
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetDockState() content.IntentProto_DockState {
	if x != nil && x.DockState != nil {
		return *x.DockState
	}
	return content.IntentProto_DockState(0)
}

func (x *PowerManagerServiceDumpProto) GetIsStayOn() bool {
	if x != nil && x.IsStayOn != nil {
		return *x.IsStayOn
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsProximityPositive() bool {
	if x != nil && x.IsProximityPositive != nil {
		return *x.IsProximityPositive
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsBootCompleted() bool {
	if x != nil && x.IsBootCompleted != nil {
		return *x.IsBootCompleted
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsSystemReady() bool {
	if x != nil && x.IsSystemReady != nil {
		return *x.IsSystemReady
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsHalAutoSuspendModeEnabled() bool {
	if x != nil && x.IsHalAutoSuspendModeEnabled != nil {
		return *x.IsHalAutoSuspendModeEnabled
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsHalAutoInteractiveModeEnabled() bool {
	if x != nil && x.IsHalAutoInteractiveModeEnabled != nil {
		return *x.IsHalAutoInteractiveModeEnabled
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetActiveWakeLocks() *PowerManagerServiceDumpProto_ActiveWakeLocksProto {
	if x != nil {
		return x.ActiveWakeLocks
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetNotifyLongScheduledMs() int64 {
	if x != nil && x.NotifyLongScheduledMs != nil {
		return *x.NotifyLongScheduledMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetNotifyLongDispatchedMs() int64 {
	if x != nil && x.NotifyLongDispatchedMs != nil {
		return *x.NotifyLongDispatchedMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetNotifyLongNextCheckMs() int64 {
	if x != nil && x.NotifyLongNextCheckMs != nil {
		return *x.NotifyLongNextCheckMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetUserActivity() []*PowerManagerServiceDumpProto_UserActivityProto {
	if x != nil {
		return x.UserActivity
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetIsRequestWaitForNegativeProximity() bool {
	if x != nil && x.IsRequestWaitForNegativeProximity != nil {
		return *x.IsRequestWaitForNegativeProximity
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsSandmanScheduled() bool {
	if x != nil && x.IsSandmanScheduled != nil {
		return *x.IsSandmanScheduled
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsSandmanSummoned() bool {
	if x != nil && x.IsSandmanSummoned != nil {
		return *x.IsSandmanSummoned
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsBatteryLevelLow() bool {
	if x != nil && x.IsBatteryLevelLow != nil {
		return *x.IsBatteryLevelLow
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsLightDeviceIdleMode() bool {
	if x != nil && x.IsLightDeviceIdleMode != nil {
		return *x.IsLightDeviceIdleMode
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsDeviceIdleMode() bool {
	if x != nil && x.IsDeviceIdleMode != nil {
		return *x.IsDeviceIdleMode
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetDeviceIdleWhitelist() []int32 {
	if x != nil {
		return x.DeviceIdleWhitelist
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetDeviceIdleTempWhitelist() []int32 {
	if x != nil {
		return x.DeviceIdleTempWhitelist
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetLastWakeTimeMs() int64 {
	if x != nil && x.LastWakeTimeMs != nil {
		return *x.LastWakeTimeMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetLastSleepTimeMs() int64 {
	if x != nil && x.LastSleepTimeMs != nil {
		return *x.LastSleepTimeMs
	}
	return 0
}

// Deprecated: Marked as deprecated in frameworks/base/core/proto/android/server/powermanagerservice.proto.
func (x *PowerManagerServiceDumpProto) GetLastUserActivityTimeMs() int64 {
	if x != nil && x.LastUserActivityTimeMs != nil {
		return *x.LastUserActivityTimeMs
	}
	return 0
}

// Deprecated: Marked as deprecated in frameworks/base/core/proto/android/server/powermanagerservice.proto.
func (x *PowerManagerServiceDumpProto) GetLastUserActivityTimeNoChangeLightsMs() int64 {
	if x != nil && x.LastUserActivityTimeNoChangeLightsMs != nil {
		return *x.LastUserActivityTimeNoChangeLightsMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetLastInteractivePowerHintTimeMs() int64 {
	if x != nil && x.LastInteractivePowerHintTimeMs != nil {
		return *x.LastInteractivePowerHintTimeMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetLastScreenBrightnessBoostTimeMs() int64 {
	if x != nil && x.LastScreenBrightnessBoostTimeMs != nil {
		return *x.LastScreenBrightnessBoostTimeMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetIsScreenBrightnessBoostInProgress() bool {
	if x != nil && x.IsScreenBrightnessBoostInProgress != nil {
		return *x.IsScreenBrightnessBoostInProgress
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsDisplayReady() bool {
	if x != nil && x.IsDisplayReady != nil {
		return *x.IsDisplayReady
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsHoldingWakeLockSuspendBlocker() bool {
	if x != nil && x.IsHoldingWakeLockSuspendBlocker != nil {
		return *x.IsHoldingWakeLockSuspendBlocker
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsHoldingDisplaySuspendBlocker() bool {
	if x != nil && x.IsHoldingDisplaySuspendBlocker != nil {
		return *x.IsHoldingDisplaySuspendBlocker
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetSettingsAndConfiguration() *PowerServiceSettingsAndConfigurationDumpProto {
	if x != nil {
		return x.SettingsAndConfiguration
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetSleepTimeoutMs() int32 {
	if x != nil && x.SleepTimeoutMs != nil {
		return *x.SleepTimeoutMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetScreenOffTimeoutMs() int32 {
	if x != nil && x.ScreenOffTimeoutMs != nil {
		return *x.ScreenOffTimeoutMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetScreenDimDurationMs() int32 {
	if x != nil && x.ScreenDimDurationMs != nil {
		return *x.ScreenDimDurationMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetAreUidsChanging() bool {
	if x != nil && x.AreUidsChanging != nil {
		return *x.AreUidsChanging
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetAreUidsChanged() bool {
	if x != nil && x.AreUidsChanged != nil {
		return *x.AreUidsChanged
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetUidStates() []*PowerManagerServiceDumpProto_UidStateProto {
	if x != nil {
		return x.UidStates
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetLooper() *os.LooperProto {
	if x != nil {
		return x.Looper
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetWakeLocks() []*WakeLockProto {
	if x != nil {
		return x.WakeLocks
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetSuspendBlockers() []*SuspendBlockerProto {
	if x != nil {
		return x.SuspendBlockers
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetWirelessChargerDetector() *WirelessChargerDetectorProto {
	if x != nil {
		return x.WirelessChargerDetector
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetBatterySaverStateMachine() *BatterySaverStateMachineProto {
	if x != nil {
		return x.BatterySaverStateMachine
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetAttentiveTimeoutMs() int32 {
	if x != nil && x.AttentiveTimeoutMs != nil {
		return *x.AttentiveTimeoutMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetEnhancedDischargeTimeElapsed() int64 {
	if x != nil && x.EnhancedDischargeTimeElapsed != nil {
		return *x.EnhancedDischargeTimeElapsed
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetLastEnhancedDischargeTimeUpdatedElapsed() int64 {
	if x != nil && x.LastEnhancedDischargeTimeUpdatedElapsed != nil {
		return *x.LastEnhancedDischargeTimeUpdatedElapsed
	}
	return 0
}

func (x *PowerManagerServiceDumpProto) GetIsEnhancedDischargePredictionPersonalized() bool {
	if x != nil && x.IsEnhancedDischargePredictionPersonalized != nil {
		return *x.IsEnhancedDischargePredictionPersonalized
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetIsLowPowerStandbyActive() bool {
	if x != nil && x.IsLowPowerStandbyActive != nil {
		return *x.IsLowPowerStandbyActive
	}
	return false
}

func (x *PowerManagerServiceDumpProto) GetLowPowerStandbyController() *LowPowerStandbyControllerDumpProto {
	if x != nil {
		return x.LowPowerStandbyController
	}
	return nil
}

func (x *PowerManagerServiceDumpProto) GetBatteryLevelDrainedWhileDreaming() int32 {
	if x != nil && x.BatteryLevelDrainedWhileDreaming != nil {
		return *x.BatteryLevelDrainedWhileDreaming
	}
	return 0
}

// A com.android.server.power.PowerManagerService.SuspendBlockerImpl object.
type SuspendBlockerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReferenceCount *int32  `protobuf:"varint,2,opt,name=reference_count,json=referenceCount" json:"reference_count,omitempty"`
}

func (x *SuspendBlockerProto) Reset() {
	*x = SuspendBlockerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendBlockerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendBlockerProto) ProtoMessage() {}

func (x *SuspendBlockerProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendBlockerProto.ProtoReflect.Descriptor instead.
func (*SuspendBlockerProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{1}
}

func (x *SuspendBlockerProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SuspendBlockerProto) GetReferenceCount() int32 {
	if x != nil && x.ReferenceCount != nil {
		return *x.ReferenceCount
	}
	return 0
}

// A com.android.server.power.PowerManagerService.WakeLock object.
type WakeLockProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockLevel  *os1.WakeLockLevelEnum            `protobuf:"varint,1,opt,name=lock_level,json=lockLevel,enum=android.os.WakeLockLevelEnum" json:"lock_level,omitempty"`
	Tag        *string                           `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	Flags      *WakeLockProto_WakeLockFlagsProto `protobuf:"bytes,3,opt,name=flags" json:"flags,omitempty"`
	IsDisabled *bool                             `protobuf:"varint,4,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	// Acquire time in ms
	AcqMs          *int64 `protobuf:"varint,5,opt,name=acq_ms,json=acqMs" json:"acq_ms,omitempty"`
	IsNotifiedLong *bool  `protobuf:"varint,6,opt,name=is_notified_long,json=isNotifiedLong" json:"is_notified_long,omitempty"`
	// Owner UID
	Uid *int32 `protobuf:"varint,7,opt,name=uid" json:"uid,omitempty"`
	// Owner PID
	Pid        *int32              `protobuf:"varint,8,opt,name=pid" json:"pid,omitempty"`
	WorkSource *os.WorkSourceProto `protobuf:"bytes,9,opt,name=work_source,json=workSource" json:"work_source,omitempty"`
}

func (x *WakeLockProto) Reset() {
	*x = WakeLockProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeLockProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeLockProto) ProtoMessage() {}

func (x *WakeLockProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeLockProto.ProtoReflect.Descriptor instead.
func (*WakeLockProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{2}
}

func (x *WakeLockProto) GetLockLevel() os1.WakeLockLevelEnum {
	if x != nil && x.LockLevel != nil {
		return *x.LockLevel
	}
	return os1.WakeLockLevelEnum(1)
}

func (x *WakeLockProto) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *WakeLockProto) GetFlags() *WakeLockProto_WakeLockFlagsProto {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *WakeLockProto) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *WakeLockProto) GetAcqMs() int64 {
	if x != nil && x.AcqMs != nil {
		return *x.AcqMs
	}
	return 0
}

func (x *WakeLockProto) GetIsNotifiedLong() bool {
	if x != nil && x.IsNotifiedLong != nil {
		return *x.IsNotifiedLong
	}
	return false
}

func (x *WakeLockProto) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *WakeLockProto) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *WakeLockProto) GetWorkSource() *os.WorkSourceProto {
	if x != nil {
		return x.WorkSource
	}
	return nil
}

type PowerServiceSettingsAndConfigurationDumpProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True to decouple auto-suspend mode from the display state.
	IsDecoupleHalAutoSuspendModeFromDisplayConfig *bool `protobuf:"varint,1,opt,name=is_decouple_hal_auto_suspend_mode_from_display_config,json=isDecoupleHalAutoSuspendModeFromDisplayConfig" json:"is_decouple_hal_auto_suspend_mode_from_display_config,omitempty"`
	// True to decouple interactive mode from the display state.
	IsDecoupleHalInteractiveModeFromDisplayConfig *bool `protobuf:"varint,2,opt,name=is_decouple_hal_interactive_mode_from_display_config,json=isDecoupleHalInteractiveModeFromDisplayConfig" json:"is_decouple_hal_interactive_mode_from_display_config,omitempty"`
	// True if the device should wake up when plugged or unplugged.
	IsWakeUpWhenPluggedOrUnpluggedConfig *bool `protobuf:"varint,3,opt,name=is_wake_up_when_plugged_or_unplugged_config,json=isWakeUpWhenPluggedOrUnpluggedConfig" json:"is_wake_up_when_plugged_or_unplugged_config,omitempty"`
	// True if the device should wake up when plugged or unplugged in theater mode.
	IsWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig *bool `protobuf:"varint,4,opt,name=is_wake_up_when_plugged_or_unplugged_in_theater_mode_config,json=isWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig" json:"is_wake_up_when_plugged_or_unplugged_in_theater_mode_config,omitempty"`
	// True if theater mode is enabled
	IsTheaterModeEnabled *bool `protobuf:"varint,5,opt,name=is_theater_mode_enabled,json=isTheaterModeEnabled" json:"is_theater_mode_enabled,omitempty"`
	// True if the device should suspend when the screen is off due to proximity.
	IsSuspendWhenScreenOffDueToProximityConfig *bool `protobuf:"varint,6,opt,name=is_suspend_when_screen_off_due_to_proximity_config,json=isSuspendWhenScreenOffDueToProximityConfig" json:"is_suspend_when_screen_off_due_to_proximity_config,omitempty"`
	// True if dreams are supported on this device.
	AreDreamsSupportedConfig *bool `protobuf:"varint,7,opt,name=are_dreams_supported_config,json=areDreamsSupportedConfig" json:"are_dreams_supported_config,omitempty"`
	// Default value for dreams enabled
	AreDreamsEnabledByDefaultConfig *bool `protobuf:"varint,8,opt,name=are_dreams_enabled_by_default_config,json=areDreamsEnabledByDefaultConfig" json:"are_dreams_enabled_by_default_config,omitempty"`
	// Default value for dreams activate-on-sleep
	AreDreamsActivatedOnSleepByDefaultConfig *bool `protobuf:"varint,9,opt,name=are_dreams_activated_on_sleep_by_default_config,json=areDreamsActivatedOnSleepByDefaultConfig" json:"are_dreams_activated_on_sleep_by_default_config,omitempty"`
	// Default value for dreams activate-on-dock
	AreDreamsActivatedOnDockByDefaultConfig *bool `protobuf:"varint,10,opt,name=are_dreams_activated_on_dock_by_default_config,json=areDreamsActivatedOnDockByDefaultConfig" json:"are_dreams_activated_on_dock_by_default_config,omitempty"`
	// True if dreams can run while not plugged in.
	AreDreamsEnabledOnBatteryConfig *bool `protobuf:"varint,11,opt,name=are_dreams_enabled_on_battery_config,json=areDreamsEnabledOnBatteryConfig" json:"are_dreams_enabled_on_battery_config,omitempty"`
	// Minimum battery level to allow dreaming when powered.
	// Use -1 to disable this safety feature.
	DreamsBatteryLevelMinimumWhenPoweredConfig *int32 `protobuf:"zigzag32,12,opt,name=dreams_battery_level_minimum_when_powered_config,json=dreamsBatteryLevelMinimumWhenPoweredConfig" json:"dreams_battery_level_minimum_when_powered_config,omitempty"`
	// Minimum battery level to allow dreaming when not powered.
	// Use -1 to disable this safety feature.
	DreamsBatteryLevelMinimumWhenNotPoweredConfig *int32 `protobuf:"zigzag32,13,opt,name=dreams_battery_level_minimum_when_not_powered_config,json=dreamsBatteryLevelMinimumWhenNotPoweredConfig" json:"dreams_battery_level_minimum_when_not_powered_config,omitempty"`
	// If the battery level drops by this percentage and the user activity
	// timeout has expired, then assume the device is receiving insufficient
	// current to charge effectively and terminate the dream.  Use -1 to disable
	// this safety feature.
	DreamsBatteryLevelDrainCutoffConfig *int32 `protobuf:"zigzag32,14,opt,name=dreams_battery_level_drain_cutoff_config,json=dreamsBatteryLevelDrainCutoffConfig" json:"dreams_battery_level_drain_cutoff_config,omitempty"`
	// True if dreams are enabled by the user.
	AreDreamsEnabledSetting *bool `protobuf:"varint,15,opt,name=are_dreams_enabled_setting,json=areDreamsEnabledSetting" json:"are_dreams_enabled_setting,omitempty"`
	// True if dreams should be activated on sleep.
	AreDreamsActivateOnSleepSetting *bool `protobuf:"varint,16,opt,name=are_dreams_activate_on_sleep_setting,json=areDreamsActivateOnSleepSetting" json:"are_dreams_activate_on_sleep_setting,omitempty"`
	// True if dreams should be activated on dock.
	AreDreamsActivateOnDockSetting *bool `protobuf:"varint,17,opt,name=are_dreams_activate_on_dock_setting,json=areDreamsActivateOnDockSetting" json:"are_dreams_activate_on_dock_setting,omitempty"`
	// True if doze should not be started until after the screen off transition.
	IsDozeAfterScreenOffConfig *bool `protobuf:"varint,18,opt,name=is_doze_after_screen_off_config,json=isDozeAfterScreenOffConfig" json:"is_doze_after_screen_off_config,omitempty"`
	// The minimum screen off timeout, in milliseconds.
	MinimumScreenOffTimeoutConfigMs *int32 `protobuf:"varint,19,opt,name=minimum_screen_off_timeout_config_ms,json=minimumScreenOffTimeoutConfigMs" json:"minimum_screen_off_timeout_config_ms,omitempty"`
	// The screen dim duration, in milliseconds.
	MaximumScreenDimDurationConfigMs *int32 `protobuf:"varint,20,opt,name=maximum_screen_dim_duration_config_ms,json=maximumScreenDimDurationConfigMs" json:"maximum_screen_dim_duration_config_ms,omitempty"`
	// The maximum screen dim time expressed as a ratio relative to the screen off timeout.
	MaximumScreenDimRatioConfig *float32 `protobuf:"fixed32,21,opt,name=maximum_screen_dim_ratio_config,json=maximumScreenDimRatioConfig" json:"maximum_screen_dim_ratio_config,omitempty"`
	// The screen off timeout setting value in milliseconds.
	ScreenOffTimeoutSettingMs *int32 `protobuf:"varint,22,opt,name=screen_off_timeout_setting_ms,json=screenOffTimeoutSettingMs" json:"screen_off_timeout_setting_ms,omitempty"`
	// The sleep timeout setting value in milliseconds. Default value is -1.
	SleepTimeoutSettingMs *int32 `protobuf:"zigzag32,23,opt,name=sleep_timeout_setting_ms,json=sleepTimeoutSettingMs" json:"sleep_timeout_setting_ms,omitempty"`
	// The maximum allowable screen off timeout according to the device administration policy.
	MaximumScreenOffTimeoutFromDeviceAdminMs               *int32 `protobuf:"varint,24,opt,name=maximum_screen_off_timeout_from_device_admin_ms,json=maximumScreenOffTimeoutFromDeviceAdminMs" json:"maximum_screen_off_timeout_from_device_admin_ms,omitempty"`
	IsMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked *bool  `protobuf:"varint,25,opt,name=is_maximum_screen_off_timeout_from_device_admin_enforced_locked,json=isMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked" json:"is_maximum_screen_off_timeout_from_device_admin_enforced_locked,omitempty"`
	// The stay on while plugged in setting.
	// A set of battery conditions under which to make the screen stay on.
	StayOnWhilePluggedIn *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto `protobuf:"bytes,26,opt,name=stay_on_while_plugged_in,json=stayOnWhilePluggedIn" json:"stay_on_while_plugged_in,omitempty"`
	// The screen brightness mode.
	ScreenBrightnessModeSetting *providers.SettingsProto_ScreenBrightnessMode `protobuf:"varint,27,opt,name=screen_brightness_mode_setting,json=screenBrightnessModeSetting,enum=android.providers.settings.SettingsProto_ScreenBrightnessMode" json:"screen_brightness_mode_setting,omitempty"`
	// The screen brightness setting override from the window manager
	// to allow the current foreground activity to override the brightness.
	// Use -1 to disable.
	ScreenBrightnessOverrideFromWindowManager *int32 `protobuf:"zigzag32,28,opt,name=screen_brightness_override_from_window_manager,json=screenBrightnessOverrideFromWindowManager" json:"screen_brightness_override_from_window_manager,omitempty"`
	// The user activity timeout override from the window manager
	// to allow the current foreground activity to override the user activity
	// timeout. Use -1 to disable.
	UserActivityTimeoutOverrideFromWindowManagerMs *int64 `protobuf:"zigzag64,29,opt,name=user_activity_timeout_override_from_window_manager_ms,json=userActivityTimeoutOverrideFromWindowManagerMs" json:"user_activity_timeout_override_from_window_manager_ms,omitempty"`
	// The window manager has determined the user to be inactive via other means.
	// Set this to false to disable.
	IsUserInactiveOverrideFromWindowManager *bool `protobuf:"varint,30,opt,name=is_user_inactive_override_from_window_manager,json=isUserInactiveOverrideFromWindowManager" json:"is_user_inactive_override_from_window_manager,omitempty"`
	// The screen state to use while dozing.
	DozeScreenStateOverrideFromDreamManager *view.DisplayStateEnum `protobuf:"varint,31,opt,name=doze_screen_state_override_from_dream_manager,json=dozeScreenStateOverrideFromDreamManager,enum=android.view.DisplayStateEnum" json:"doze_screen_state_override_from_dream_manager,omitempty"`
	// The screen brightness to use while dozing.
	DozedScreenBrightnessOverrideFromDreamManager *float32 `protobuf:"fixed32,32,opt,name=dozed_screen_brightness_override_from_dream_manager,json=dozedScreenBrightnessOverrideFromDreamManager" json:"dozed_screen_brightness_override_from_dream_manager,omitempty"`
	// Screen brightness settings limits.
	ScreenBrightnessSettingLimits *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto `protobuf:"bytes,33,opt,name=screen_brightness_setting_limits,json=screenBrightnessSettingLimits" json:"screen_brightness_setting_limits,omitempty"`
	// True if double tap to wake is enabled
	IsDoubleTapWakeEnabled *bool `protobuf:"varint,34,opt,name=is_double_tap_wake_enabled,json=isDoubleTapWakeEnabled" json:"is_double_tap_wake_enabled,omitempty"`
	// True if we are currently in VR Mode.
	IsVrModeEnabled *bool `protobuf:"varint,35,opt,name=is_vr_mode_enabled,json=isVrModeEnabled" json:"is_vr_mode_enabled,omitempty"`
	// True if Sidekick is controlling the display and we shouldn't change its power mode.
	DrawWakeLockOverrideFromSidekick *bool `protobuf:"varint,36,opt,name=draw_wake_lock_override_from_sidekick,json=drawWakeLockOverrideFromSidekick" json:"draw_wake_lock_override_from_sidekick,omitempty"`
	// The attentive timeout setting value in milliseconds. Default value is -1.
	AttentiveTimeoutSettingMs *int32 `protobuf:"zigzag32,37,opt,name=attentive_timeout_setting_ms,json=attentiveTimeoutSettingMs" json:"attentive_timeout_setting_ms,omitempty"`
	// The attentive timeout config value in milliseconds.
	AttentiveTimeoutConfigMs *int32 `protobuf:"zigzag32,38,opt,name=attentive_timeout_config_ms,json=attentiveTimeoutConfigMs" json:"attentive_timeout_config_ms,omitempty"`
	// The attentive warning duration config value in milliseconds.
	AttentiveWarningDurationConfigMs *int32 `protobuf:"zigzag32,39,opt,name=attentive_warning_duration_config_ms,json=attentiveWarningDurationConfigMs" json:"attentive_warning_duration_config_ms,omitempty"`
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) Reset() {
	*x = PowerServiceSettingsAndConfigurationDumpProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerServiceSettingsAndConfigurationDumpProto) ProtoMessage() {}

func (x *PowerServiceSettingsAndConfigurationDumpProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerServiceSettingsAndConfigurationDumpProto.ProtoReflect.Descriptor instead.
func (*PowerServiceSettingsAndConfigurationDumpProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{3}
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsDecoupleHalAutoSuspendModeFromDisplayConfig() bool {
	if x != nil && x.IsDecoupleHalAutoSuspendModeFromDisplayConfig != nil {
		return *x.IsDecoupleHalAutoSuspendModeFromDisplayConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsDecoupleHalInteractiveModeFromDisplayConfig() bool {
	if x != nil && x.IsDecoupleHalInteractiveModeFromDisplayConfig != nil {
		return *x.IsDecoupleHalInteractiveModeFromDisplayConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsWakeUpWhenPluggedOrUnpluggedConfig() bool {
	if x != nil && x.IsWakeUpWhenPluggedOrUnpluggedConfig != nil {
		return *x.IsWakeUpWhenPluggedOrUnpluggedConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig() bool {
	if x != nil && x.IsWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig != nil {
		return *x.IsWakeUpWhenPluggedOrUnpluggedInTheaterModeConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsTheaterModeEnabled() bool {
	if x != nil && x.IsTheaterModeEnabled != nil {
		return *x.IsTheaterModeEnabled
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsSuspendWhenScreenOffDueToProximityConfig() bool {
	if x != nil && x.IsSuspendWhenScreenOffDueToProximityConfig != nil {
		return *x.IsSuspendWhenScreenOffDueToProximityConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsSupportedConfig() bool {
	if x != nil && x.AreDreamsSupportedConfig != nil {
		return *x.AreDreamsSupportedConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsEnabledByDefaultConfig() bool {
	if x != nil && x.AreDreamsEnabledByDefaultConfig != nil {
		return *x.AreDreamsEnabledByDefaultConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsActivatedOnSleepByDefaultConfig() bool {
	if x != nil && x.AreDreamsActivatedOnSleepByDefaultConfig != nil {
		return *x.AreDreamsActivatedOnSleepByDefaultConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsActivatedOnDockByDefaultConfig() bool {
	if x != nil && x.AreDreamsActivatedOnDockByDefaultConfig != nil {
		return *x.AreDreamsActivatedOnDockByDefaultConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsEnabledOnBatteryConfig() bool {
	if x != nil && x.AreDreamsEnabledOnBatteryConfig != nil {
		return *x.AreDreamsEnabledOnBatteryConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetDreamsBatteryLevelMinimumWhenPoweredConfig() int32 {
	if x != nil && x.DreamsBatteryLevelMinimumWhenPoweredConfig != nil {
		return *x.DreamsBatteryLevelMinimumWhenPoweredConfig
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetDreamsBatteryLevelMinimumWhenNotPoweredConfig() int32 {
	if x != nil && x.DreamsBatteryLevelMinimumWhenNotPoweredConfig != nil {
		return *x.DreamsBatteryLevelMinimumWhenNotPoweredConfig
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetDreamsBatteryLevelDrainCutoffConfig() int32 {
	if x != nil && x.DreamsBatteryLevelDrainCutoffConfig != nil {
		return *x.DreamsBatteryLevelDrainCutoffConfig
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsEnabledSetting() bool {
	if x != nil && x.AreDreamsEnabledSetting != nil {
		return *x.AreDreamsEnabledSetting
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsActivateOnSleepSetting() bool {
	if x != nil && x.AreDreamsActivateOnSleepSetting != nil {
		return *x.AreDreamsActivateOnSleepSetting
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAreDreamsActivateOnDockSetting() bool {
	if x != nil && x.AreDreamsActivateOnDockSetting != nil {
		return *x.AreDreamsActivateOnDockSetting
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsDozeAfterScreenOffConfig() bool {
	if x != nil && x.IsDozeAfterScreenOffConfig != nil {
		return *x.IsDozeAfterScreenOffConfig
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetMinimumScreenOffTimeoutConfigMs() int32 {
	if x != nil && x.MinimumScreenOffTimeoutConfigMs != nil {
		return *x.MinimumScreenOffTimeoutConfigMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetMaximumScreenDimDurationConfigMs() int32 {
	if x != nil && x.MaximumScreenDimDurationConfigMs != nil {
		return *x.MaximumScreenDimDurationConfigMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetMaximumScreenDimRatioConfig() float32 {
	if x != nil && x.MaximumScreenDimRatioConfig != nil {
		return *x.MaximumScreenDimRatioConfig
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetScreenOffTimeoutSettingMs() int32 {
	if x != nil && x.ScreenOffTimeoutSettingMs != nil {
		return *x.ScreenOffTimeoutSettingMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetSleepTimeoutSettingMs() int32 {
	if x != nil && x.SleepTimeoutSettingMs != nil {
		return *x.SleepTimeoutSettingMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetMaximumScreenOffTimeoutFromDeviceAdminMs() int32 {
	if x != nil && x.MaximumScreenOffTimeoutFromDeviceAdminMs != nil {
		return *x.MaximumScreenOffTimeoutFromDeviceAdminMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked() bool {
	if x != nil && x.IsMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked != nil {
		return *x.IsMaximumScreenOffTimeoutFromDeviceAdminEnforcedLocked
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetStayOnWhilePluggedIn() *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto {
	if x != nil {
		return x.StayOnWhilePluggedIn
	}
	return nil
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetScreenBrightnessModeSetting() providers.SettingsProto_ScreenBrightnessMode {
	if x != nil && x.ScreenBrightnessModeSetting != nil {
		return *x.ScreenBrightnessModeSetting
	}
	return providers.SettingsProto_ScreenBrightnessMode(0)
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetScreenBrightnessOverrideFromWindowManager() int32 {
	if x != nil && x.ScreenBrightnessOverrideFromWindowManager != nil {
		return *x.ScreenBrightnessOverrideFromWindowManager
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetUserActivityTimeoutOverrideFromWindowManagerMs() int64 {
	if x != nil && x.UserActivityTimeoutOverrideFromWindowManagerMs != nil {
		return *x.UserActivityTimeoutOverrideFromWindowManagerMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsUserInactiveOverrideFromWindowManager() bool {
	if x != nil && x.IsUserInactiveOverrideFromWindowManager != nil {
		return *x.IsUserInactiveOverrideFromWindowManager
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetDozeScreenStateOverrideFromDreamManager() view.DisplayStateEnum {
	if x != nil && x.DozeScreenStateOverrideFromDreamManager != nil {
		return *x.DozeScreenStateOverrideFromDreamManager
	}
	return view.DisplayStateEnum(0)
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetDozedScreenBrightnessOverrideFromDreamManager() float32 {
	if x != nil && x.DozedScreenBrightnessOverrideFromDreamManager != nil {
		return *x.DozedScreenBrightnessOverrideFromDreamManager
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetScreenBrightnessSettingLimits() *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto {
	if x != nil {
		return x.ScreenBrightnessSettingLimits
	}
	return nil
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsDoubleTapWakeEnabled() bool {
	if x != nil && x.IsDoubleTapWakeEnabled != nil {
		return *x.IsDoubleTapWakeEnabled
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetIsVrModeEnabled() bool {
	if x != nil && x.IsVrModeEnabled != nil {
		return *x.IsVrModeEnabled
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetDrawWakeLockOverrideFromSidekick() bool {
	if x != nil && x.DrawWakeLockOverrideFromSidekick != nil {
		return *x.DrawWakeLockOverrideFromSidekick
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAttentiveTimeoutSettingMs() int32 {
	if x != nil && x.AttentiveTimeoutSettingMs != nil {
		return *x.AttentiveTimeoutSettingMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAttentiveTimeoutConfigMs() int32 {
	if x != nil && x.AttentiveTimeoutConfigMs != nil {
		return *x.AttentiveTimeoutConfigMs
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto) GetAttentiveWarningDurationConfigMs() int32 {
	if x != nil && x.AttentiveWarningDurationConfigMs != nil {
		return *x.AttentiveWarningDurationConfigMs
	}
	return 0
}

type BatterySaverStateMachineProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether battery saver is enabled.
	Enabled *bool                                    `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	State   *BatterySaverStateMachineProto_StateEnum `protobuf:"varint,18,opt,name=state,enum=com.android.server.power.BatterySaverStateMachineProto_StateEnum" json:"state,omitempty"`
	// Whether full battery saver is enabled.
	IsFullEnabled *bool `protobuf:"varint,14,opt,name=is_full_enabled,json=isFullEnabled" json:"is_full_enabled,omitempty"`
	// Whether adaptive battery saver is enabled.
	IsAdaptiveEnabled *bool `protobuf:"varint,15,opt,name=is_adaptive_enabled,json=isAdaptiveEnabled" json:"is_adaptive_enabled,omitempty"`
	// Whether the battery saver policy indicates that is_enabled should be
	// advertised.
	ShouldAdvertiseIsEnabled *bool `protobuf:"varint,16,opt,name=should_advertise_is_enabled,json=shouldAdvertiseIsEnabled" json:"should_advertise_is_enabled,omitempty"`
	// Whether system has booted.
	BootCompleted *bool `protobuf:"varint,2,opt,name=boot_completed,json=bootCompleted" json:"boot_completed,omitempty"`
	// Whether settings have been loaded already.
	SettingsLoaded *bool `protobuf:"varint,3,opt,name=settings_loaded,json=settingsLoaded" json:"settings_loaded,omitempty"`
	// Whether battery status has been set at least once.
	BatteryStatusSet *bool `protobuf:"varint,4,opt,name=battery_status_set,json=batteryStatusSet" json:"battery_status_set,omitempty"`
	// Whether the device is connected to any power source.
	IsPowered *bool `protobuf:"varint,6,opt,name=is_powered,json=isPowered" json:"is_powered,omitempty"`
	// Current battery level in %, 0-100.
	BatteryLevel *int32 `protobuf:"varint,7,opt,name=battery_level,json=batteryLevel" json:"battery_level,omitempty"`
	// Whether battery level is low or not.
	IsBatteryLevelLow *bool `protobuf:"varint,8,opt,name=is_battery_level_low,json=isBatteryLevelLow" json:"is_battery_level_low,omitempty"`
	// The value of Global.AUTOMATIC_POWER_SAVE_MODE. This is a cached value, so it could
	// be slightly different from what's in GlobalSettingsProto.DynamicPowerSavings.
	SettingAutomaticTrigger *BatterySaverStateMachineProto_AutomaticTriggerEnum `protobuf:"varint,19,opt,name=setting_automatic_trigger,json=settingAutomaticTrigger,enum=com.android.server.power.BatterySaverStateMachineProto_AutomaticTriggerEnum" json:"setting_automatic_trigger,omitempty"`
	// The value of Global.LOW_POWER_MODE. This is a cached value, so it could
	// be slightly different from what's in GlobalSettingsProto.LowPowerMode.
	SettingBatterySaverEnabled *bool `protobuf:"varint,9,opt,name=setting_battery_saver_enabled,json=settingBatterySaverEnabled" json:"setting_battery_saver_enabled,omitempty"`
	// The value of Global.LOW_POWER_MODE_STICKY. This is a cached value, so it could
	// be slightly different from what's in GlobalSettingsProto.LowPowerMode.
	SettingBatterySaverEnabledSticky *bool `protobuf:"varint,10,opt,name=setting_battery_saver_enabled_sticky,json=settingBatterySaverEnabledSticky" json:"setting_battery_saver_enabled_sticky,omitempty"`
	// The value of Global.LOW_POWER_MODE_TRIGGER_LEVEL. This is a cached value, so it could
	// be slightly different from what's in GlobalSettingsProto.LowPowerMode.
	SettingBatterySaverTriggerThreshold *int32 `protobuf:"varint,11,opt,name=setting_battery_saver_trigger_threshold,json=settingBatterySaverTriggerThreshold" json:"setting_battery_saver_trigger_threshold,omitempty"`
	// The value of Global.LOW_POWER_MODE_STICKY_AUTO_DISABLE_ENABLED. This is a cached value, so
	// it could be slightly different from what's in GlobalSettingsProto.LowPowerMode.
	SettingBatterySaverStickyAutoDisableEnabled *bool `protobuf:"varint,12,opt,name=setting_battery_saver_sticky_auto_disable_enabled,json=settingBatterySaverStickyAutoDisableEnabled" json:"setting_battery_saver_sticky_auto_disable_enabled,omitempty"`
	// The value of Global.LOW_POWER_MODE_STICKY_AUTO_DISABLE_LEVEL. This is a cached value, so it
	// could be slightly different from what's in GlobalSettingsProto.LowPowerMode.
	SettingBatterySaverStickyAutoDisableThreshold *int32 `protobuf:"varint,13,opt,name=setting_battery_saver_sticky_auto_disable_threshold,json=settingBatterySaverStickyAutoDisableThreshold" json:"setting_battery_saver_sticky_auto_disable_threshold,omitempty"`
	// The last time adaptive battery saver was changed by an external service,
	// using elapsed realtime as the timebase.
	LastAdaptiveBatterySaverChangedExternallyElapsed *int64 `protobuf:"varint,17,opt,name=last_adaptive_battery_saver_changed_externally_elapsed,json=lastAdaptiveBatterySaverChangedExternallyElapsed" json:"last_adaptive_battery_saver_changed_externally_elapsed,omitempty"`
	// The default disable threshold for Dynamic Power Savings enabled battery saver.
	DefaultDynamicDisableThreshold *int32 `protobuf:"varint,20,opt,name=default_dynamic_disable_threshold,json=defaultDynamicDisableThreshold" json:"default_dynamic_disable_threshold,omitempty"`
	// When to disable battery saver again if it was enabled due to an external suggestion.
	// Corresponds to Global.DYNAMIC_POWER_SAVINGS_DISABLE_THRESHOLD. This is a cached value,
	// so it could be slightly different from what's in GlobalSettingsProto.DynamicPowerSavings.
	DynamicDisableThreshold *int32 `protobuf:"varint,21,opt,name=dynamic_disable_threshold,json=dynamicDisableThreshold" json:"dynamic_disable_threshold,omitempty"`
	// Whether we've received a suggestion that battery saver should be on from an external app.
	// Corresponds to Global.DYNAMIC_POWER_SAVINGS_ENABLED. This is a cached value, so it could
	// be slightly different from what's in GlobalSettingsProto.DynamicPowerSavings.
	DynamicBatterySaverEnabled *bool `protobuf:"varint,22,opt,name=dynamic_battery_saver_enabled,json=dynamicBatterySaverEnabled" json:"dynamic_battery_saver_enabled,omitempty"`
}

func (x *BatterySaverStateMachineProto) Reset() {
	*x = BatterySaverStateMachineProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatterySaverStateMachineProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatterySaverStateMachineProto) ProtoMessage() {}

func (x *BatterySaverStateMachineProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatterySaverStateMachineProto.ProtoReflect.Descriptor instead.
func (*BatterySaverStateMachineProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{4}
}

func (x *BatterySaverStateMachineProto) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetState() BatterySaverStateMachineProto_StateEnum {
	if x != nil && x.State != nil {
		return *x.State
	}
	return BatterySaverStateMachineProto_STATE_UNKNOWN
}

func (x *BatterySaverStateMachineProto) GetIsFullEnabled() bool {
	if x != nil && x.IsFullEnabled != nil {
		return *x.IsFullEnabled
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetIsAdaptiveEnabled() bool {
	if x != nil && x.IsAdaptiveEnabled != nil {
		return *x.IsAdaptiveEnabled
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetShouldAdvertiseIsEnabled() bool {
	if x != nil && x.ShouldAdvertiseIsEnabled != nil {
		return *x.ShouldAdvertiseIsEnabled
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetBootCompleted() bool {
	if x != nil && x.BootCompleted != nil {
		return *x.BootCompleted
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetSettingsLoaded() bool {
	if x != nil && x.SettingsLoaded != nil {
		return *x.SettingsLoaded
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetBatteryStatusSet() bool {
	if x != nil && x.BatteryStatusSet != nil {
		return *x.BatteryStatusSet
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetIsPowered() bool {
	if x != nil && x.IsPowered != nil {
		return *x.IsPowered
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetBatteryLevel() int32 {
	if x != nil && x.BatteryLevel != nil {
		return *x.BatteryLevel
	}
	return 0
}

func (x *BatterySaverStateMachineProto) GetIsBatteryLevelLow() bool {
	if x != nil && x.IsBatteryLevelLow != nil {
		return *x.IsBatteryLevelLow
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetSettingAutomaticTrigger() BatterySaverStateMachineProto_AutomaticTriggerEnum {
	if x != nil && x.SettingAutomaticTrigger != nil {
		return *x.SettingAutomaticTrigger
	}
	return BatterySaverStateMachineProto_TRIGGER_PERCENTAGE
}

func (x *BatterySaverStateMachineProto) GetSettingBatterySaverEnabled() bool {
	if x != nil && x.SettingBatterySaverEnabled != nil {
		return *x.SettingBatterySaverEnabled
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetSettingBatterySaverEnabledSticky() bool {
	if x != nil && x.SettingBatterySaverEnabledSticky != nil {
		return *x.SettingBatterySaverEnabledSticky
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetSettingBatterySaverTriggerThreshold() int32 {
	if x != nil && x.SettingBatterySaverTriggerThreshold != nil {
		return *x.SettingBatterySaverTriggerThreshold
	}
	return 0
}

func (x *BatterySaverStateMachineProto) GetSettingBatterySaverStickyAutoDisableEnabled() bool {
	if x != nil && x.SettingBatterySaverStickyAutoDisableEnabled != nil {
		return *x.SettingBatterySaverStickyAutoDisableEnabled
	}
	return false
}

func (x *BatterySaverStateMachineProto) GetSettingBatterySaverStickyAutoDisableThreshold() int32 {
	if x != nil && x.SettingBatterySaverStickyAutoDisableThreshold != nil {
		return *x.SettingBatterySaverStickyAutoDisableThreshold
	}
	return 0
}

func (x *BatterySaverStateMachineProto) GetLastAdaptiveBatterySaverChangedExternallyElapsed() int64 {
	if x != nil && x.LastAdaptiveBatterySaverChangedExternallyElapsed != nil {
		return *x.LastAdaptiveBatterySaverChangedExternallyElapsed
	}
	return 0
}

func (x *BatterySaverStateMachineProto) GetDefaultDynamicDisableThreshold() int32 {
	if x != nil && x.DefaultDynamicDisableThreshold != nil {
		return *x.DefaultDynamicDisableThreshold
	}
	return 0
}

func (x *BatterySaverStateMachineProto) GetDynamicDisableThreshold() int32 {
	if x != nil && x.DynamicDisableThreshold != nil {
		return *x.DynamicDisableThreshold
	}
	return 0
}

func (x *BatterySaverStateMachineProto) GetDynamicBatterySaverEnabled() bool {
	if x != nil && x.DynamicBatterySaverEnabled != nil {
		return *x.DynamicBatterySaverEnabled
	}
	return false
}

type LowPowerStandbyControllerDumpProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if Low Power Standby is active
	IsActive *bool `protobuf:"varint,1,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	// True if Low Power Standby is enabled
	IsEnabled *bool `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	// True if Low Power Standby is supported
	IsSupportedConfig *bool `protobuf:"varint,3,opt,name=is_supported_config,json=isSupportedConfig" json:"is_supported_config,omitempty"`
	// True if Low Power Standby is enabled by default
	IsEnabledByDefaultConfig *bool `protobuf:"varint,4,opt,name=is_enabled_by_default_config,json=isEnabledByDefaultConfig" json:"is_enabled_by_default_config,omitempty"`
	// True if the device is currently interactive
	IsInteractive *bool `protobuf:"varint,5,opt,name=is_interactive,json=isInteractive" json:"is_interactive,omitempty"`
	// Time (in elapsedRealtime) when the device was last interactive
	LastInteractiveTime *int64 `protobuf:"varint,6,opt,name=last_interactive_time,json=lastInteractiveTime" json:"last_interactive_time,omitempty"`
	// Timeout (in milliseconds) after becoming non-interactive that Low Power Standby can activate
	StandbyTimeoutConfig *int32 `protobuf:"varint,7,opt,name=standby_timeout_config,json=standbyTimeoutConfig" json:"standby_timeout_config,omitempty"`
	// True if the device has entered idle mode since becoming non-interactive
	IdleSinceNonInteractive *bool `protobuf:"varint,8,opt,name=idle_since_non_interactive,json=idleSinceNonInteractive" json:"idle_since_non_interactive,omitempty"`
	// True if the device is currently in idle mode
	IsDeviceIdle *bool `protobuf:"varint,9,opt,name=is_device_idle,json=isDeviceIdle" json:"is_device_idle,omitempty"`
	// Set of app ids that are exempt form low power standby
	Allowlist []int32 `protobuf:"varint,10,rep,name=allowlist" json:"allowlist,omitempty"`
	// The active policy specifying exemptions
	Policy *LowPowerStandbyPolicyProto `protobuf:"bytes,11,opt,name=policy" json:"policy,omitempty"`
}

func (x *LowPowerStandbyControllerDumpProto) Reset() {
	*x = LowPowerStandbyControllerDumpProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowPowerStandbyControllerDumpProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowPowerStandbyControllerDumpProto) ProtoMessage() {}

func (x *LowPowerStandbyControllerDumpProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowPowerStandbyControllerDumpProto.ProtoReflect.Descriptor instead.
func (*LowPowerStandbyControllerDumpProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{5}
}

func (x *LowPowerStandbyControllerDumpProto) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *LowPowerStandbyControllerDumpProto) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *LowPowerStandbyControllerDumpProto) GetIsSupportedConfig() bool {
	if x != nil && x.IsSupportedConfig != nil {
		return *x.IsSupportedConfig
	}
	return false
}

func (x *LowPowerStandbyControllerDumpProto) GetIsEnabledByDefaultConfig() bool {
	if x != nil && x.IsEnabledByDefaultConfig != nil {
		return *x.IsEnabledByDefaultConfig
	}
	return false
}

func (x *LowPowerStandbyControllerDumpProto) GetIsInteractive() bool {
	if x != nil && x.IsInteractive != nil {
		return *x.IsInteractive
	}
	return false
}

func (x *LowPowerStandbyControllerDumpProto) GetLastInteractiveTime() int64 {
	if x != nil && x.LastInteractiveTime != nil {
		return *x.LastInteractiveTime
	}
	return 0
}

func (x *LowPowerStandbyControllerDumpProto) GetStandbyTimeoutConfig() int32 {
	if x != nil && x.StandbyTimeoutConfig != nil {
		return *x.StandbyTimeoutConfig
	}
	return 0
}

func (x *LowPowerStandbyControllerDumpProto) GetIdleSinceNonInteractive() bool {
	if x != nil && x.IdleSinceNonInteractive != nil {
		return *x.IdleSinceNonInteractive
	}
	return false
}

func (x *LowPowerStandbyControllerDumpProto) GetIsDeviceIdle() bool {
	if x != nil && x.IsDeviceIdle != nil {
		return *x.IsDeviceIdle
	}
	return false
}

func (x *LowPowerStandbyControllerDumpProto) GetAllowlist() []int32 {
	if x != nil {
		return x.Allowlist
	}
	return nil
}

func (x *LowPowerStandbyControllerDumpProto) GetPolicy() *LowPowerStandbyPolicyProto {
	if x != nil {
		return x.Policy
	}
	return nil
}

type LowPowerStandbyPolicyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the policy
	Identifier *string `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	// Packages that are exempt from Low Power Standby restrictions
	ExemptPackages []string `protobuf:"bytes,2,rep,name=exempt_packages,json=exemptPackages" json:"exempt_packages,omitempty"`
	// Exemption reasons that this policy allows
	AllowedReasons *int32 `protobuf:"varint,3,opt,name=allowed_reasons,json=allowedReasons" json:"allowed_reasons,omitempty"`
	// Features that this policy allows to be used
	AllowedFeatures []string `protobuf:"bytes,4,rep,name=allowed_features,json=allowedFeatures" json:"allowed_features,omitempty"`
}

func (x *LowPowerStandbyPolicyProto) Reset() {
	*x = LowPowerStandbyPolicyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowPowerStandbyPolicyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowPowerStandbyPolicyProto) ProtoMessage() {}

func (x *LowPowerStandbyPolicyProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowPowerStandbyPolicyProto.ProtoReflect.Descriptor instead.
func (*LowPowerStandbyPolicyProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{6}
}

func (x *LowPowerStandbyPolicyProto) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *LowPowerStandbyPolicyProto) GetExemptPackages() []string {
	if x != nil {
		return x.ExemptPackages
	}
	return nil
}

func (x *LowPowerStandbyPolicyProto) GetAllowedReasons() int32 {
	if x != nil && x.AllowedReasons != nil {
		return *x.AllowedReasons
	}
	return 0
}

func (x *LowPowerStandbyPolicyProto) GetAllowedFeatures() []string {
	if x != nil {
		return x.AllowedFeatures
	}
	return nil
}

// A com.android.server.power.PowerManagerService.Constants object.
type PowerManagerServiceDumpProto_ConstantsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNoCachedWakeLocks *bool `protobuf:"varint,1,opt,name=is_no_cached_wake_locks,json=isNoCachedWakeLocks" json:"is_no_cached_wake_locks,omitempty"`
}

func (x *PowerManagerServiceDumpProto_ConstantsProto) Reset() {
	*x = PowerManagerServiceDumpProto_ConstantsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerManagerServiceDumpProto_ConstantsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerManagerServiceDumpProto_ConstantsProto) ProtoMessage() {}

func (x *PowerManagerServiceDumpProto_ConstantsProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerManagerServiceDumpProto_ConstantsProto.ProtoReflect.Descriptor instead.
func (*PowerManagerServiceDumpProto_ConstantsProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PowerManagerServiceDumpProto_ConstantsProto) GetIsNoCachedWakeLocks() bool {
	if x != nil && x.IsNoCachedWakeLocks != nil {
		return *x.IsNoCachedWakeLocks
	}
	return false
}

type PowerManagerServiceDumpProto_ActiveWakeLocksProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCpu                *bool `protobuf:"varint,1,opt,name=is_cpu,json=isCpu" json:"is_cpu,omitempty"`
	IsScreenBright       *bool `protobuf:"varint,2,opt,name=is_screen_bright,json=isScreenBright" json:"is_screen_bright,omitempty"`
	IsScreenDim          *bool `protobuf:"varint,3,opt,name=is_screen_dim,json=isScreenDim" json:"is_screen_dim,omitempty"`
	IsButtonBright       *bool `protobuf:"varint,4,opt,name=is_button_bright,json=isButtonBright" json:"is_button_bright,omitempty"`
	IsProximityScreenOff *bool `protobuf:"varint,5,opt,name=is_proximity_screen_off,json=isProximityScreenOff" json:"is_proximity_screen_off,omitempty"`
	// only set if already awake
	IsStayAwake *bool `protobuf:"varint,6,opt,name=is_stay_awake,json=isStayAwake" json:"is_stay_awake,omitempty"`
	IsDoze      *bool `protobuf:"varint,7,opt,name=is_doze,json=isDoze" json:"is_doze,omitempty"`
	IsDraw      *bool `protobuf:"varint,8,opt,name=is_draw,json=isDraw" json:"is_draw,omitempty"`
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) Reset() {
	*x = PowerManagerServiceDumpProto_ActiveWakeLocksProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerManagerServiceDumpProto_ActiveWakeLocksProto) ProtoMessage() {}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerManagerServiceDumpProto_ActiveWakeLocksProto.ProtoReflect.Descriptor instead.
func (*PowerManagerServiceDumpProto_ActiveWakeLocksProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsCpu() bool {
	if x != nil && x.IsCpu != nil {
		return *x.IsCpu
	}
	return false
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsScreenBright() bool {
	if x != nil && x.IsScreenBright != nil {
		return *x.IsScreenBright
	}
	return false
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsScreenDim() bool {
	if x != nil && x.IsScreenDim != nil {
		return *x.IsScreenDim
	}
	return false
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsButtonBright() bool {
	if x != nil && x.IsButtonBright != nil {
		return *x.IsButtonBright
	}
	return false
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsProximityScreenOff() bool {
	if x != nil && x.IsProximityScreenOff != nil {
		return *x.IsProximityScreenOff
	}
	return false
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsStayAwake() bool {
	if x != nil && x.IsStayAwake != nil {
		return *x.IsStayAwake
	}
	return false
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsDoze() bool {
	if x != nil && x.IsDoze != nil {
		return *x.IsDoze
	}
	return false
}

func (x *PowerManagerServiceDumpProto_ActiveWakeLocksProto) GetIsDraw() bool {
	if x != nil && x.IsDraw != nil {
		return *x.IsDraw
	}
	return false
}

type PowerManagerServiceDumpProto_UserActivityProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsScreenBright                       *bool  `protobuf:"varint,1,opt,name=is_screen_bright,json=isScreenBright" json:"is_screen_bright,omitempty"`
	IsScreenDim                          *bool  `protobuf:"varint,2,opt,name=is_screen_dim,json=isScreenDim" json:"is_screen_dim,omitempty"`
	IsScreenDream                        *bool  `protobuf:"varint,3,opt,name=is_screen_dream,json=isScreenDream" json:"is_screen_dream,omitempty"`
	LastUserActivityTimeMs               *int64 `protobuf:"varint,4,opt,name=last_user_activity_time_ms,json=lastUserActivityTimeMs" json:"last_user_activity_time_ms,omitempty"`
	LastUserActivityTimeNoChangeLightsMs *int64 `protobuf:"varint,5,opt,name=last_user_activity_time_no_change_lights_ms,json=lastUserActivityTimeNoChangeLightsMs" json:"last_user_activity_time_no_change_lights_ms,omitempty"`
	DisplayGroupId                       *int32 `protobuf:"varint,6,opt,name=display_group_id,json=displayGroupId" json:"display_group_id,omitempty"`
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) Reset() {
	*x = PowerManagerServiceDumpProto_UserActivityProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerManagerServiceDumpProto_UserActivityProto) ProtoMessage() {}

func (x *PowerManagerServiceDumpProto_UserActivityProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerManagerServiceDumpProto_UserActivityProto.ProtoReflect.Descriptor instead.
func (*PowerManagerServiceDumpProto_UserActivityProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) GetIsScreenBright() bool {
	if x != nil && x.IsScreenBright != nil {
		return *x.IsScreenBright
	}
	return false
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) GetIsScreenDim() bool {
	if x != nil && x.IsScreenDim != nil {
		return *x.IsScreenDim
	}
	return false
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) GetIsScreenDream() bool {
	if x != nil && x.IsScreenDream != nil {
		return *x.IsScreenDream
	}
	return false
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) GetLastUserActivityTimeMs() int64 {
	if x != nil && x.LastUserActivityTimeMs != nil {
		return *x.LastUserActivityTimeMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) GetLastUserActivityTimeNoChangeLightsMs() int64 {
	if x != nil && x.LastUserActivityTimeNoChangeLightsMs != nil {
		return *x.LastUserActivityTimeNoChangeLightsMs
	}
	return 0
}

func (x *PowerManagerServiceDumpProto_UserActivityProto) GetDisplayGroupId() int32 {
	if x != nil && x.DisplayGroupId != nil {
		return *x.DisplayGroupId
	}
	return 0
}

// A com.android.server.power.PowerManagerService.UidState object.
type PowerManagerServiceDumpProto_UidStateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          *int32                `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	UidString    *string               `protobuf:"bytes,2,opt,name=uid_string,json=uidString" json:"uid_string,omitempty"`
	IsActive     *bool                 `protobuf:"varint,3,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	NumWakeLocks *int32                `protobuf:"varint,4,opt,name=num_wake_locks,json=numWakeLocks" json:"num_wake_locks,omitempty"`
	ProcessState *app.ProcessStateEnum `protobuf:"varint,5,opt,name=process_state,json=processState,enum=android.app.ProcessStateEnum" json:"process_state,omitempty"`
}

func (x *PowerManagerServiceDumpProto_UidStateProto) Reset() {
	*x = PowerManagerServiceDumpProto_UidStateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerManagerServiceDumpProto_UidStateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerManagerServiceDumpProto_UidStateProto) ProtoMessage() {}

func (x *PowerManagerServiceDumpProto_UidStateProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerManagerServiceDumpProto_UidStateProto.ProtoReflect.Descriptor instead.
func (*PowerManagerServiceDumpProto_UidStateProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PowerManagerServiceDumpProto_UidStateProto) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PowerManagerServiceDumpProto_UidStateProto) GetUidString() string {
	if x != nil && x.UidString != nil {
		return *x.UidString
	}
	return ""
}

func (x *PowerManagerServiceDumpProto_UidStateProto) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *PowerManagerServiceDumpProto_UidStateProto) GetNumWakeLocks() int32 {
	if x != nil && x.NumWakeLocks != nil {
		return *x.NumWakeLocks
	}
	return 0
}

func (x *PowerManagerServiceDumpProto_UidStateProto) GetProcessState() app.ProcessStateEnum {
	if x != nil && x.ProcessState != nil {
		return *x.ProcessState
	}
	return app.ProcessStateEnum(998)
}

type WakeLockProto_WakeLockFlagsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Turn the screen on when the wake lock is acquired.
	IsAcquireCausesWakeup *bool `protobuf:"varint,1,opt,name=is_acquire_causes_wakeup,json=isAcquireCausesWakeup" json:"is_acquire_causes_wakeup,omitempty"`
	// When this wake lock is released, poke the user activity timer
	// so the screen stays on for a little longer.
	IsOnAfterRelease *bool `protobuf:"varint,2,opt,name=is_on_after_release,json=isOnAfterRelease" json:"is_on_after_release,omitempty"`
	// The wakelock is held by the system server on request by another app.
	SystemWakelock *bool `protobuf:"varint,3,opt,name=system_wakelock,json=systemWakelock" json:"system_wakelock,omitempty"`
}

func (x *WakeLockProto_WakeLockFlagsProto) Reset() {
	*x = WakeLockProto_WakeLockFlagsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeLockProto_WakeLockFlagsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeLockProto_WakeLockFlagsProto) ProtoMessage() {}

func (x *WakeLockProto_WakeLockFlagsProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeLockProto_WakeLockFlagsProto.ProtoReflect.Descriptor instead.
func (*WakeLockProto_WakeLockFlagsProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{2, 0}
}

func (x *WakeLockProto_WakeLockFlagsProto) GetIsAcquireCausesWakeup() bool {
	if x != nil && x.IsAcquireCausesWakeup != nil {
		return *x.IsAcquireCausesWakeup
	}
	return false
}

func (x *WakeLockProto_WakeLockFlagsProto) GetIsOnAfterRelease() bool {
	if x != nil && x.IsOnAfterRelease != nil {
		return *x.IsOnAfterRelease
	}
	return false
}

func (x *WakeLockProto_WakeLockFlagsProto) GetSystemWakelock() bool {
	if x != nil && x.SystemWakelock != nil {
		return *x.SystemWakelock
	}
	return false
}

type PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsStayOnWhilePluggedInAc       *bool `protobuf:"varint,1,opt,name=is_stay_on_while_plugged_in_ac,json=isStayOnWhilePluggedInAc" json:"is_stay_on_while_plugged_in_ac,omitempty"`
	IsStayOnWhilePluggedInUsb      *bool `protobuf:"varint,2,opt,name=is_stay_on_while_plugged_in_usb,json=isStayOnWhilePluggedInUsb" json:"is_stay_on_while_plugged_in_usb,omitempty"`
	IsStayOnWhilePluggedInWireless *bool `protobuf:"varint,3,opt,name=is_stay_on_while_plugged_in_wireless,json=isStayOnWhilePluggedInWireless" json:"is_stay_on_while_plugged_in_wireless,omitempty"`
	IsStayOnWhilePluggedInDock     *bool `protobuf:"varint,4,opt,name=is_stay_on_while_plugged_in_dock,json=isStayOnWhilePluggedInDock" json:"is_stay_on_while_plugged_in_dock,omitempty"`
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) Reset() {
	*x = PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) ProtoMessage() {}

func (x *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto.ProtoReflect.Descriptor instead.
func (*PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) GetIsStayOnWhilePluggedInAc() bool {
	if x != nil && x.IsStayOnWhilePluggedInAc != nil {
		return *x.IsStayOnWhilePluggedInAc
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) GetIsStayOnWhilePluggedInUsb() bool {
	if x != nil && x.IsStayOnWhilePluggedInUsb != nil {
		return *x.IsStayOnWhilePluggedInUsb
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) GetIsStayOnWhilePluggedInWireless() bool {
	if x != nil && x.IsStayOnWhilePluggedInWireless != nil {
		return *x.IsStayOnWhilePluggedInWireless
	}
	return false
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto) GetIsStayOnWhilePluggedInDock() bool {
	if x != nil && x.IsStayOnWhilePluggedInDock != nil {
		return *x.IsStayOnWhilePluggedInDock
	}
	return false
}

type PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SettingMinimumFloat *float32 `protobuf:"fixed32,4,opt,name=setting_minimum_float,json=settingMinimumFloat" json:"setting_minimum_float,omitempty"`
	SettingMaximumFloat *float32 `protobuf:"fixed32,5,opt,name=setting_maximum_float,json=settingMaximumFloat" json:"setting_maximum_float,omitempty"`
	SettingDefaultFloat *float32 `protobuf:"fixed32,6,opt,name=setting_default_float,json=settingDefaultFloat" json:"setting_default_float,omitempty"`
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) Reset() {
	*x = PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) ProtoMessage() {
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto.ProtoReflect.Descriptor instead.
func (*PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP(), []int{3, 1}
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) GetSettingMinimumFloat() float32 {
	if x != nil && x.SettingMinimumFloat != nil {
		return *x.SettingMinimumFloat
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) GetSettingMaximumFloat() float32 {
	if x != nil && x.SettingMaximumFloat != nil {
		return *x.SettingMaximumFloat
	}
	return 0
}

func (x *PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto) GetSettingDefaultFloat() float32 {
	if x != nil && x.SettingDefaultFloat != nil {
		return *x.SettingDefaultFloat
	}
	return 0
}

var File_frameworks_base_core_proto_android_server_powermanagerservice_proto protoreflect.FileDescriptor

var file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDesc = []byte{
	0x0a, 0x43, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x1a,
	0x37, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x6f, 0x73, 0x2f,
	0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2f, 0x6f, 0x73, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x6f, 0x73, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2f, 0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x35, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x26, 0x0a, 0x1c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x75, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x69, 0x72, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0b, 0x77, 0x61, 0x6b, 0x65, 0x66, 0x75, 0x6c, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x61, 0x6b, 0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x77, 0x61,
	0x6b, 0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x77, 0x61, 0x6b, 0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x57, 0x61,
	0x6b, 0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6f, 0x73,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x20, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x57,
	0x68, 0x65, 0x6e, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x79, 0x5f, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74,
	0x61, 0x79, 0x4f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x6d, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x45, 0x0a, 0x20,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x48, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x24, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1f, 0x69, 0x73, 0x48, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x77, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x61, 0x6b,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x6d, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6b, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x4d, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c,
	0x6f, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x73, 0x12,
	0x38, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x6f, 0x6e, 0x67, 0x4e, 0x65,
	0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x73, 0x12, 0x6d, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x75, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x26, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69,
	0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x73, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x53, 0x61, 0x6e,
	0x64, 0x6d, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x73, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x61,
	0x6e, 0x64, 0x6d, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x6f, 0x77, 0x12, 0x38,
	0x0a, 0x19, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x6c, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x65, 0x65,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x12, 0x5d, 0x0a, 0x2b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4e,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4d, 0x73, 0x12,
	0x4b, 0x0a, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x4d, 0x0a, 0x24,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x51, 0x0a, 0x26, 0x69,
	0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x4d, 0x0a, 0x24, 0x69, 0x73, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x22, 0x69, 0x73, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x18, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x44, 0x69, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x72, 0x65, 0x55, 0x69, 0x64,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x72, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x72, 0x65, 0x55, 0x69, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x0a, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x75,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x70,
	0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0a, 0x77, 0x61, 0x6b,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x77, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x19, 0x77,
	0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x17, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x76, 0x0a, 0x1b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x18, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x11, 0x52, 0x12, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x12, 0x5d, 0x0a, 0x2c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x27, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12,
	0x60, 0x0a, 0x2d, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x69, 0x73, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x7d, 0x0a, 0x1c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x2e, 0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x19, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x24, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x1a, 0x51,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x34, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x4e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x6b,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x1a, 0xbd, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x6b, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x43, 0x70,
	0x75, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x69, 0x6d, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x6f, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x61, 0x77, 0x61, 0x6b,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x74, 0x61, 0x79, 0x41,
	0x77, 0x61, 0x6b, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x6f, 0x7a, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x44, 0x72, 0x61, 0x77, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x1a, 0xd5, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64,
	0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x44, 0x69, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a,
	0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x59, 0x0a, 0x2b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x24,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x3a, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x1a, 0xd2, 0x01, 0x0a, 0x0d, 0x55, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d,
	0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x42, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x3a, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x22, 0x5d, 0x0a, 0x13, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x22, 0xb3, 0x04, 0x0a, 0x0d, 0x57, 0x61, 0x6b,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6f, 0x73, 0x2e, 0x57, 0x61, 0x6b, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x50, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x63, 0x71, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x63, 0x71, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0xb0, 0x01, 0x0a, 0x12, 0x57, 0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x6b,
	0x65, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x73, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x4f, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x57, 0x61, 0x6b, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x22, 0xd8,
	0x20, 0x0a, 0x2d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6c, 0x0a, 0x35, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x2d, 0x69, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x48, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b,
	0x0a, 0x34, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x68, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x69, 0x73,
	0x44, 0x65, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x48, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x2b, 0x69,
	0x73, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x67, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x24, 0x69, 0x73, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x6c,
	0x75, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x72, 0x55, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x76, 0x0a, 0x3b, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x6b,
	0x65, 0x5f, 0x75, 0x70, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65,
	0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x31, 0x69, 0x73, 0x57,
	0x61, 0x6b, 0x65, 0x55, 0x70, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64,
	0x4f, 0x72, 0x55, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x73, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x32, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69,
	0x6d, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2a, 0x69, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x57, 0x68, 0x65, 0x6e,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x50, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a,
	0x1b, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x61, 0x72, 0x65, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x24,
	0x61, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x61, 0x72, 0x65, 0x44,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x2f, 0x61,
	0x72, 0x65, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x61, 0x72, 0x65, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x42,
	0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f,
	0x0a, 0x2e, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x62,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x61, 0x72, 0x65, 0x44, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x44, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4d, 0x0a, 0x24, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x61,
	0x72, 0x65, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4f,
	0x6e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64,
	0x0a, 0x30, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x2a, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x34, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x2d, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x57, 0x68, 0x65,
	0x6e, 0x4e, 0x6f, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x55, 0x0a, 0x28, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x23, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x72, 0x65, 0x5f,
	0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x72,
	0x65, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x24, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x61, 0x72, 0x65, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x23, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x61, 0x72, 0x65, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x44, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x43, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x7a, 0x65, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x44, 0x6f,
	0x7a, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a, 0x24, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x73, 0x12, 0x4f, 0x0a, 0x25, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x44, 0x69, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x69,
	0x6d, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1d,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x15, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x61, 0x0a, 0x2f, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x28, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f,
	0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x73, 0x12, 0x7f, 0x0a, 0x3f, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x36, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x18,
	0x73, 0x74, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x79, 0x4f, 0x6e, 0x57, 0x68,
	0x69, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x73, 0x74, 0x61, 0x79, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x1b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a,
	0x2e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x29, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x6d, 0x0a, 0x35, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4d, 0x73, 0x12,
	0x5e, 0x0a, 0x2d, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x7e, 0x0a, 0x2d, 0x64, 0x6f, 0x7a, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x27, 0x64, 0x6f, 0x7a, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x6a, 0x0a, 0x33, 0x64, 0x6f, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2d, 0x64, 0x6f,
	0x7a, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x20,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x1d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x61, 0x70, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x70, 0x57, 0x61, 0x6b, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x76, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x56, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x6b,
	0x69, 0x63, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x64, 0x72, 0x61, 0x77, 0x57,
	0x61, 0x6b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x6b, 0x69, 0x63, 0x6b, 0x12, 0x3f, 0x0a, 0x1c, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x19, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x12, 0x3d, 0x0a, 0x1b,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x18, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x11, 0x52, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x1a, 0xc0, 0x02, 0x0a, 0x19,
	0x53, 0x74, 0x61, 0x79, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x65, 0x64, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x40, 0x0a, 0x1e, 0x69, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x69, 0x73, 0x53, 0x74, 0x61, 0x79, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x6c, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x63, 0x12, 0x42, 0x0a, 0x1f, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x53, 0x74, 0x61, 0x79, 0x4f, 0x6e, 0x57, 0x68,
	0x69, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x62, 0x12,
	0x4c, 0x0a, 0x24, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x77, 0x68,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x79, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a,
	0x20, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x53, 0x74, 0x61, 0x79, 0x4f,
	0x6e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x44,
	0x6f, 0x63, 0x6b, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x1a, 0xdd,
	0x01, 0x0a, 0x22, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x3a, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x22, 0x91, 0x0d, 0x0a, 0x1d, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x49, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62,
	0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x6f, 0x77, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53,
	0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x17, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x12, 0x54, 0x0a, 0x27, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x66, 0x0a, 0x31,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x33, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x70, 0x0a, 0x36, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x30, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a,
	0x19, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x53, 0x61, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x98, 0x01, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43,
	0x5f, 0x53, 0x4e, 0x4f, 0x4f, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x49, 0x43,
	0x4b, 0x59, 0x5f, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0x43, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x3a, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xbb, 0x04,
	0x0a, 0x22, 0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x62, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x64, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x2e, 0x4c, 0x6f,
	0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x22, 0xc4, 0x01, 0x0a, 0x1a,
	0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x3a, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x42, 0x02, 0x50, 0x01,
}

var (
	file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescOnce sync.Once
	file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescData = file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDesc
)

func file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescGZIP() []byte {
	file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescOnce.Do(func() {
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescData)
	})
	return file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDescData
}

var file_frameworks_base_core_proto_android_server_powermanagerservice_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_frameworks_base_core_proto_android_server_powermanagerservice_proto_goTypes = []any{
	(BatterySaverStateMachineProto_StateEnum)(0),                                             // 0: com.android.server.power.BatterySaverStateMachineProto.StateEnum
	(BatterySaverStateMachineProto_AutomaticTriggerEnum)(0),                                  // 1: com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum
	(*PowerManagerServiceDumpProto)(nil),                                                     // 2: com.android.server.power.PowerManagerServiceDumpProto
	(*SuspendBlockerProto)(nil),                                                              // 3: com.android.server.power.SuspendBlockerProto
	(*WakeLockProto)(nil),                                                                    // 4: com.android.server.power.WakeLockProto
	(*PowerServiceSettingsAndConfigurationDumpProto)(nil),                                    // 5: com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto
	(*BatterySaverStateMachineProto)(nil),                                                    // 6: com.android.server.power.BatterySaverStateMachineProto
	(*LowPowerStandbyControllerDumpProto)(nil),                                               // 7: com.android.server.power.LowPowerStandbyControllerDumpProto
	(*LowPowerStandbyPolicyProto)(nil),                                                       // 8: com.android.server.power.LowPowerStandbyPolicyProto
	(*PowerManagerServiceDumpProto_ConstantsProto)(nil),                                      // 9: com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto
	(*PowerManagerServiceDumpProto_ActiveWakeLocksProto)(nil),                                // 10: com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto
	(*PowerManagerServiceDumpProto_UserActivityProto)(nil),                                   // 11: com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto
	(*PowerManagerServiceDumpProto_UidStateProto)(nil),                                       // 12: com.android.server.power.PowerManagerServiceDumpProto.UidStateProto
	(*WakeLockProto_WakeLockFlagsProto)(nil),                                                 // 13: com.android.server.power.WakeLockProto.WakeLockFlagsProto
	(*PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto)(nil),          // 14: com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto
	(*PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto)(nil), // 15: com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto
	(os.PowerManagerInternalProto_Wakefulness)(0),                                            // 16: android.os.PowerManagerInternalProto.Wakefulness
	(os1.BatteryPluggedStateEnum)(0),                                                         // 17: android.os.BatteryPluggedStateEnum
	(content.IntentProto_DockState)(0),                                                       // 18: android.content.IntentProto.DockState
	(*os.LooperProto)(nil),                                                                   // 19: android.os.LooperProto
	(*WirelessChargerDetectorProto)(nil),                                                     // 20: com.android.server.power.WirelessChargerDetectorProto
	(os1.WakeLockLevelEnum)(0),                                                               // 21: android.os.WakeLockLevelEnum
	(*os.WorkSourceProto)(nil),                                                               // 22: android.os.WorkSourceProto
	(providers.SettingsProto_ScreenBrightnessMode)(0),                                        // 23: android.providers.settings.SettingsProto.ScreenBrightnessMode
	(view.DisplayStateEnum)(0),                                                               // 24: android.view.DisplayStateEnum
	(app.ProcessStateEnum)(0),                                                                // 25: android.app.ProcessStateEnum
}
var file_frameworks_base_core_proto_android_server_powermanagerservice_proto_depIdxs = []int32{
	9,  // 0: com.android.server.power.PowerManagerServiceDumpProto.constants:type_name -> com.android.server.power.PowerManagerServiceDumpProto.ConstantsProto
	16, // 1: com.android.server.power.PowerManagerServiceDumpProto.wakefulness:type_name -> android.os.PowerManagerInternalProto.Wakefulness
	17, // 2: com.android.server.power.PowerManagerServiceDumpProto.plug_type:type_name -> android.os.BatteryPluggedStateEnum
	18, // 3: com.android.server.power.PowerManagerServiceDumpProto.dock_state:type_name -> android.content.IntentProto.DockState
	10, // 4: com.android.server.power.PowerManagerServiceDumpProto.active_wake_locks:type_name -> com.android.server.power.PowerManagerServiceDumpProto.ActiveWakeLocksProto
	11, // 5: com.android.server.power.PowerManagerServiceDumpProto.user_activity:type_name -> com.android.server.power.PowerManagerServiceDumpProto.UserActivityProto
	5,  // 6: com.android.server.power.PowerManagerServiceDumpProto.settings_and_configuration:type_name -> com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto
	12, // 7: com.android.server.power.PowerManagerServiceDumpProto.uid_states:type_name -> com.android.server.power.PowerManagerServiceDumpProto.UidStateProto
	19, // 8: com.android.server.power.PowerManagerServiceDumpProto.looper:type_name -> android.os.LooperProto
	4,  // 9: com.android.server.power.PowerManagerServiceDumpProto.wake_locks:type_name -> com.android.server.power.WakeLockProto
	3,  // 10: com.android.server.power.PowerManagerServiceDumpProto.suspend_blockers:type_name -> com.android.server.power.SuspendBlockerProto
	20, // 11: com.android.server.power.PowerManagerServiceDumpProto.wireless_charger_detector:type_name -> com.android.server.power.WirelessChargerDetectorProto
	6,  // 12: com.android.server.power.PowerManagerServiceDumpProto.battery_saver_state_machine:type_name -> com.android.server.power.BatterySaverStateMachineProto
	7,  // 13: com.android.server.power.PowerManagerServiceDumpProto.low_power_standby_controller:type_name -> com.android.server.power.LowPowerStandbyControllerDumpProto
	21, // 14: com.android.server.power.WakeLockProto.lock_level:type_name -> android.os.WakeLockLevelEnum
	13, // 15: com.android.server.power.WakeLockProto.flags:type_name -> com.android.server.power.WakeLockProto.WakeLockFlagsProto
	22, // 16: com.android.server.power.WakeLockProto.work_source:type_name -> android.os.WorkSourceProto
	14, // 17: com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.stay_on_while_plugged_in:type_name -> com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.StayOnWhilePluggedInProto
	23, // 18: com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_mode_setting:type_name -> android.providers.settings.SettingsProto.ScreenBrightnessMode
	24, // 19: com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.doze_screen_state_override_from_dream_manager:type_name -> android.view.DisplayStateEnum
	15, // 20: com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.screen_brightness_setting_limits:type_name -> com.android.server.power.PowerServiceSettingsAndConfigurationDumpProto.ScreenBrightnessSettingLimitsProto
	0,  // 21: com.android.server.power.BatterySaverStateMachineProto.state:type_name -> com.android.server.power.BatterySaverStateMachineProto.StateEnum
	1,  // 22: com.android.server.power.BatterySaverStateMachineProto.setting_automatic_trigger:type_name -> com.android.server.power.BatterySaverStateMachineProto.AutomaticTriggerEnum
	8,  // 23: com.android.server.power.LowPowerStandbyControllerDumpProto.policy:type_name -> com.android.server.power.LowPowerStandbyPolicyProto
	25, // 24: com.android.server.power.PowerManagerServiceDumpProto.UidStateProto.process_state:type_name -> android.app.ProcessStateEnum
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_frameworks_base_core_proto_android_server_powermanagerservice_proto_init() }
func file_frameworks_base_core_proto_android_server_powermanagerservice_proto_init() {
	if File_frameworks_base_core_proto_android_server_powermanagerservice_proto != nil {
		return
	}
	file_frameworks_base_core_proto_android_server_wirelesschargerdetector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PowerManagerServiceDumpProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SuspendBlockerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*WakeLockProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PowerServiceSettingsAndConfigurationDumpProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatterySaverStateMachineProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LowPowerStandbyControllerDumpProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*LowPowerStandbyPolicyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PowerManagerServiceDumpProto_ConstantsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PowerManagerServiceDumpProto_ActiveWakeLocksProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PowerManagerServiceDumpProto_UserActivityProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PowerManagerServiceDumpProto_UidStateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*WakeLockProto_WakeLockFlagsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PowerServiceSettingsAndConfigurationDumpProto_StayOnWhilePluggedInProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PowerServiceSettingsAndConfigurationDumpProto_ScreenBrightnessSettingLimitsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_frameworks_base_core_proto_android_server_powermanagerservice_proto_goTypes,
		DependencyIndexes: file_frameworks_base_core_proto_android_server_powermanagerservice_proto_depIdxs,
		EnumInfos:         file_frameworks_base_core_proto_android_server_powermanagerservice_proto_enumTypes,
		MessageInfos:      file_frameworks_base_core_proto_android_server_powermanagerservice_proto_msgTypes,
	}.Build()
	File_frameworks_base_core_proto_android_server_powermanagerservice_proto = out.File
	file_frameworks_base_core_proto_android_server_powermanagerservice_proto_rawDesc = nil
	file_frameworks_base_core_proto_android_server_powermanagerservice_proto_goTypes = nil
	file_frameworks_base_core_proto_android_server_powermanagerservice_proto_depIdxs = nil
}
