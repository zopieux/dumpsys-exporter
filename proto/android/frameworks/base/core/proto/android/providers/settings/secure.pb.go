//
// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.4
// source: frameworks/base/core/proto/android/providers/settings/secure.proto

package settings

import (
	_ "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/base/core/proto/android"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Note: it's a conscious decision to add each setting as a separate field. This
// allows annotating each setting with its own privacy tag.
type SecureSettingsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoricalOperations []*SettingsOperationProto          `protobuf:"bytes,1,rep,name=historical_operations,json=historicalOperations" json:"historical_operations,omitempty"`
	Accessibility        *SecureSettingsProto_Accessibility `protobuf:"bytes,2,opt,name=accessibility" json:"accessibility,omitempty"`
	AdaptiveSleep        *SecureSettingsProto_AdaptiveSleep `protobuf:"bytes,78,opt,name=adaptive_sleep,json=adaptiveSleep" json:"adaptive_sleep,omitempty"`
	// Origins for which browsers should allow geolocation by default.
	// The value is a space-separated list of origins.
	AllowedGeolocationOrigins               *SettingProto                                `protobuf:"bytes,3,opt,name=allowed_geolocation_origins,json=allowedGeolocationOrigins" json:"allowed_geolocation_origins,omitempty"`
	AlwaysOnVpn                             *SecureSettingsProto_AlwaysOnVpn             `protobuf:"bytes,4,opt,name=always_on_vpn,json=alwaysOnVpn" json:"always_on_vpn,omitempty"`
	AndroidId                               *SettingProto                                `protobuf:"bytes,5,opt,name=android_id,json=androidId" json:"android_id,omitempty"`
	AnrShowBackground                       *SettingProto                                `protobuf:"bytes,6,opt,name=anr_show_background,json=anrShowBackground" json:"anr_show_background,omitempty"`
	Assist                                  *SecureSettingsProto_Assist                  `protobuf:"bytes,7,opt,name=assist" json:"assist,omitempty"`
	AssistHandles                           *SecureSettingsProto_AssistHandles           `protobuf:"bytes,86,opt,name=assist_handles,json=assistHandles" json:"assist_handles,omitempty"`
	Autofill                                *SecureSettingsProto_Autofill                `protobuf:"bytes,8,opt,name=autofill" json:"autofill,omitempty"`
	AutomaticStorageManager                 *SecureSettingsProto_AutomaticStorageManager `protobuf:"bytes,9,opt,name=automatic_storage_manager,json=automaticStorageManager" json:"automatic_storage_manager,omitempty"`
	Backup                                  *SecureSettingsProto_Backup                  `protobuf:"bytes,10,opt,name=backup" json:"backup,omitempty"`
	BluetoothOnWhileDriving                 *SettingProto                                `protobuf:"bytes,11,opt,name=bluetooth_on_while_driving,json=bluetoothOnWhileDriving" json:"bluetooth_on_while_driving,omitempty"`
	BugreportInPowerMenu                    *SettingProto                                `protobuf:"bytes,95,opt,name=bugreport_in_power_menu,json=bugreportInPowerMenu" json:"bugreport_in_power_menu,omitempty"`
	Camera                                  *SecureSettingsProto_Camera                  `protobuf:"bytes,12,opt,name=camera" json:"camera,omitempty"`
	CarrierAppsHandled                      *SettingProto                                `protobuf:"bytes,13,opt,name=carrier_apps_handled,json=carrierAppsHandled" json:"carrier_apps_handled,omitempty"`
	Clipboard                               *SecureSettingsProto_Clipboard               `protobuf:"bytes,89,opt,name=clipboard" json:"clipboard,omitempty"`
	CmasAdditionalBroadcastPkg              *SettingProto                                `protobuf:"bytes,14,opt,name=cmas_additional_broadcast_pkg,json=cmasAdditionalBroadcastPkg" json:"cmas_additional_broadcast_pkg,omitempty"`
	CompletedCategories                     []*SettingProto                              `protobuf:"bytes,15,rep,name=completed_categories,json=completedCategories" json:"completed_categories,omitempty"`
	ConnectivityReleasePendingIntentDelayMs *SettingProto                                `protobuf:"bytes,16,opt,name=connectivity_release_pending_intent_delay_ms,json=connectivityReleasePendingIntentDelayMs" json:"connectivity_release_pending_intent_delay_ms,omitempty"`
	AdaptiveConnectivityEnabled             *SettingProto                                `protobuf:"bytes,84,opt,name=adaptive_connectivity_enabled,json=adaptiveConnectivityEnabled" json:"adaptive_connectivity_enabled,omitempty"`
	Controls                                *SecureSettingsProto_Controls                `protobuf:"bytes,79,opt,name=controls" json:"controls,omitempty"`
	DevicePaired                            *SettingProto                                `protobuf:"bytes,17,opt,name=device_paired,json=devicePaired" json:"device_paired,omitempty"`
	DialerDefaultApplication                *SettingProto                                `protobuf:"bytes,18,opt,name=dialer_default_application,json=dialerDefaultApplication" json:"dialer_default_application,omitempty"`
	DisplayDensityForced                    *SettingProto                                `protobuf:"bytes,19,opt,name=display_density_forced,json=displayDensityForced" json:"display_density_forced,omitempty"`
	DoubleTapToWake                         *SettingProto                                `protobuf:"bytes,20,opt,name=double_tap_to_wake,json=doubleTapToWake" json:"double_tap_to_wake,omitempty"`
	DateTime                                *SecureSettingsProto_DateTime                `protobuf:"bytes,90,opt,name=date_time,json=dateTime" json:"date_time,omitempty"`
	Doze                                    *SecureSettingsProto_Doze                    `protobuf:"bytes,21,opt,name=doze" json:"doze,omitempty"`
	EmergencyAssistanceApplication          *SettingProto                                `protobuf:"bytes,22,opt,name=emergency_assistance_application,json=emergencyAssistanceApplication" json:"emergency_assistance_application,omitempty"`
	EmergencyResponse                       *SecureSettingsProto_EmergencyResponse       `protobuf:"bytes,83,opt,name=emergency_response,json=emergencyResponse" json:"emergency_response,omitempty"`
	EnhancedVoicePrivacyEnabled             *SettingProto                                `protobuf:"bytes,23,opt,name=enhanced_voice_privacy_enabled,json=enhancedVoicePrivacyEnabled" json:"enhanced_voice_privacy_enabled,omitempty"`
	EvenDimmer                              *SecureSettingsProto_EvenDimmer              `protobuf:"bytes,98,opt,name=even_dimmer,json=evenDimmer" json:"even_dimmer,omitempty"`
	FontWeightAdjustment                    *SettingProto                                `protobuf:"bytes,85,opt,name=font_weight_adjustment,json=fontWeightAdjustment" json:"font_weight_adjustment,omitempty"`
	Gesture                                 *SecureSettingsProto_Gesture                 `protobuf:"bytes,74,opt,name=gesture" json:"gesture,omitempty"`
	GestureNavigation                       *SecureSettingsProto_GestureNavigation       `protobuf:"bytes,77,opt,name=gesture_navigation,json=gestureNavigation" json:"gesture_navigation,omitempty"`
	ImmersiveModeConfirmations              *SettingProto                                `protobuf:"bytes,24,opt,name=immersive_mode_confirmations,json=immersiveModeConfirmations" json:"immersive_mode_confirmations,omitempty"`
	Incall                                  *SecureSettingsProto_Incall                  `protobuf:"bytes,25,opt,name=incall" json:"incall,omitempty"`
	InputMethods                            *SecureSettingsProto_InputMethods            `protobuf:"bytes,26,opt,name=input_methods,json=inputMethods" json:"input_methods,omitempty"`
	InstallNonMarketApps                    *SettingProto                                `protobuf:"bytes,27,opt,name=install_non_market_apps,json=installNonMarketApps" json:"install_non_market_apps,omitempty"`
	InstantAppsEnabled                      *SettingProto                                `protobuf:"bytes,28,opt,name=instant_apps_enabled,json=instantAppsEnabled" json:"instant_apps_enabled,omitempty"`
	// Uri of the slice that's presented on the keyguard. Defaults to a slice
	// with the date and next alarm.
	KeyguardSliceUri    *SettingProto                            `protobuf:"bytes,29,opt,name=keyguard_slice_uri,json=keyguardSliceUri" json:"keyguard_slice_uri,omitempty"`
	LastSetupShown      *SettingProto                            `protobuf:"bytes,30,opt,name=last_setup_shown,json=lastSetupShown" json:"last_setup_shown,omitempty"`
	Launcher            *SecureSettingsProto_Launcher            `protobuf:"bytes,70,opt,name=launcher" json:"launcher,omitempty"`
	Location            *SecureSettingsProto_Location            `protobuf:"bytes,31,opt,name=location" json:"location,omitempty"`
	LocationAccessCheck *SecureSettingsProto_LocationAccessCheck `protobuf:"bytes,73,opt,name=location_access_check,json=locationAccessCheck" json:"location_access_check,omitempty"`
	LockScreen          *SecureSettingsProto_LockScreen          `protobuf:"bytes,32,opt,name=lock_screen,json=lockScreen" json:"lock_screen,omitempty"`
	// Whether lock-to-app will lock the keyguard when exiting.
	LockToAppExitLocked *SettingProto                           `protobuf:"bytes,33,opt,name=lock_to_app_exit_locked,json=lockToAppExitLocked" json:"lock_to_app_exit_locked,omitempty"`
	LockdownInPowerMenu *SettingProto                           `protobuf:"bytes,34,opt,name=lockdown_in_power_menu,json=lockdownInPowerMenu" json:"lockdown_in_power_menu,omitempty"`
	LongPressTimeout    *SettingProto                           `protobuf:"bytes,35,opt,name=long_press_timeout,json=longPressTimeout" json:"long_press_timeout,omitempty"`
	KeyPressTimeoutMs   *SettingProto                           `protobuf:"bytes,96,opt,name=key_press_timeout_ms,json=keyPressTimeoutMs" json:"key_press_timeout_ms,omitempty"`
	KeyPressDelayMs     *SettingProto                           `protobuf:"bytes,97,opt,name=key_press_delay_ms,json=keyPressDelayMs" json:"key_press_delay_ms,omitempty"`
	ManagedProfile      *SecureSettingsProto_ManagedProfile     `protobuf:"bytes,36,opt,name=managed_profile,json=managedProfile" json:"managed_profile,omitempty"`
	Mount               *SecureSettingsProto_Mount              `protobuf:"bytes,37,opt,name=mount" json:"mount,omitempty"`
	MultiPressTimeout   *SettingProto                           `protobuf:"bytes,38,opt,name=multi_press_timeout,json=multiPressTimeout" json:"multi_press_timeout,omitempty"`
	NavBar              *SecureSettingsProto_NavBar             `protobuf:"bytes,92,opt,name=nav_bar,json=navBar" json:"nav_bar,omitempty"`
	NavigationMode      *SettingProto                           `protobuf:"bytes,76,opt,name=navigation_mode,json=navigationMode" json:"navigation_mode,omitempty"`
	NfcPayment          *SecureSettingsProto_NfcPayment         `protobuf:"bytes,39,opt,name=nfc_payment,json=nfcPayment" json:"nfc_payment,omitempty"`
	NightDisplay        *SecureSettingsProto_NightDisplay       `protobuf:"bytes,40,opt,name=night_display,json=nightDisplay" json:"night_display,omitempty"`
	Notification        *SecureSettingsProto_Notification       `protobuf:"bytes,41,opt,name=notification" json:"notification,omitempty"`
	Onehanded           *SecureSettingsProto_OneHanded          `protobuf:"bytes,80,opt,name=onehanded" json:"onehanded,omitempty"`
	PackageVerifier     *SecureSettingsProto_PackageVerifier    `protobuf:"bytes,42,opt,name=package_verifier,json=packageVerifier" json:"package_verifier,omitempty"`
	ParentalControl     *SecureSettingsProto_ParentalControl    `protobuf:"bytes,43,opt,name=parental_control,json=parentalControl" json:"parental_control,omitempty"`
	PowerMenuPrivacy    *SecureSettingsProto_PowerMenuPrivacy   `protobuf:"bytes,81,opt,name=power_menu_privacy,json=powerMenuPrivacy" json:"power_menu_privacy,omitempty"`
	ExtraLowPowerMode   *SecureSettingsProto_ExtraLowPowerMode  `protobuf:"bytes,93,opt,name=extra_low_power_mode,json=extraLowPowerMode" json:"extra_low_power_mode,omitempty"`
	PrintService        *SecureSettingsProto_PrintService       `protobuf:"bytes,44,opt,name=print_service,json=printService" json:"print_service,omitempty"`
	Qs                  *SecureSettingsProto_QuickSettings      `protobuf:"bytes,45,opt,name=qs" json:"qs,omitempty"`
	ReduceBrightColors  *SecureSettingsProto_ReduceBrightColors `protobuf:"bytes,87,opt,name=reduce_bright_colors,json=reduceBrightColors" json:"reduce_bright_colors,omitempty"`
	Rotation            *SecureSettingsProto_Rotation           `protobuf:"bytes,46,opt,name=rotation" json:"rotation,omitempty"`
	// User-selected RTT mode. When on, outgoing and incoming calls will be
	// answered as RTT calls when supported by the device and carrier. Boolean
	// value.
	RttCallingMode                   *SettingProto                         `protobuf:"bytes,69,opt,name=rtt_calling_mode,json=rttCallingMode" json:"rtt_calling_mode,omitempty"`
	Screensaver                      *SecureSettingsProto_Screensaver      `protobuf:"bytes,47,opt,name=screensaver" json:"screensaver,omitempty"`
	Search                           *SecureSettingsProto_Search           `protobuf:"bytes,48,opt,name=search" json:"search,omitempty"`
	CameraAutorotate                 *SecureSettingsProto_CameraAutorotate `protobuf:"bytes,88,opt,name=camera_autorotate,json=cameraAutorotate" json:"camera_autorotate,omitempty"`
	SpellChecker                     *SecureSettingsProto_SpellChecker     `protobuf:"bytes,49,opt,name=spell_checker,json=spellChecker" json:"spell_checker,omitempty"`
	SettingsClassname                *SettingProto                         `protobuf:"bytes,50,opt,name=settings_classname,json=settingsClassname" json:"settings_classname,omitempty"`
	ShowFirstCrashDialogDevOption    *SettingProto                         `protobuf:"bytes,51,opt,name=show_first_crash_dialog_dev_option,json=showFirstCrashDialogDevOption" json:"show_first_crash_dialog_dev_option,omitempty"`
	SkipFirstUseHints                *SettingProto                         `protobuf:"bytes,52,opt,name=skip_first_use_hints,json=skipFirstUseHints" json:"skip_first_use_hints,omitempty"`
	SleepTimeout                     *SettingProto                         `protobuf:"bytes,53,opt,name=sleep_timeout,json=sleepTimeout" json:"sleep_timeout,omitempty"`
	SmsDefaultApplication            *SettingProto                         `protobuf:"bytes,54,opt,name=sms_default_application,json=smsDefaultApplication" json:"sms_default_application,omitempty"`
	Sounds                           *SecureSettingsProto_Sounds           `protobuf:"bytes,72,opt,name=sounds" json:"sounds,omitempty"`
	StylusPointerIconEnabled         *SettingProto                         `protobuf:"bytes,99,opt,name=stylus_pointer_icon_enabled,json=stylusPointerIconEnabled" json:"stylus_pointer_icon_enabled,omitempty"`
	SwipeBottomToNotificationEnabled *SettingProto                         `protobuf:"bytes,82,opt,name=swipe_bottom_to_notification_enabled,json=swipeBottomToNotificationEnabled" json:"swipe_bottom_to_notification_enabled,omitempty"`
	// Defines whether managed profile ringtones should be synced from its
	// parent profile.
	SyncParentSounds                  *SettingProto                        `protobuf:"bytes,55,opt,name=sync_parent_sounds,json=syncParentSounds" json:"sync_parent_sounds,omitempty"`
	SystemNavigationKeysEnabled       *SettingProto                        `protobuf:"bytes,56,opt,name=system_navigation_keys_enabled,json=systemNavigationKeysEnabled" json:"system_navigation_keys_enabled,omitempty"`
	ThemeCustomizationOverlayPackages *SettingProto                        `protobuf:"bytes,75,opt,name=theme_customization_overlay_packages,json=themeCustomizationOverlayPackages" json:"theme_customization_overlay_packages,omitempty"`
	TrustAgentsInitialized            *SettingProto                        `protobuf:"bytes,57,opt,name=trust_agents_initialized,json=trustAgentsInitialized" json:"trust_agents_initialized,omitempty"`
	TrackpadGesture                   *SecureSettingsProto_TrackpadGesture `protobuf:"bytes,94,opt,name=trackpad_gesture,json=trackpadGesture" json:"trackpad_gesture,omitempty"`
	Tts                               *SecureSettingsProto_Tts             `protobuf:"bytes,58,opt,name=tts" json:"tts,omitempty"`
	Tty                               *SecureSettingsProto_Tty             `protobuf:"bytes,59,opt,name=tty" json:"tty,omitempty"`
	Tv                                *SecureSettingsProto_Tv              `protobuf:"bytes,60,opt,name=tv" json:"tv,omitempty"`
	UiNightMode                       *SettingProto                        `protobuf:"bytes,61,opt,name=ui_night_mode,json=uiNightMode" json:"ui_night_mode,omitempty"`
	UnknownSourcesDefaultReversed     *SettingProto                        `protobuf:"bytes,62,opt,name=unknown_sources_default_reversed,json=unknownSourcesDefaultReversed" json:"unknown_sources_default_reversed,omitempty"`
	UsbAudioAutomaticRoutingDisabled  *SettingProto                        `protobuf:"bytes,63,opt,name=usb_audio_automatic_routing_disabled,json=usbAudioAutomaticRoutingDisabled" json:"usb_audio_automatic_routing_disabled,omitempty"`
	// Whether the current user has been set up via setup wizard (0 = false, 1 = true)
	UserSetupComplete  *SettingProto               `protobuf:"bytes,64,opt,name=user_setup_complete,json=userSetupComplete" json:"user_setup_complete,omitempty"`
	Voice              *SecureSettingsProto_Voice  `protobuf:"bytes,65,opt,name=voice" json:"voice,omitempty"`
	Volume             *SecureSettingsProto_Volume `protobuf:"bytes,66,opt,name=volume" json:"volume,omitempty"`
	Vr                 *SecureSettingsProto_Vr     `protobuf:"bytes,67,opt,name=vr" json:"vr,omitempty"`
	WakeGestureEnabled *SettingProto               `protobuf:"bytes,68,opt,name=wake_gesture_enabled,json=wakeGestureEnabled" json:"wake_gesture_enabled,omitempty"`
	Zen                *SecureSettingsProto_Zen    `protobuf:"bytes,71,opt,name=zen" json:"zen,omitempty"`
}

func (x *SecureSettingsProto) Reset() {
	*x = SecureSettingsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto) ProtoMessage() {}

func (x *SecureSettingsProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0}
}

func (x *SecureSettingsProto) GetHistoricalOperations() []*SettingsOperationProto {
	if x != nil {
		return x.HistoricalOperations
	}
	return nil
}

func (x *SecureSettingsProto) GetAccessibility() *SecureSettingsProto_Accessibility {
	if x != nil {
		return x.Accessibility
	}
	return nil
}

func (x *SecureSettingsProto) GetAdaptiveSleep() *SecureSettingsProto_AdaptiveSleep {
	if x != nil {
		return x.AdaptiveSleep
	}
	return nil
}

func (x *SecureSettingsProto) GetAllowedGeolocationOrigins() *SettingProto {
	if x != nil {
		return x.AllowedGeolocationOrigins
	}
	return nil
}

func (x *SecureSettingsProto) GetAlwaysOnVpn() *SecureSettingsProto_AlwaysOnVpn {
	if x != nil {
		return x.AlwaysOnVpn
	}
	return nil
}

func (x *SecureSettingsProto) GetAndroidId() *SettingProto {
	if x != nil {
		return x.AndroidId
	}
	return nil
}

func (x *SecureSettingsProto) GetAnrShowBackground() *SettingProto {
	if x != nil {
		return x.AnrShowBackground
	}
	return nil
}

func (x *SecureSettingsProto) GetAssist() *SecureSettingsProto_Assist {
	if x != nil {
		return x.Assist
	}
	return nil
}

func (x *SecureSettingsProto) GetAssistHandles() *SecureSettingsProto_AssistHandles {
	if x != nil {
		return x.AssistHandles
	}
	return nil
}

func (x *SecureSettingsProto) GetAutofill() *SecureSettingsProto_Autofill {
	if x != nil {
		return x.Autofill
	}
	return nil
}

func (x *SecureSettingsProto) GetAutomaticStorageManager() *SecureSettingsProto_AutomaticStorageManager {
	if x != nil {
		return x.AutomaticStorageManager
	}
	return nil
}

func (x *SecureSettingsProto) GetBackup() *SecureSettingsProto_Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

func (x *SecureSettingsProto) GetBluetoothOnWhileDriving() *SettingProto {
	if x != nil {
		return x.BluetoothOnWhileDriving
	}
	return nil
}

func (x *SecureSettingsProto) GetBugreportInPowerMenu() *SettingProto {
	if x != nil {
		return x.BugreportInPowerMenu
	}
	return nil
}

func (x *SecureSettingsProto) GetCamera() *SecureSettingsProto_Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *SecureSettingsProto) GetCarrierAppsHandled() *SettingProto {
	if x != nil {
		return x.CarrierAppsHandled
	}
	return nil
}

func (x *SecureSettingsProto) GetClipboard() *SecureSettingsProto_Clipboard {
	if x != nil {
		return x.Clipboard
	}
	return nil
}

func (x *SecureSettingsProto) GetCmasAdditionalBroadcastPkg() *SettingProto {
	if x != nil {
		return x.CmasAdditionalBroadcastPkg
	}
	return nil
}

func (x *SecureSettingsProto) GetCompletedCategories() []*SettingProto {
	if x != nil {
		return x.CompletedCategories
	}
	return nil
}

func (x *SecureSettingsProto) GetConnectivityReleasePendingIntentDelayMs() *SettingProto {
	if x != nil {
		return x.ConnectivityReleasePendingIntentDelayMs
	}
	return nil
}

func (x *SecureSettingsProto) GetAdaptiveConnectivityEnabled() *SettingProto {
	if x != nil {
		return x.AdaptiveConnectivityEnabled
	}
	return nil
}

func (x *SecureSettingsProto) GetControls() *SecureSettingsProto_Controls {
	if x != nil {
		return x.Controls
	}
	return nil
}

func (x *SecureSettingsProto) GetDevicePaired() *SettingProto {
	if x != nil {
		return x.DevicePaired
	}
	return nil
}

func (x *SecureSettingsProto) GetDialerDefaultApplication() *SettingProto {
	if x != nil {
		return x.DialerDefaultApplication
	}
	return nil
}

func (x *SecureSettingsProto) GetDisplayDensityForced() *SettingProto {
	if x != nil {
		return x.DisplayDensityForced
	}
	return nil
}

func (x *SecureSettingsProto) GetDoubleTapToWake() *SettingProto {
	if x != nil {
		return x.DoubleTapToWake
	}
	return nil
}

func (x *SecureSettingsProto) GetDateTime() *SecureSettingsProto_DateTime {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *SecureSettingsProto) GetDoze() *SecureSettingsProto_Doze {
	if x != nil {
		return x.Doze
	}
	return nil
}

func (x *SecureSettingsProto) GetEmergencyAssistanceApplication() *SettingProto {
	if x != nil {
		return x.EmergencyAssistanceApplication
	}
	return nil
}

func (x *SecureSettingsProto) GetEmergencyResponse() *SecureSettingsProto_EmergencyResponse {
	if x != nil {
		return x.EmergencyResponse
	}
	return nil
}

func (x *SecureSettingsProto) GetEnhancedVoicePrivacyEnabled() *SettingProto {
	if x != nil {
		return x.EnhancedVoicePrivacyEnabled
	}
	return nil
}

func (x *SecureSettingsProto) GetEvenDimmer() *SecureSettingsProto_EvenDimmer {
	if x != nil {
		return x.EvenDimmer
	}
	return nil
}

func (x *SecureSettingsProto) GetFontWeightAdjustment() *SettingProto {
	if x != nil {
		return x.FontWeightAdjustment
	}
	return nil
}

func (x *SecureSettingsProto) GetGesture() *SecureSettingsProto_Gesture {
	if x != nil {
		return x.Gesture
	}
	return nil
}

func (x *SecureSettingsProto) GetGestureNavigation() *SecureSettingsProto_GestureNavigation {
	if x != nil {
		return x.GestureNavigation
	}
	return nil
}

func (x *SecureSettingsProto) GetImmersiveModeConfirmations() *SettingProto {
	if x != nil {
		return x.ImmersiveModeConfirmations
	}
	return nil
}

func (x *SecureSettingsProto) GetIncall() *SecureSettingsProto_Incall {
	if x != nil {
		return x.Incall
	}
	return nil
}

func (x *SecureSettingsProto) GetInputMethods() *SecureSettingsProto_InputMethods {
	if x != nil {
		return x.InputMethods
	}
	return nil
}

func (x *SecureSettingsProto) GetInstallNonMarketApps() *SettingProto {
	if x != nil {
		return x.InstallNonMarketApps
	}
	return nil
}

func (x *SecureSettingsProto) GetInstantAppsEnabled() *SettingProto {
	if x != nil {
		return x.InstantAppsEnabled
	}
	return nil
}

func (x *SecureSettingsProto) GetKeyguardSliceUri() *SettingProto {
	if x != nil {
		return x.KeyguardSliceUri
	}
	return nil
}

func (x *SecureSettingsProto) GetLastSetupShown() *SettingProto {
	if x != nil {
		return x.LastSetupShown
	}
	return nil
}

func (x *SecureSettingsProto) GetLauncher() *SecureSettingsProto_Launcher {
	if x != nil {
		return x.Launcher
	}
	return nil
}

func (x *SecureSettingsProto) GetLocation() *SecureSettingsProto_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SecureSettingsProto) GetLocationAccessCheck() *SecureSettingsProto_LocationAccessCheck {
	if x != nil {
		return x.LocationAccessCheck
	}
	return nil
}

func (x *SecureSettingsProto) GetLockScreen() *SecureSettingsProto_LockScreen {
	if x != nil {
		return x.LockScreen
	}
	return nil
}

func (x *SecureSettingsProto) GetLockToAppExitLocked() *SettingProto {
	if x != nil {
		return x.LockToAppExitLocked
	}
	return nil
}

func (x *SecureSettingsProto) GetLockdownInPowerMenu() *SettingProto {
	if x != nil {
		return x.LockdownInPowerMenu
	}
	return nil
}

func (x *SecureSettingsProto) GetLongPressTimeout() *SettingProto {
	if x != nil {
		return x.LongPressTimeout
	}
	return nil
}

func (x *SecureSettingsProto) GetKeyPressTimeoutMs() *SettingProto {
	if x != nil {
		return x.KeyPressTimeoutMs
	}
	return nil
}

func (x *SecureSettingsProto) GetKeyPressDelayMs() *SettingProto {
	if x != nil {
		return x.KeyPressDelayMs
	}
	return nil
}

func (x *SecureSettingsProto) GetManagedProfile() *SecureSettingsProto_ManagedProfile {
	if x != nil {
		return x.ManagedProfile
	}
	return nil
}

func (x *SecureSettingsProto) GetMount() *SecureSettingsProto_Mount {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *SecureSettingsProto) GetMultiPressTimeout() *SettingProto {
	if x != nil {
		return x.MultiPressTimeout
	}
	return nil
}

func (x *SecureSettingsProto) GetNavBar() *SecureSettingsProto_NavBar {
	if x != nil {
		return x.NavBar
	}
	return nil
}

func (x *SecureSettingsProto) GetNavigationMode() *SettingProto {
	if x != nil {
		return x.NavigationMode
	}
	return nil
}

func (x *SecureSettingsProto) GetNfcPayment() *SecureSettingsProto_NfcPayment {
	if x != nil {
		return x.NfcPayment
	}
	return nil
}

func (x *SecureSettingsProto) GetNightDisplay() *SecureSettingsProto_NightDisplay {
	if x != nil {
		return x.NightDisplay
	}
	return nil
}

func (x *SecureSettingsProto) GetNotification() *SecureSettingsProto_Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *SecureSettingsProto) GetOnehanded() *SecureSettingsProto_OneHanded {
	if x != nil {
		return x.Onehanded
	}
	return nil
}

func (x *SecureSettingsProto) GetPackageVerifier() *SecureSettingsProto_PackageVerifier {
	if x != nil {
		return x.PackageVerifier
	}
	return nil
}

func (x *SecureSettingsProto) GetParentalControl() *SecureSettingsProto_ParentalControl {
	if x != nil {
		return x.ParentalControl
	}
	return nil
}

func (x *SecureSettingsProto) GetPowerMenuPrivacy() *SecureSettingsProto_PowerMenuPrivacy {
	if x != nil {
		return x.PowerMenuPrivacy
	}
	return nil
}

func (x *SecureSettingsProto) GetExtraLowPowerMode() *SecureSettingsProto_ExtraLowPowerMode {
	if x != nil {
		return x.ExtraLowPowerMode
	}
	return nil
}

func (x *SecureSettingsProto) GetPrintService() *SecureSettingsProto_PrintService {
	if x != nil {
		return x.PrintService
	}
	return nil
}

func (x *SecureSettingsProto) GetQs() *SecureSettingsProto_QuickSettings {
	if x != nil {
		return x.Qs
	}
	return nil
}

func (x *SecureSettingsProto) GetReduceBrightColors() *SecureSettingsProto_ReduceBrightColors {
	if x != nil {
		return x.ReduceBrightColors
	}
	return nil
}

func (x *SecureSettingsProto) GetRotation() *SecureSettingsProto_Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *SecureSettingsProto) GetRttCallingMode() *SettingProto {
	if x != nil {
		return x.RttCallingMode
	}
	return nil
}

func (x *SecureSettingsProto) GetScreensaver() *SecureSettingsProto_Screensaver {
	if x != nil {
		return x.Screensaver
	}
	return nil
}

func (x *SecureSettingsProto) GetSearch() *SecureSettingsProto_Search {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *SecureSettingsProto) GetCameraAutorotate() *SecureSettingsProto_CameraAutorotate {
	if x != nil {
		return x.CameraAutorotate
	}
	return nil
}

func (x *SecureSettingsProto) GetSpellChecker() *SecureSettingsProto_SpellChecker {
	if x != nil {
		return x.SpellChecker
	}
	return nil
}

func (x *SecureSettingsProto) GetSettingsClassname() *SettingProto {
	if x != nil {
		return x.SettingsClassname
	}
	return nil
}

func (x *SecureSettingsProto) GetShowFirstCrashDialogDevOption() *SettingProto {
	if x != nil {
		return x.ShowFirstCrashDialogDevOption
	}
	return nil
}

func (x *SecureSettingsProto) GetSkipFirstUseHints() *SettingProto {
	if x != nil {
		return x.SkipFirstUseHints
	}
	return nil
}

func (x *SecureSettingsProto) GetSleepTimeout() *SettingProto {
	if x != nil {
		return x.SleepTimeout
	}
	return nil
}

func (x *SecureSettingsProto) GetSmsDefaultApplication() *SettingProto {
	if x != nil {
		return x.SmsDefaultApplication
	}
	return nil
}

func (x *SecureSettingsProto) GetSounds() *SecureSettingsProto_Sounds {
	if x != nil {
		return x.Sounds
	}
	return nil
}

func (x *SecureSettingsProto) GetStylusPointerIconEnabled() *SettingProto {
	if x != nil {
		return x.StylusPointerIconEnabled
	}
	return nil
}

func (x *SecureSettingsProto) GetSwipeBottomToNotificationEnabled() *SettingProto {
	if x != nil {
		return x.SwipeBottomToNotificationEnabled
	}
	return nil
}

func (x *SecureSettingsProto) GetSyncParentSounds() *SettingProto {
	if x != nil {
		return x.SyncParentSounds
	}
	return nil
}

func (x *SecureSettingsProto) GetSystemNavigationKeysEnabled() *SettingProto {
	if x != nil {
		return x.SystemNavigationKeysEnabled
	}
	return nil
}

func (x *SecureSettingsProto) GetThemeCustomizationOverlayPackages() *SettingProto {
	if x != nil {
		return x.ThemeCustomizationOverlayPackages
	}
	return nil
}

func (x *SecureSettingsProto) GetTrustAgentsInitialized() *SettingProto {
	if x != nil {
		return x.TrustAgentsInitialized
	}
	return nil
}

func (x *SecureSettingsProto) GetTrackpadGesture() *SecureSettingsProto_TrackpadGesture {
	if x != nil {
		return x.TrackpadGesture
	}
	return nil
}

func (x *SecureSettingsProto) GetTts() *SecureSettingsProto_Tts {
	if x != nil {
		return x.Tts
	}
	return nil
}

func (x *SecureSettingsProto) GetTty() *SecureSettingsProto_Tty {
	if x != nil {
		return x.Tty
	}
	return nil
}

func (x *SecureSettingsProto) GetTv() *SecureSettingsProto_Tv {
	if x != nil {
		return x.Tv
	}
	return nil
}

func (x *SecureSettingsProto) GetUiNightMode() *SettingProto {
	if x != nil {
		return x.UiNightMode
	}
	return nil
}

func (x *SecureSettingsProto) GetUnknownSourcesDefaultReversed() *SettingProto {
	if x != nil {
		return x.UnknownSourcesDefaultReversed
	}
	return nil
}

func (x *SecureSettingsProto) GetUsbAudioAutomaticRoutingDisabled() *SettingProto {
	if x != nil {
		return x.UsbAudioAutomaticRoutingDisabled
	}
	return nil
}

func (x *SecureSettingsProto) GetUserSetupComplete() *SettingProto {
	if x != nil {
		return x.UserSetupComplete
	}
	return nil
}

func (x *SecureSettingsProto) GetVoice() *SecureSettingsProto_Voice {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *SecureSettingsProto) GetVolume() *SecureSettingsProto_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *SecureSettingsProto) GetVr() *SecureSettingsProto_Vr {
	if x != nil {
		return x.Vr
	}
	return nil
}

func (x *SecureSettingsProto) GetWakeGestureEnabled() *SettingProto {
	if x != nil {
		return x.WakeGestureEnabled
	}
	return nil
}

func (x *SecureSettingsProto) GetZen() *SecureSettingsProto_Zen {
	if x != nil {
		return x.Zen
	}
	return nil
}

type SecureSettingsProto_Accessibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	// List of the enabled accessibility providers.
	EnabledAccessibilityServices *SettingProto `protobuf:"bytes,2,opt,name=enabled_accessibility_services,json=enabledAccessibilityServices" json:"enabled_accessibility_services,omitempty"`
	AutoclickEnabled             *SettingProto `protobuf:"bytes,3,opt,name=autoclick_enabled,json=autoclickEnabled" json:"autoclick_enabled,omitempty"`
	AutoclickDelay               *SettingProto `protobuf:"bytes,4,opt,name=autoclick_delay,json=autoclickDelay" json:"autoclick_delay,omitempty"`
	// Setting specifying the accessibility service or feature to be toggled via
	// the accessibility button in the navigation bar. This is either a
	// flattened ComponentName or the class name of a system class implementing
	// a supported accessibility feature.
	ButtonTargetComponent     *SettingProto `protobuf:"bytes,5,opt,name=button_target_component,json=buttonTargetComponent" json:"button_target_component,omitempty"`
	CaptioningEnabled         *SettingProto `protobuf:"bytes,6,opt,name=captioning_enabled,json=captioningEnabled" json:"captioning_enabled,omitempty"`
	CaptioningLocale          *SettingProto `protobuf:"bytes,7,opt,name=captioning_locale,json=captioningLocale" json:"captioning_locale,omitempty"`
	CaptioningPreset          *SettingProto `protobuf:"bytes,8,opt,name=captioning_preset,json=captioningPreset" json:"captioning_preset,omitempty"`
	CaptioningBackgroundColor *SettingProto `protobuf:"bytes,9,opt,name=captioning_background_color,json=captioningBackgroundColor" json:"captioning_background_color,omitempty"`
	CaptioningForegroundColor *SettingProto `protobuf:"bytes,10,opt,name=captioning_foreground_color,json=captioningForegroundColor" json:"captioning_foreground_color,omitempty"`
	CaptioningEdgeType        *SettingProto `protobuf:"bytes,11,opt,name=captioning_edge_type,json=captioningEdgeType" json:"captioning_edge_type,omitempty"`
	CaptioningEdgeColor       *SettingProto `protobuf:"bytes,12,opt,name=captioning_edge_color,json=captioningEdgeColor" json:"captioning_edge_color,omitempty"`
	CaptioningWindowColor     *SettingProto `protobuf:"bytes,13,opt,name=captioning_window_color,json=captioningWindowColor" json:"captioning_window_color,omitempty"`
	CaptioningTypeface        *SettingProto `protobuf:"bytes,14,opt,name=captioning_typeface,json=captioningTypeface" json:"captioning_typeface,omitempty"`
	CaptioningFontScale       *SettingProto `protobuf:"bytes,15,opt,name=captioning_font_scale,json=captioningFontScale" json:"captioning_font_scale,omitempty"`
	DisplayDaltonizerEnabled  *SettingProto `protobuf:"bytes,16,opt,name=display_daltonizer_enabled,json=displayDaltonizerEnabled" json:"display_daltonizer_enabled,omitempty"`
	// Integer property that specifies the type of color space adjustment to perform.
	DisplayDaltonizer                 *SettingProto `protobuf:"bytes,17,opt,name=display_daltonizer,json=displayDaltonizer" json:"display_daltonizer,omitempty"`
	DisplayInversionEnabled           *SettingProto `protobuf:"bytes,18,opt,name=display_inversion_enabled,json=displayInversionEnabled" json:"display_inversion_enabled,omitempty"`
	DisplayMagnificationEnabled       *SettingProto `protobuf:"bytes,19,opt,name=display_magnification_enabled,json=displayMagnificationEnabled" json:"display_magnification_enabled,omitempty"`
	DisplayMagnificationNavbarEnabled *SettingProto `protobuf:"bytes,20,opt,name=display_magnification_navbar_enabled,json=displayMagnificationNavbarEnabled" json:"display_magnification_navbar_enabled,omitempty"`
	DisplayMagnificationScale         *SettingProto `protobuf:"bytes,21,opt,name=display_magnification_scale,json=displayMagnificationScale" json:"display_magnification_scale,omitempty"`
	HighTextContrastEnabled           *SettingProto `protobuf:"bytes,22,opt,name=high_text_contrast_enabled,json=highTextContrastEnabled" json:"high_text_contrast_enabled,omitempty"`
	LargePointerIcon                  *SettingProto `protobuf:"bytes,23,opt,name=large_pointer_icon,json=largePointerIcon" json:"large_pointer_icon,omitempty"`
	ShortcutEnabled                   *SettingProto `protobuf:"bytes,24,opt,name=shortcut_enabled,json=shortcutEnabled" json:"shortcut_enabled,omitempty"`
	ShortcutOnLockScreen              *SettingProto `protobuf:"bytes,25,opt,name=shortcut_on_lock_screen,json=shortcutOnLockScreen" json:"shortcut_on_lock_screen,omitempty"`
	ShortcutDialogShown               *SettingProto `protobuf:"bytes,26,opt,name=shortcut_dialog_shown,json=shortcutDialogShown" json:"shortcut_dialog_shown,omitempty"`
	ShortcutTargetService             *SettingProto `protobuf:"bytes,27,opt,name=shortcut_target_service,json=shortcutTargetService" json:"shortcut_target_service,omitempty"`
	SoftKeyboardMode                  *SettingProto `protobuf:"bytes,28,opt,name=soft_keyboard_mode,json=softKeyboardMode" json:"soft_keyboard_mode,omitempty"`
	// Whether to speak passwords while in accessibility mode.
	SpeakPassword           *SettingProto `protobuf:"bytes,29,opt,name=speak_password,json=speakPassword" json:"speak_password,omitempty"`
	TouchExplorationEnabled *SettingProto `protobuf:"bytes,30,opt,name=touch_exploration_enabled,json=touchExplorationEnabled" json:"touch_exploration_enabled,omitempty"`
	// List of the accessibility services to which the user has granted
	// permission to put the device into touch exploration mode.
	TouchExplorationGrantedAccessibilityServices *SettingProto `protobuf:"bytes,31,opt,name=touch_exploration_granted_accessibility_services,json=touchExplorationGrantedAccessibilityServices" json:"touch_exploration_granted_accessibility_services,omitempty"`
	// Settings for accessibility timeout
	NonInteractiveUiTimeoutMs *SettingProto `protobuf:"bytes,32,opt,name=non_interactive_ui_timeout_ms,json=nonInteractiveUiTimeoutMs" json:"non_interactive_ui_timeout_ms,omitempty"`
	InteractiveUiTimeoutMs    *SettingProto `protobuf:"bytes,33,opt,name=interactive_ui_timeout_ms,json=interactiveUiTimeoutMs" json:"interactive_ui_timeout_ms,omitempty"`
	// Settings for accessibility magnification.
	AccessibilityMagnificationMode       *SettingProto `protobuf:"bytes,34,opt,name=accessibility_magnification_mode,json=accessibilityMagnificationMode" json:"accessibility_magnification_mode,omitempty"`
	ButtonTargets                        *SettingProto `protobuf:"bytes,35,opt,name=button_targets,json=buttonTargets" json:"button_targets,omitempty"`
	AccessibilityMagnificationCapability *SettingProto `protobuf:"bytes,36,opt,name=accessibility_magnification_capability,json=accessibilityMagnificationCapability" json:"accessibility_magnification_capability,omitempty"`
	// Settings for accessibility button related config
	AccessibilityButtonMode              *SettingProto `protobuf:"bytes,37,opt,name=accessibility_button_mode,json=accessibilityButtonMode" json:"accessibility_button_mode,omitempty"`
	AccessibilityFloatingMenuSize        *SettingProto `protobuf:"bytes,38,opt,name=accessibility_floating_menu_size,json=accessibilityFloatingMenuSize" json:"accessibility_floating_menu_size,omitempty"`
	AccessibilityFloatingMenuIconType    *SettingProto `protobuf:"bytes,39,opt,name=accessibility_floating_menu_icon_type,json=accessibilityFloatingMenuIconType" json:"accessibility_floating_menu_icon_type,omitempty"`
	AccessibilityFloatingMenuOpacity     *SettingProto `protobuf:"bytes,40,opt,name=accessibility_floating_menu_opacity,json=accessibilityFloatingMenuOpacity" json:"accessibility_floating_menu_opacity,omitempty"`
	AccessibilityFloatingMenuFadeEnabled *SettingProto `protobuf:"bytes,41,opt,name=accessibility_floating_menu_fade_enabled,json=accessibilityFloatingMenuFadeEnabled" json:"accessibility_floating_menu_fade_enabled,omitempty"`
	OdiCaptionsVolumeUiEnabled           *SettingProto `protobuf:"bytes,42,opt,name=odi_captions_volume_ui_enabled,json=odiCaptionsVolumeUiEnabled" json:"odi_captions_volume_ui_enabled,omitempty"`
	// Setting for accessibility magnification for following typing.
	AccessibilityMagnificationFollowTypingEnabled *SettingProto `protobuf:"bytes,43,opt,name=accessibility_magnification_follow_typing_enabled,json=accessibilityMagnificationFollowTypingEnabled" json:"accessibility_magnification_follow_typing_enabled,omitempty"`
	ContrastLevel                                 *SettingProto `protobuf:"bytes,44,opt,name=contrast_level,json=contrastLevel" json:"contrast_level,omitempty"`
	AccessibilityMagnificationAlwaysOnEnabled     *SettingProto `protobuf:"bytes,45,opt,name=accessibility_magnification_always_on_enabled,json=accessibilityMagnificationAlwaysOnEnabled" json:"accessibility_magnification_always_on_enabled,omitempty"`
	HearingAidRingtoneRouting                     *SettingProto `protobuf:"bytes,46,opt,name=hearing_aid_ringtone_routing,json=hearingAidRingtoneRouting" json:"hearing_aid_ringtone_routing,omitempty"`
	HearingAidCallRouting                         *SettingProto `protobuf:"bytes,47,opt,name=hearing_aid_call_routing,json=hearingAidCallRouting" json:"hearing_aid_call_routing,omitempty"`
	HearingAidMediaRouting                        *SettingProto `protobuf:"bytes,48,opt,name=hearing_aid_media_routing,json=hearingAidMediaRouting" json:"hearing_aid_media_routing,omitempty"`
	HearingAidNotificationRouting                 *SettingProto `protobuf:"bytes,49,opt,name=hearing_aid_notification_routing,json=hearingAidNotificationRouting" json:"hearing_aid_notification_routing,omitempty"`
	AccessibilityMagnificationJoystickEnabled     *SettingProto `protobuf:"bytes,50,opt,name=accessibility_magnification_joystick_enabled,json=accessibilityMagnificationJoystickEnabled" json:"accessibility_magnification_joystick_enabled,omitempty"`
	// Settings for font scaling
	AccessibilityFontScalingHasBeenChanged              *SettingProto `protobuf:"bytes,51,opt,name=accessibility_font_scaling_has_been_changed,json=accessibilityFontScalingHasBeenChanged" json:"accessibility_font_scaling_has_been_changed,omitempty"`
	AccessibilityForceInvertColorEnabled                *SettingProto `protobuf:"bytes,52,opt,name=accessibility_force_invert_color_enabled,json=accessibilityForceInvertColorEnabled" json:"accessibility_force_invert_color_enabled,omitempty"`
	AccessibilityMagnificationTwoFingerTripleTapEnabled *SettingProto `protobuf:"bytes,53,opt,name=accessibility_magnification_two_finger_triple_tap_enabled,json=accessibilityMagnificationTwoFingerTripleTapEnabled" json:"accessibility_magnification_two_finger_triple_tap_enabled,omitempty"`
	QsTargets                                           *SettingProto `protobuf:"bytes,54,opt,name=qs_targets,json=qsTargets" json:"qs_targets,omitempty"`
	AccessibilityPinchToZoomAnywhereEnabled             *SettingProto `protobuf:"bytes,55,opt,name=accessibility_pinch_to_zoom_anywhere_enabled,json=accessibilityPinchToZoomAnywhereEnabled" json:"accessibility_pinch_to_zoom_anywhere_enabled,omitempty"`
	AccessibilitySingleFingerPanningEnabled             *SettingProto `protobuf:"bytes,56,opt,name=accessibility_single_finger_panning_enabled,json=accessibilitySingleFingerPanningEnabled" json:"accessibility_single_finger_panning_enabled,omitempty"`
}

func (x *SecureSettingsProto_Accessibility) Reset() {
	*x = SecureSettingsProto_Accessibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Accessibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Accessibility) ProtoMessage() {}

func (x *SecureSettingsProto_Accessibility) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Accessibility.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Accessibility) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SecureSettingsProto_Accessibility) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetEnabledAccessibilityServices() *SettingProto {
	if x != nil {
		return x.EnabledAccessibilityServices
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAutoclickEnabled() *SettingProto {
	if x != nil {
		return x.AutoclickEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAutoclickDelay() *SettingProto {
	if x != nil {
		return x.AutoclickDelay
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetButtonTargetComponent() *SettingProto {
	if x != nil {
		return x.ButtonTargetComponent
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningEnabled() *SettingProto {
	if x != nil {
		return x.CaptioningEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningLocale() *SettingProto {
	if x != nil {
		return x.CaptioningLocale
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningPreset() *SettingProto {
	if x != nil {
		return x.CaptioningPreset
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningBackgroundColor() *SettingProto {
	if x != nil {
		return x.CaptioningBackgroundColor
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningForegroundColor() *SettingProto {
	if x != nil {
		return x.CaptioningForegroundColor
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningEdgeType() *SettingProto {
	if x != nil {
		return x.CaptioningEdgeType
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningEdgeColor() *SettingProto {
	if x != nil {
		return x.CaptioningEdgeColor
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningWindowColor() *SettingProto {
	if x != nil {
		return x.CaptioningWindowColor
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningTypeface() *SettingProto {
	if x != nil {
		return x.CaptioningTypeface
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetCaptioningFontScale() *SettingProto {
	if x != nil {
		return x.CaptioningFontScale
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetDisplayDaltonizerEnabled() *SettingProto {
	if x != nil {
		return x.DisplayDaltonizerEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetDisplayDaltonizer() *SettingProto {
	if x != nil {
		return x.DisplayDaltonizer
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetDisplayInversionEnabled() *SettingProto {
	if x != nil {
		return x.DisplayInversionEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetDisplayMagnificationEnabled() *SettingProto {
	if x != nil {
		return x.DisplayMagnificationEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetDisplayMagnificationNavbarEnabled() *SettingProto {
	if x != nil {
		return x.DisplayMagnificationNavbarEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetDisplayMagnificationScale() *SettingProto {
	if x != nil {
		return x.DisplayMagnificationScale
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetHighTextContrastEnabled() *SettingProto {
	if x != nil {
		return x.HighTextContrastEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetLargePointerIcon() *SettingProto {
	if x != nil {
		return x.LargePointerIcon
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetShortcutEnabled() *SettingProto {
	if x != nil {
		return x.ShortcutEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetShortcutOnLockScreen() *SettingProto {
	if x != nil {
		return x.ShortcutOnLockScreen
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetShortcutDialogShown() *SettingProto {
	if x != nil {
		return x.ShortcutDialogShown
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetShortcutTargetService() *SettingProto {
	if x != nil {
		return x.ShortcutTargetService
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetSoftKeyboardMode() *SettingProto {
	if x != nil {
		return x.SoftKeyboardMode
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetSpeakPassword() *SettingProto {
	if x != nil {
		return x.SpeakPassword
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetTouchExplorationEnabled() *SettingProto {
	if x != nil {
		return x.TouchExplorationEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetTouchExplorationGrantedAccessibilityServices() *SettingProto {
	if x != nil {
		return x.TouchExplorationGrantedAccessibilityServices
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetNonInteractiveUiTimeoutMs() *SettingProto {
	if x != nil {
		return x.NonInteractiveUiTimeoutMs
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetInteractiveUiTimeoutMs() *SettingProto {
	if x != nil {
		return x.InteractiveUiTimeoutMs
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityMagnificationMode() *SettingProto {
	if x != nil {
		return x.AccessibilityMagnificationMode
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetButtonTargets() *SettingProto {
	if x != nil {
		return x.ButtonTargets
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityMagnificationCapability() *SettingProto {
	if x != nil {
		return x.AccessibilityMagnificationCapability
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityButtonMode() *SettingProto {
	if x != nil {
		return x.AccessibilityButtonMode
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityFloatingMenuSize() *SettingProto {
	if x != nil {
		return x.AccessibilityFloatingMenuSize
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityFloatingMenuIconType() *SettingProto {
	if x != nil {
		return x.AccessibilityFloatingMenuIconType
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityFloatingMenuOpacity() *SettingProto {
	if x != nil {
		return x.AccessibilityFloatingMenuOpacity
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityFloatingMenuFadeEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilityFloatingMenuFadeEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetOdiCaptionsVolumeUiEnabled() *SettingProto {
	if x != nil {
		return x.OdiCaptionsVolumeUiEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityMagnificationFollowTypingEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilityMagnificationFollowTypingEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetContrastLevel() *SettingProto {
	if x != nil {
		return x.ContrastLevel
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityMagnificationAlwaysOnEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilityMagnificationAlwaysOnEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetHearingAidRingtoneRouting() *SettingProto {
	if x != nil {
		return x.HearingAidRingtoneRouting
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetHearingAidCallRouting() *SettingProto {
	if x != nil {
		return x.HearingAidCallRouting
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetHearingAidMediaRouting() *SettingProto {
	if x != nil {
		return x.HearingAidMediaRouting
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetHearingAidNotificationRouting() *SettingProto {
	if x != nil {
		return x.HearingAidNotificationRouting
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityMagnificationJoystickEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilityMagnificationJoystickEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityFontScalingHasBeenChanged() *SettingProto {
	if x != nil {
		return x.AccessibilityFontScalingHasBeenChanged
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityForceInvertColorEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilityForceInvertColorEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityMagnificationTwoFingerTripleTapEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilityMagnificationTwoFingerTripleTapEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetQsTargets() *SettingProto {
	if x != nil {
		return x.QsTargets
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilityPinchToZoomAnywhereEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilityPinchToZoomAnywhereEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Accessibility) GetAccessibilitySingleFingerPanningEnabled() *SettingProto {
	if x != nil {
		return x.AccessibilitySingleFingerPanningEnabled
	}
	return nil
}

type SecureSettingsProto_AdaptiveSleep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *SecureSettingsProto_AdaptiveSleep) Reset() {
	*x = SecureSettingsProto_AdaptiveSleep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_AdaptiveSleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_AdaptiveSleep) ProtoMessage() {}

func (x *SecureSettingsProto_AdaptiveSleep) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_AdaptiveSleep.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_AdaptiveSleep) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SecureSettingsProto_AdaptiveSleep) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type SecureSettingsProto_AlwaysOnVpn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App      *SettingProto `protobuf:"bytes,1,opt,name=app" json:"app,omitempty"`
	Lockdown *SettingProto `protobuf:"bytes,2,opt,name=lockdown" json:"lockdown,omitempty"`
}

func (x *SecureSettingsProto_AlwaysOnVpn) Reset() {
	*x = SecureSettingsProto_AlwaysOnVpn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_AlwaysOnVpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_AlwaysOnVpn) ProtoMessage() {}

func (x *SecureSettingsProto_AlwaysOnVpn) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_AlwaysOnVpn.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_AlwaysOnVpn) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SecureSettingsProto_AlwaysOnVpn) GetApp() *SettingProto {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *SecureSettingsProto_AlwaysOnVpn) GetLockdown() *SettingProto {
	if x != nil {
		return x.Lockdown
	}
	return nil
}

type SecureSettingsProto_Assist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current assistant component. It could be a voice interaction service,
	// or an activity that handles ACTION_ASSIST, or empty, which means using
	// the default handling.
	Assistant                                *SettingProto `protobuf:"bytes,1,opt,name=assistant" json:"assistant,omitempty"`
	StructureEnabled                         *SettingProto `protobuf:"bytes,2,opt,name=structure_enabled,json=structureEnabled" json:"structure_enabled,omitempty"`
	ScreenshotEnabled                        *SettingProto `protobuf:"bytes,3,opt,name=screenshot_enabled,json=screenshotEnabled" json:"screenshot_enabled,omitempty"`
	DisclosureEnabled                        *SettingProto `protobuf:"bytes,4,opt,name=disclosure_enabled,json=disclosureEnabled" json:"disclosure_enabled,omitempty"`
	GestureEnabled                           *SettingProto `protobuf:"bytes,5,opt,name=gesture_enabled,json=gestureEnabled" json:"gesture_enabled,omitempty"`
	GestureSensitivity                       *SettingProto `protobuf:"bytes,6,opt,name=gesture_sensitivity,json=gestureSensitivity" json:"gesture_sensitivity,omitempty"`
	GestureSilenceAlertsEnabled              *SettingProto `protobuf:"bytes,7,opt,name=gesture_silence_alerts_enabled,json=gestureSilenceAlertsEnabled" json:"gesture_silence_alerts_enabled,omitempty"`
	GestureWakeEnabled                       *SettingProto `protobuf:"bytes,8,opt,name=gesture_wake_enabled,json=gestureWakeEnabled" json:"gesture_wake_enabled,omitempty"`
	GestureSetupComplete                     *SettingProto `protobuf:"bytes,9,opt,name=gesture_setup_complete,json=gestureSetupComplete" json:"gesture_setup_complete,omitempty"`
	TouchGestureEnabled                      *SettingProto `protobuf:"bytes,10,opt,name=touch_gesture_enabled,json=touchGestureEnabled" json:"touch_gesture_enabled,omitempty"`
	LongPressHomeEnabled                     *SettingProto `protobuf:"bytes,11,opt,name=long_press_home_enabled,json=longPressHomeEnabled" json:"long_press_home_enabled,omitempty"`
	SearchPressHoldNavHandleEnabled          *SettingProto `protobuf:"bytes,12,opt,name=search_press_hold_nav_handle_enabled,json=searchPressHoldNavHandleEnabled" json:"search_press_hold_nav_handle_enabled,omitempty"`
	SearchLongPressHomeEnabled               *SettingProto `protobuf:"bytes,13,opt,name=search_long_press_home_enabled,json=searchLongPressHomeEnabled" json:"search_long_press_home_enabled,omitempty"`
	VisualQueryAccessibilityDetectionEnabled *SettingProto `protobuf:"bytes,14,opt,name=visual_query_accessibility_detection_enabled,json=visualQueryAccessibilityDetectionEnabled" json:"visual_query_accessibility_detection_enabled,omitempty"`
}

func (x *SecureSettingsProto_Assist) Reset() {
	*x = SecureSettingsProto_Assist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Assist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Assist) ProtoMessage() {}

func (x *SecureSettingsProto_Assist) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Assist.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Assist) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SecureSettingsProto_Assist) GetAssistant() *SettingProto {
	if x != nil {
		return x.Assistant
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetStructureEnabled() *SettingProto {
	if x != nil {
		return x.StructureEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetScreenshotEnabled() *SettingProto {
	if x != nil {
		return x.ScreenshotEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetDisclosureEnabled() *SettingProto {
	if x != nil {
		return x.DisclosureEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetGestureEnabled() *SettingProto {
	if x != nil {
		return x.GestureEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetGestureSensitivity() *SettingProto {
	if x != nil {
		return x.GestureSensitivity
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetGestureSilenceAlertsEnabled() *SettingProto {
	if x != nil {
		return x.GestureSilenceAlertsEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetGestureWakeEnabled() *SettingProto {
	if x != nil {
		return x.GestureWakeEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetGestureSetupComplete() *SettingProto {
	if x != nil {
		return x.GestureSetupComplete
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetTouchGestureEnabled() *SettingProto {
	if x != nil {
		return x.TouchGestureEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetLongPressHomeEnabled() *SettingProto {
	if x != nil {
		return x.LongPressHomeEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetSearchPressHoldNavHandleEnabled() *SettingProto {
	if x != nil {
		return x.SearchPressHoldNavHandleEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetSearchLongPressHomeEnabled() *SettingProto {
	if x != nil {
		return x.SearchLongPressHomeEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Assist) GetVisualQueryAccessibilityDetectionEnabled() *SettingProto {
	if x != nil {
		return x.VisualQueryAccessibilityDetectionEnabled
	}
	return nil
}

type SecureSettingsProto_AssistHandles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearningTimeElapsedMillis *SettingProto `protobuf:"bytes,1,opt,name=learning_time_elapsed_millis,json=learningTimeElapsedMillis" json:"learning_time_elapsed_millis,omitempty"`
	LearningEventCount        *SettingProto `protobuf:"bytes,2,opt,name=learning_event_count,json=learningEventCount" json:"learning_event_count,omitempty"`
}

func (x *SecureSettingsProto_AssistHandles) Reset() {
	*x = SecureSettingsProto_AssistHandles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_AssistHandles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_AssistHandles) ProtoMessage() {}

func (x *SecureSettingsProto_AssistHandles) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_AssistHandles.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_AssistHandles) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SecureSettingsProto_AssistHandles) GetLearningTimeElapsedMillis() *SettingProto {
	if x != nil {
		return x.LearningTimeElapsedMillis
	}
	return nil
}

func (x *SecureSettingsProto_AssistHandles) GetLearningEventCount() *SettingProto {
	if x != nil {
		return x.LearningEventCount
	}
	return nil
}

type SecureSettingsProto_Autofill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currently selected autofill service flattened ComponentName.
	Service *SettingProto `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	// Boolean indicating if Autofill supports field classification.
	FeatureFieldClassification            *SettingProto `protobuf:"bytes,2,opt,name=feature_field_classification,json=featureFieldClassification" json:"feature_field_classification,omitempty"`
	UserDataMaxUserDataSize               *SettingProto `protobuf:"bytes,3,opt,name=user_data_max_user_data_size,json=userDataMaxUserDataSize" json:"user_data_max_user_data_size,omitempty"`
	UserDataMaxFieldClassificationIdsSize *SettingProto `protobuf:"bytes,4,opt,name=user_data_max_field_classification_ids_size,json=userDataMaxFieldClassificationIdsSize" json:"user_data_max_field_classification_ids_size,omitempty"`
	UserDataMaxCategoryCount              *SettingProto `protobuf:"bytes,5,opt,name=user_data_max_category_count,json=userDataMaxCategoryCount" json:"user_data_max_category_count,omitempty"`
	UserDataMaxValueLength                *SettingProto `protobuf:"bytes,6,opt,name=user_data_max_value_length,json=userDataMaxValueLength" json:"user_data_max_value_length,omitempty"`
	UserDataMinValueLength                *SettingProto `protobuf:"bytes,7,opt,name=user_data_min_value_length,json=userDataMinValueLength" json:"user_data_min_value_length,omitempty"`
	// The query URI to find an auto fill service to install.
	ServiceSearchUri *SettingProto `protobuf:"bytes,8,opt,name=service_search_uri,json=serviceSearchUri" json:"service_search_uri,omitempty"`
}

func (x *SecureSettingsProto_Autofill) Reset() {
	*x = SecureSettingsProto_Autofill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Autofill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Autofill) ProtoMessage() {}

func (x *SecureSettingsProto_Autofill) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Autofill.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Autofill) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SecureSettingsProto_Autofill) GetService() *SettingProto {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *SecureSettingsProto_Autofill) GetFeatureFieldClassification() *SettingProto {
	if x != nil {
		return x.FeatureFieldClassification
	}
	return nil
}

func (x *SecureSettingsProto_Autofill) GetUserDataMaxUserDataSize() *SettingProto {
	if x != nil {
		return x.UserDataMaxUserDataSize
	}
	return nil
}

func (x *SecureSettingsProto_Autofill) GetUserDataMaxFieldClassificationIdsSize() *SettingProto {
	if x != nil {
		return x.UserDataMaxFieldClassificationIdsSize
	}
	return nil
}

func (x *SecureSettingsProto_Autofill) GetUserDataMaxCategoryCount() *SettingProto {
	if x != nil {
		return x.UserDataMaxCategoryCount
	}
	return nil
}

func (x *SecureSettingsProto_Autofill) GetUserDataMaxValueLength() *SettingProto {
	if x != nil {
		return x.UserDataMaxValueLength
	}
	return nil
}

func (x *SecureSettingsProto_Autofill) GetUserDataMinValueLength() *SettingProto {
	if x != nil {
		return x.UserDataMinValueLength
	}
	return nil
}

func (x *SecureSettingsProto_Autofill) GetServiceSearchUri() *SettingProto {
	if x != nil {
		return x.ServiceSearchUri
	}
	return nil
}

type SecureSettingsProto_AutomaticStorageManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	DaysToRetain      *SettingProto `protobuf:"bytes,2,opt,name=days_to_retain,json=daysToRetain" json:"days_to_retain,omitempty"`
	BytesCleared      *SettingProto `protobuf:"bytes,3,opt,name=bytes_cleared,json=bytesCleared" json:"bytes_cleared,omitempty"`
	LastRun           *SettingProto `protobuf:"bytes,4,opt,name=last_run,json=lastRun" json:"last_run,omitempty"`
	TurnedOffByPolicy *SettingProto `protobuf:"bytes,5,opt,name=turned_off_by_policy,json=turnedOffByPolicy" json:"turned_off_by_policy,omitempty"`
}

func (x *SecureSettingsProto_AutomaticStorageManager) Reset() {
	*x = SecureSettingsProto_AutomaticStorageManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_AutomaticStorageManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_AutomaticStorageManager) ProtoMessage() {}

func (x *SecureSettingsProto_AutomaticStorageManager) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_AutomaticStorageManager.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_AutomaticStorageManager) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 6}
}

func (x *SecureSettingsProto_AutomaticStorageManager) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SecureSettingsProto_AutomaticStorageManager) GetDaysToRetain() *SettingProto {
	if x != nil {
		return x.DaysToRetain
	}
	return nil
}

func (x *SecureSettingsProto_AutomaticStorageManager) GetBytesCleared() *SettingProto {
	if x != nil {
		return x.BytesCleared
	}
	return nil
}

func (x *SecureSettingsProto_AutomaticStorageManager) GetLastRun() *SettingProto {
	if x != nil {
		return x.LastRun
	}
	return nil
}

func (x *SecureSettingsProto_AutomaticStorageManager) GetTurnedOffByPolicy() *SettingProto {
	if x != nil {
		return x.TurnedOffByPolicy
	}
	return nil
}

type SecureSettingsProto_Backup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	AutoRestore      *SettingProto `protobuf:"bytes,2,opt,name=auto_restore,json=autoRestore" json:"auto_restore,omitempty"`
	Provisioned      *SettingProto `protobuf:"bytes,3,opt,name=provisioned" json:"provisioned,omitempty"`
	Transport        *SettingProto `protobuf:"bytes,4,opt,name=transport" json:"transport,omitempty"`
	ManagerConstants *SettingProto `protobuf:"bytes,5,opt,name=manager_constants,json=managerConstants" json:"manager_constants,omitempty"`
	// Local transport parameters so we can configure it for tests.
	// This is encoded as a key=value list, separated by commas.
	// The following keys are supported:
	//
	//	fake_encryption_flag  (boolean)
	LocalTransportParameters             *SettingProto `protobuf:"bytes,6,opt,name=local_transport_parameters,json=localTransportParameters" json:"local_transport_parameters,omitempty"`
	PackagesToClearDataBeforeFullRestore *SettingProto `protobuf:"bytes,7,opt,name=packages_to_clear_data_before_full_restore,json=packagesToClearDataBeforeFullRestore" json:"packages_to_clear_data_before_full_restore,omitempty"`
}

func (x *SecureSettingsProto_Backup) Reset() {
	*x = SecureSettingsProto_Backup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Backup) ProtoMessage() {}

func (x *SecureSettingsProto_Backup) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Backup.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Backup) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 7}
}

func (x *SecureSettingsProto_Backup) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SecureSettingsProto_Backup) GetAutoRestore() *SettingProto {
	if x != nil {
		return x.AutoRestore
	}
	return nil
}

func (x *SecureSettingsProto_Backup) GetProvisioned() *SettingProto {
	if x != nil {
		return x.Provisioned
	}
	return nil
}

func (x *SecureSettingsProto_Backup) GetTransport() *SettingProto {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *SecureSettingsProto_Backup) GetManagerConstants() *SettingProto {
	if x != nil {
		return x.ManagerConstants
	}
	return nil
}

func (x *SecureSettingsProto_Backup) GetLocalTransportParameters() *SettingProto {
	if x != nil {
		return x.LocalTransportParameters
	}
	return nil
}

func (x *SecureSettingsProto_Backup) GetPackagesToClearDataBeforeFullRestore() *SettingProto {
	if x != nil {
		return x.PackagesToClearDataBeforeFullRestore
	}
	return nil
}

type SecureSettingsProto_Camera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GestureDisabled               *SettingProto `protobuf:"bytes,1,opt,name=gesture_disabled,json=gestureDisabled" json:"gesture_disabled,omitempty"`
	DoubleTapPowerGestureDisabled *SettingProto `protobuf:"bytes,2,opt,name=double_tap_power_gesture_disabled,json=doubleTapPowerGestureDisabled" json:"double_tap_power_gesture_disabled,omitempty"`
	DoubleTwistToFlipEnabled      *SettingProto `protobuf:"bytes,3,opt,name=double_twist_to_flip_enabled,json=doubleTwistToFlipEnabled" json:"double_twist_to_flip_enabled,omitempty"`
	LiftTriggerEnabled            *SettingProto `protobuf:"bytes,4,opt,name=lift_trigger_enabled,json=liftTriggerEnabled" json:"lift_trigger_enabled,omitempty"`
}

func (x *SecureSettingsProto_Camera) Reset() {
	*x = SecureSettingsProto_Camera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Camera) ProtoMessage() {}

func (x *SecureSettingsProto_Camera) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Camera.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Camera) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 8}
}

func (x *SecureSettingsProto_Camera) GetGestureDisabled() *SettingProto {
	if x != nil {
		return x.GestureDisabled
	}
	return nil
}

func (x *SecureSettingsProto_Camera) GetDoubleTapPowerGestureDisabled() *SettingProto {
	if x != nil {
		return x.DoubleTapPowerGestureDisabled
	}
	return nil
}

func (x *SecureSettingsProto_Camera) GetDoubleTwistToFlipEnabled() *SettingProto {
	if x != nil {
		return x.DoubleTwistToFlipEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Camera) GetLiftTriggerEnabled() *SettingProto {
	if x != nil {
		return x.LiftTriggerEnabled
	}
	return nil
}

type SecureSettingsProto_Clipboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowAccessNotifications *SettingProto `protobuf:"bytes,1,opt,name=show_access_notifications,json=showAccessNotifications" json:"show_access_notifications,omitempty"`
}

func (x *SecureSettingsProto_Clipboard) Reset() {
	*x = SecureSettingsProto_Clipboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Clipboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Clipboard) ProtoMessage() {}

func (x *SecureSettingsProto_Clipboard) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Clipboard.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Clipboard) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 9}
}

func (x *SecureSettingsProto_Clipboard) GetShowAccessNotifications() *SettingProto {
	if x != nil {
		return x.ShowAccessNotifications
	}
	return nil
}

type SecureSettingsProto_Controls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *SecureSettingsProto_Controls) Reset() {
	*x = SecureSettingsProto_Controls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Controls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Controls) ProtoMessage() {}

func (x *SecureSettingsProto_Controls) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Controls.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Controls) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 10}
}

func (x *SecureSettingsProto_Controls) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type SecureSettingsProto_DateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationTimeZoneDetectionEnabled *SettingProto `protobuf:"bytes,1,opt,name=location_time_zone_detection_enabled,json=locationTimeZoneDetectionEnabled" json:"location_time_zone_detection_enabled,omitempty"`
}

func (x *SecureSettingsProto_DateTime) Reset() {
	*x = SecureSettingsProto_DateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_DateTime) ProtoMessage() {}

func (x *SecureSettingsProto_DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_DateTime.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_DateTime) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 11}
}

func (x *SecureSettingsProto_DateTime) GetLocationTimeZoneDetectionEnabled() *SettingProto {
	if x != nil {
		return x.LocationTimeZoneDetectionEnabled
	}
	return nil
}

type SecureSettingsProto_Doze struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	AlwaysOn         *SettingProto `protobuf:"bytes,2,opt,name=always_on,json=alwaysOn" json:"always_on,omitempty"`
	PulseOnPickUp    *SettingProto `protobuf:"bytes,3,opt,name=pulse_on_pick_up,json=pulseOnPickUp" json:"pulse_on_pick_up,omitempty"`
	PulseOnLongPress *SettingProto `protobuf:"bytes,4,opt,name=pulse_on_long_press,json=pulseOnLongPress" json:"pulse_on_long_press,omitempty"`
	PulseOnDoubleTap *SettingProto `protobuf:"bytes,5,opt,name=pulse_on_double_tap,json=pulseOnDoubleTap" json:"pulse_on_double_tap,omitempty"`
	PulseOnTap       *SettingProto `protobuf:"bytes,6,opt,name=pulse_on_tap,json=pulseOnTap" json:"pulse_on_tap,omitempty"`
	Suppress         *SettingProto `protobuf:"bytes,7,opt,name=suppress" json:"suppress,omitempty"`
}

func (x *SecureSettingsProto_Doze) Reset() {
	*x = SecureSettingsProto_Doze{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Doze) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Doze) ProtoMessage() {}

func (x *SecureSettingsProto_Doze) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Doze.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Doze) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 12}
}

func (x *SecureSettingsProto_Doze) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SecureSettingsProto_Doze) GetAlwaysOn() *SettingProto {
	if x != nil {
		return x.AlwaysOn
	}
	return nil
}

func (x *SecureSettingsProto_Doze) GetPulseOnPickUp() *SettingProto {
	if x != nil {
		return x.PulseOnPickUp
	}
	return nil
}

func (x *SecureSettingsProto_Doze) GetPulseOnLongPress() *SettingProto {
	if x != nil {
		return x.PulseOnLongPress
	}
	return nil
}

func (x *SecureSettingsProto_Doze) GetPulseOnDoubleTap() *SettingProto {
	if x != nil {
		return x.PulseOnDoubleTap
	}
	return nil
}

func (x *SecureSettingsProto_Doze) GetPulseOnTap() *SettingProto {
	if x != nil {
		return x.PulseOnTap
	}
	return nil
}

func (x *SecureSettingsProto_Doze) GetSuppress() *SettingProto {
	if x != nil {
		return x.Suppress
	}
	return nil
}

type SecureSettingsProto_EmergencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmergencyGestureEnabled      *SettingProto `protobuf:"bytes,3,opt,name=emergency_gesture_enabled,json=emergencyGestureEnabled" json:"emergency_gesture_enabled,omitempty"`
	EmergencyGestureSoundEnabled *SettingProto `protobuf:"bytes,4,opt,name=emergency_gesture_sound_enabled,json=emergencyGestureSoundEnabled" json:"emergency_gesture_sound_enabled,omitempty"`
}

func (x *SecureSettingsProto_EmergencyResponse) Reset() {
	*x = SecureSettingsProto_EmergencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_EmergencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_EmergencyResponse) ProtoMessage() {}

func (x *SecureSettingsProto_EmergencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_EmergencyResponse.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_EmergencyResponse) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 13}
}

func (x *SecureSettingsProto_EmergencyResponse) GetEmergencyGestureEnabled() *SettingProto {
	if x != nil {
		return x.EmergencyGestureEnabled
	}
	return nil
}

func (x *SecureSettingsProto_EmergencyResponse) GetEmergencyGestureSoundEnabled() *SettingProto {
	if x != nil {
		return x.EmergencyGestureSoundEnabled
	}
	return nil
}

type SecureSettingsProto_EvenDimmer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvenDimmerActivated *SettingProto `protobuf:"bytes,1,opt,name=even_dimmer_activated,json=evenDimmerActivated" json:"even_dimmer_activated,omitempty"`
	EvenDimmerMinNits   *SettingProto `protobuf:"bytes,2,opt,name=even_dimmer_min_nits,json=evenDimmerMinNits" json:"even_dimmer_min_nits,omitempty"`
}

func (x *SecureSettingsProto_EvenDimmer) Reset() {
	*x = SecureSettingsProto_EvenDimmer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_EvenDimmer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_EvenDimmer) ProtoMessage() {}

func (x *SecureSettingsProto_EvenDimmer) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_EvenDimmer.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_EvenDimmer) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 14}
}

func (x *SecureSettingsProto_EvenDimmer) GetEvenDimmerActivated() *SettingProto {
	if x != nil {
		return x.EvenDimmerActivated
	}
	return nil
}

func (x *SecureSettingsProto_EvenDimmer) GetEvenDimmerMinNits() *SettingProto {
	if x != nil {
		return x.EvenDimmerMinNits
	}
	return nil
}

type SecureSettingsProto_Gesture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwareEnabled       *SettingProto `protobuf:"bytes,1,opt,name=aware_enabled,json=awareEnabled" json:"aware_enabled,omitempty"`
	SilenceAlarmsCount *SettingProto `protobuf:"bytes,2,opt,name=silence_alarms_count,json=silenceAlarmsCount" json:"silence_alarms_count,omitempty"`
	SilenceCallsCount  *SettingProto `protobuf:"bytes,3,opt,name=silence_calls_count,json=silenceCallsCount" json:"silence_calls_count,omitempty"`
	SilenceEnabled     *SettingProto `protobuf:"bytes,4,opt,name=silence_enabled,json=silenceEnabled" json:"silence_enabled,omitempty"`
	// del: silence_notification_count = 5
	SilenceTimerCount         *SettingProto `protobuf:"bytes,6,opt,name=silence_timer_count,json=silenceTimerCount" json:"silence_timer_count,omitempty"`
	SkipCount                 *SettingProto `protobuf:"bytes,7,opt,name=skip_count,json=skipCount" json:"skip_count,omitempty"`
	SkipEnabled               *SettingProto `protobuf:"bytes,8,opt,name=skip_enabled,json=skipEnabled" json:"skip_enabled,omitempty"`
	SilenceAlarmsTouchCount   *SettingProto `protobuf:"bytes,9,opt,name=silence_alarms_touch_count,json=silenceAlarmsTouchCount" json:"silence_alarms_touch_count,omitempty"`
	SilenceCallsTouchCount    *SettingProto `protobuf:"bytes,10,opt,name=silence_calls_touch_count,json=silenceCallsTouchCount" json:"silence_calls_touch_count,omitempty"`
	SilenceTimerTouchCount    *SettingProto `protobuf:"bytes,11,opt,name=silence_timer_touch_count,json=silenceTimerTouchCount" json:"silence_timer_touch_count,omitempty"`
	SkipTouchCount            *SettingProto `protobuf:"bytes,12,opt,name=skip_touch_count,json=skipTouchCount" json:"skip_touch_count,omitempty"`
	AwareTapPauseGestureCount *SettingProto `protobuf:"bytes,13,opt,name=aware_tap_pause_gesture_count,json=awareTapPauseGestureCount" json:"aware_tap_pause_gesture_count,omitempty"`
	AwareTapPauseTouchCount   *SettingProto `protobuf:"bytes,14,opt,name=aware_tap_pause_touch_count,json=awareTapPauseTouchCount" json:"aware_tap_pause_touch_count,omitempty"`
}

func (x *SecureSettingsProto_Gesture) Reset() {
	*x = SecureSettingsProto_Gesture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Gesture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Gesture) ProtoMessage() {}

func (x *SecureSettingsProto_Gesture) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Gesture.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Gesture) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 15}
}

func (x *SecureSettingsProto_Gesture) GetAwareEnabled() *SettingProto {
	if x != nil {
		return x.AwareEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSilenceAlarmsCount() *SettingProto {
	if x != nil {
		return x.SilenceAlarmsCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSilenceCallsCount() *SettingProto {
	if x != nil {
		return x.SilenceCallsCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSilenceEnabled() *SettingProto {
	if x != nil {
		return x.SilenceEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSilenceTimerCount() *SettingProto {
	if x != nil {
		return x.SilenceTimerCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSkipCount() *SettingProto {
	if x != nil {
		return x.SkipCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSkipEnabled() *SettingProto {
	if x != nil {
		return x.SkipEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSilenceAlarmsTouchCount() *SettingProto {
	if x != nil {
		return x.SilenceAlarmsTouchCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSilenceCallsTouchCount() *SettingProto {
	if x != nil {
		return x.SilenceCallsTouchCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSilenceTimerTouchCount() *SettingProto {
	if x != nil {
		return x.SilenceTimerTouchCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetSkipTouchCount() *SettingProto {
	if x != nil {
		return x.SkipTouchCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetAwareTapPauseGestureCount() *SettingProto {
	if x != nil {
		return x.AwareTapPauseGestureCount
	}
	return nil
}

func (x *SecureSettingsProto_Gesture) GetAwareTapPauseTouchCount() *SettingProto {
	if x != nil {
		return x.AwareTapPauseTouchCount
	}
	return nil
}

type SecureSettingsProto_GestureNavigation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackGestureInsetScaleLeft  *SettingProto `protobuf:"bytes,1,opt,name=back_gesture_inset_scale_left,json=backGestureInsetScaleLeft" json:"back_gesture_inset_scale_left,omitempty"`
	BackGestureInsetScaleRight *SettingProto `protobuf:"bytes,2,opt,name=back_gesture_inset_scale_right,json=backGestureInsetScaleRight" json:"back_gesture_inset_scale_right,omitempty"`
}

func (x *SecureSettingsProto_GestureNavigation) Reset() {
	*x = SecureSettingsProto_GestureNavigation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_GestureNavigation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_GestureNavigation) ProtoMessage() {}

func (x *SecureSettingsProto_GestureNavigation) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_GestureNavigation.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_GestureNavigation) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 16}
}

func (x *SecureSettingsProto_GestureNavigation) GetBackGestureInsetScaleLeft() *SettingProto {
	if x != nil {
		return x.BackGestureInsetScaleLeft
	}
	return nil
}

func (x *SecureSettingsProto_GestureNavigation) GetBackGestureInsetScaleRight() *SettingProto {
	if x != nil {
		return x.BackGestureInsetScaleRight
	}
	return nil
}

type SecureSettingsProto_Incall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerButtonBehavior *SettingProto `protobuf:"bytes,1,opt,name=power_button_behavior,json=powerButtonBehavior" json:"power_button_behavior,omitempty"`
	BackButtonBehavior  *SettingProto `protobuf:"bytes,2,opt,name=back_button_behavior,json=backButtonBehavior" json:"back_button_behavior,omitempty"`
}

func (x *SecureSettingsProto_Incall) Reset() {
	*x = SecureSettingsProto_Incall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Incall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Incall) ProtoMessage() {}

func (x *SecureSettingsProto_Incall) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Incall.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Incall) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 17}
}

func (x *SecureSettingsProto_Incall) GetPowerButtonBehavior() *SettingProto {
	if x != nil {
		return x.PowerButtonBehavior
	}
	return nil
}

func (x *SecureSettingsProto_Incall) GetBackButtonBehavior() *SettingProto {
	if x != nil {
		return x.BackButtonBehavior
	}
	return nil
}

type SecureSettingsProto_InputMethods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultInputMethod         *SettingProto `protobuf:"bytes,1,opt,name=default_input_method,json=defaultInputMethod" json:"default_input_method,omitempty"`
	DisabledSystemInputMethods *SettingProto `protobuf:"bytes,2,opt,name=disabled_system_input_methods,json=disabledSystemInputMethods" json:"disabled_system_input_methods,omitempty"`
	EnabledInputMethods        *SettingProto `protobuf:"bytes,3,opt,name=enabled_input_methods,json=enabledInputMethods" json:"enabled_input_methods,omitempty"`
	MethodSelectorVisibility   *SettingProto `protobuf:"bytes,4,opt,name=method_selector_visibility,json=methodSelectorVisibility" json:"method_selector_visibility,omitempty"`
	SubtypeHistory             *SettingProto `protobuf:"bytes,5,opt,name=subtype_history,json=subtypeHistory" json:"subtype_history,omitempty"`
	SelectedInputMethodSubtype *SettingProto `protobuf:"bytes,6,opt,name=selected_input_method_subtype,json=selectedInputMethodSubtype" json:"selected_input_method_subtype,omitempty"`
	ShowImeWithHardKeyboard    *SettingProto `protobuf:"bytes,7,opt,name=show_ime_with_hard_keyboard,json=showImeWithHardKeyboard" json:"show_ime_with_hard_keyboard,omitempty"`
	DefaultVoiceInputMethod    *SettingProto `protobuf:"bytes,8,opt,name=default_voice_input_method,json=defaultVoiceInputMethod" json:"default_voice_input_method,omitempty"`
}

func (x *SecureSettingsProto_InputMethods) Reset() {
	*x = SecureSettingsProto_InputMethods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_InputMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_InputMethods) ProtoMessage() {}

func (x *SecureSettingsProto_InputMethods) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_InputMethods.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_InputMethods) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 18}
}

func (x *SecureSettingsProto_InputMethods) GetDefaultInputMethod() *SettingProto {
	if x != nil {
		return x.DefaultInputMethod
	}
	return nil
}

func (x *SecureSettingsProto_InputMethods) GetDisabledSystemInputMethods() *SettingProto {
	if x != nil {
		return x.DisabledSystemInputMethods
	}
	return nil
}

func (x *SecureSettingsProto_InputMethods) GetEnabledInputMethods() *SettingProto {
	if x != nil {
		return x.EnabledInputMethods
	}
	return nil
}

func (x *SecureSettingsProto_InputMethods) GetMethodSelectorVisibility() *SettingProto {
	if x != nil {
		return x.MethodSelectorVisibility
	}
	return nil
}

func (x *SecureSettingsProto_InputMethods) GetSubtypeHistory() *SettingProto {
	if x != nil {
		return x.SubtypeHistory
	}
	return nil
}

func (x *SecureSettingsProto_InputMethods) GetSelectedInputMethodSubtype() *SettingProto {
	if x != nil {
		return x.SelectedInputMethodSubtype
	}
	return nil
}

func (x *SecureSettingsProto_InputMethods) GetShowImeWithHardKeyboard() *SettingProto {
	if x != nil {
		return x.ShowImeWithHardKeyboard
	}
	return nil
}

func (x *SecureSettingsProto_InputMethods) GetDefaultVoiceInputMethod() *SettingProto {
	if x != nil {
		return x.DefaultVoiceInputMethod
	}
	return nil
}

type SecureSettingsProto_Launcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwipeUpToSwitchAppsEnabled *SettingProto `protobuf:"bytes,1,opt,name=swipe_up_to_switch_apps_enabled,json=swipeUpToSwitchAppsEnabled" json:"swipe_up_to_switch_apps_enabled,omitempty"`
}

func (x *SecureSettingsProto_Launcher) Reset() {
	*x = SecureSettingsProto_Launcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Launcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Launcher) ProtoMessage() {}

func (x *SecureSettingsProto_Launcher) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Launcher.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Launcher) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 19}
}

func (x *SecureSettingsProto_Launcher) GetSwipeUpToSwitchAppsEnabled() *SettingProto {
	if x != nil {
		return x.SwipeUpToSwitchAppsEnabled
	}
	return nil
}

type SecureSettingsProto_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The degree of location access enabled by the user.
	Mode *SettingProto `protobuf:"bytes,1,opt,name=mode" json:"mode,omitempty"`
	// The App or module that changes the location mode.
	Changer *SettingProto `protobuf:"bytes,2,opt,name=changer" json:"changer,omitempty"`
}

func (x *SecureSettingsProto_Location) Reset() {
	*x = SecureSettingsProto_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Location) ProtoMessage() {}

func (x *SecureSettingsProto_Location) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Location.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Location) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 20}
}

func (x *SecureSettingsProto_Location) GetMode() *SettingProto {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *SecureSettingsProto_Location) GetChanger() *SettingProto {
	if x != nil {
		return x.Changer
	}
	return nil
}

// How frequently will the user be reminded about location permission grants
type SecureSettingsProto_LocationAccessCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in between periodic checks
	IntervalMillis *SettingProto `protobuf:"bytes,1,opt,name=interval_millis,json=intervalMillis" json:"interval_millis,omitempty"`
	// Time in between the user granting a location permission and a check
	DelayMillis *SettingProto `protobuf:"bytes,2,opt,name=delay_millis,json=delayMillis" json:"delay_millis,omitempty"`
}

func (x *SecureSettingsProto_LocationAccessCheck) Reset() {
	*x = SecureSettingsProto_LocationAccessCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_LocationAccessCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_LocationAccessCheck) ProtoMessage() {}

func (x *SecureSettingsProto_LocationAccessCheck) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_LocationAccessCheck.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_LocationAccessCheck) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 21}
}

func (x *SecureSettingsProto_LocationAccessCheck) GetIntervalMillis() *SettingProto {
	if x != nil {
		return x.IntervalMillis
	}
	return nil
}

func (x *SecureSettingsProto_LocationAccessCheck) GetDelayMillis() *SettingProto {
	if x != nil {
		return x.DelayMillis
	}
	return nil
}

type SecureSettingsProto_LockScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockAfterTimeout          *SettingProto `protobuf:"bytes,1,opt,name=lock_after_timeout,json=lockAfterTimeout" json:"lock_after_timeout,omitempty"`
	AllowPrivateNotifications *SettingProto `protobuf:"bytes,2,opt,name=allow_private_notifications,json=allowPrivateNotifications" json:"allow_private_notifications,omitempty"`
	AllowRemoteInput          *SettingProto `protobuf:"bytes,3,opt,name=allow_remote_input,json=allowRemoteInput" json:"allow_remote_input,omitempty"`
	ShowNotifications         *SettingProto `protobuf:"bytes,4,opt,name=show_notifications,json=showNotifications" json:"show_notifications,omitempty"`
}

func (x *SecureSettingsProto_LockScreen) Reset() {
	*x = SecureSettingsProto_LockScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_LockScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_LockScreen) ProtoMessage() {}

func (x *SecureSettingsProto_LockScreen) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_LockScreen.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_LockScreen) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 22}
}

func (x *SecureSettingsProto_LockScreen) GetLockAfterTimeout() *SettingProto {
	if x != nil {
		return x.LockAfterTimeout
	}
	return nil
}

func (x *SecureSettingsProto_LockScreen) GetAllowPrivateNotifications() *SettingProto {
	if x != nil {
		return x.AllowPrivateNotifications
	}
	return nil
}

func (x *SecureSettingsProto_LockScreen) GetAllowRemoteInput() *SettingProto {
	if x != nil {
		return x.AllowRemoteInput
	}
	return nil
}

func (x *SecureSettingsProto_LockScreen) GetShowNotifications() *SettingProto {
	if x != nil {
		return x.ShowNotifications
	}
	return nil
}

type SecureSettingsProto_ManagedProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactRemoteSearch *SettingProto `protobuf:"bytes,1,opt,name=contact_remote_search,json=contactRemoteSearch" json:"contact_remote_search,omitempty"`
}

func (x *SecureSettingsProto_ManagedProfile) Reset() {
	*x = SecureSettingsProto_ManagedProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_ManagedProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_ManagedProfile) ProtoMessage() {}

func (x *SecureSettingsProto_ManagedProfile) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_ManagedProfile.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_ManagedProfile) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 23}
}

func (x *SecureSettingsProto_ManagedProfile) GetContactRemoteSearch() *SettingProto {
	if x != nil {
		return x.ContactRemoteSearch
	}
	return nil
}

type SecureSettingsProto_Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not alert sounds are played on StorageManagerService events.
	PlayNotificationSnd *SettingProto `protobuf:"bytes,1,opt,name=play_notification_snd,json=playNotificationSnd" json:"play_notification_snd,omitempty"`
	UmsAutostart        *SettingProto `protobuf:"bytes,2,opt,name=ums_autostart,json=umsAutostart" json:"ums_autostart,omitempty"`
	UmsPrompt           *SettingProto `protobuf:"bytes,3,opt,name=ums_prompt,json=umsPrompt" json:"ums_prompt,omitempty"`
	UmsNotifyEnabled    *SettingProto `protobuf:"bytes,4,opt,name=ums_notify_enabled,json=umsNotifyEnabled" json:"ums_notify_enabled,omitempty"`
}

func (x *SecureSettingsProto_Mount) Reset() {
	*x = SecureSettingsProto_Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Mount) ProtoMessage() {}

func (x *SecureSettingsProto_Mount) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Mount.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Mount) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 24}
}

func (x *SecureSettingsProto_Mount) GetPlayNotificationSnd() *SettingProto {
	if x != nil {
		return x.PlayNotificationSnd
	}
	return nil
}

func (x *SecureSettingsProto_Mount) GetUmsAutostart() *SettingProto {
	if x != nil {
		return x.UmsAutostart
	}
	return nil
}

func (x *SecureSettingsProto_Mount) GetUmsPrompt() *SettingProto {
	if x != nil {
		return x.UmsPrompt
	}
	return nil
}

func (x *SecureSettingsProto_Mount) GetUmsNotifyEnabled() *SettingProto {
	if x != nil {
		return x.UmsNotifyEnabled
	}
	return nil
}

type SecureSettingsProto_NavBar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nav bar is forced to always be visible, even in immersive mode.
	NavBarForceVisible *SettingProto `protobuf:"bytes,1,opt,name=nav_bar_force_visible,json=navBarForceVisible" json:"nav_bar_force_visible,omitempty"`
	// Indicates whether the device is in kids nav mode.
	NavBarKidsMode *SettingProto `protobuf:"bytes,2,opt,name=nav_bar_kids_mode,json=navBarKidsMode" json:"nav_bar_kids_mode,omitempty"`
}

func (x *SecureSettingsProto_NavBar) Reset() {
	*x = SecureSettingsProto_NavBar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_NavBar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_NavBar) ProtoMessage() {}

func (x *SecureSettingsProto_NavBar) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_NavBar.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_NavBar) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 25}
}

func (x *SecureSettingsProto_NavBar) GetNavBarForceVisible() *SettingProto {
	if x != nil {
		return x.NavBarForceVisible
	}
	return nil
}

func (x *SecureSettingsProto_NavBar) GetNavBarKidsMode() *SettingProto {
	if x != nil {
		return x.NavBarKidsMode
	}
	return nil
}

type SecureSettingsProto_NfcPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultComponent *SettingProto `protobuf:"bytes,1,opt,name=default_component,json=defaultComponent" json:"default_component,omitempty"`
	// Whether NFC payment is handled by the foreground application or a default.
	Foreground *SettingProto `protobuf:"bytes,2,opt,name=foreground" json:"foreground,omitempty"`
	// The query URI to find an NFC service to install.
	PaymentServiceSearchUri *SettingProto `protobuf:"bytes,3,opt,name=payment_service_search_uri,json=paymentServiceSearchUri" json:"payment_service_search_uri,omitempty"`
}

func (x *SecureSettingsProto_NfcPayment) Reset() {
	*x = SecureSettingsProto_NfcPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_NfcPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_NfcPayment) ProtoMessage() {}

func (x *SecureSettingsProto_NfcPayment) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_NfcPayment.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_NfcPayment) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 26}
}

func (x *SecureSettingsProto_NfcPayment) GetDefaultComponent() *SettingProto {
	if x != nil {
		return x.DefaultComponent
	}
	return nil
}

func (x *SecureSettingsProto_NfcPayment) GetForeground() *SettingProto {
	if x != nil {
		return x.Foreground
	}
	return nil
}

func (x *SecureSettingsProto_NfcPayment) GetPaymentServiceSearchUri() *SettingProto {
	if x != nil {
		return x.PaymentServiceSearchUri
	}
	return nil
}

type SecureSettingsProto_NightDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activated         *SettingProto `protobuf:"bytes,1,opt,name=activated" json:"activated,omitempty"`
	AutoMode          *SettingProto `protobuf:"bytes,2,opt,name=auto_mode,json=autoMode" json:"auto_mode,omitempty"`
	ColorTemperature  *SettingProto `protobuf:"bytes,3,opt,name=color_temperature,json=colorTemperature" json:"color_temperature,omitempty"`
	CustomStartTime   *SettingProto `protobuf:"bytes,4,opt,name=custom_start_time,json=customStartTime" json:"custom_start_time,omitempty"`
	CustomEndTime     *SettingProto `protobuf:"bytes,5,opt,name=custom_end_time,json=customEndTime" json:"custom_end_time,omitempty"`
	LastActivatedTime *SettingProto `protobuf:"bytes,6,opt,name=last_activated_time,json=lastActivatedTime" json:"last_activated_time,omitempty"`
}

func (x *SecureSettingsProto_NightDisplay) Reset() {
	*x = SecureSettingsProto_NightDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_NightDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_NightDisplay) ProtoMessage() {}

func (x *SecureSettingsProto_NightDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_NightDisplay.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_NightDisplay) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 27}
}

func (x *SecureSettingsProto_NightDisplay) GetActivated() *SettingProto {
	if x != nil {
		return x.Activated
	}
	return nil
}

func (x *SecureSettingsProto_NightDisplay) GetAutoMode() *SettingProto {
	if x != nil {
		return x.AutoMode
	}
	return nil
}

func (x *SecureSettingsProto_NightDisplay) GetColorTemperature() *SettingProto {
	if x != nil {
		return x.ColorTemperature
	}
	return nil
}

func (x *SecureSettingsProto_NightDisplay) GetCustomStartTime() *SettingProto {
	if x != nil {
		return x.CustomStartTime
	}
	return nil
}

func (x *SecureSettingsProto_NightDisplay) GetCustomEndTime() *SettingProto {
	if x != nil {
		return x.CustomEndTime
	}
	return nil
}

func (x *SecureSettingsProto_NightDisplay) GetLastActivatedTime() *SettingProto {
	if x != nil {
		return x.LastActivatedTime
	}
	return nil
}

type SecureSettingsProto_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read only list of the service components that the current user has
	// explicitly allowed to see and assist with all of the user's
	// notifications.
	// "enabled_notification_assistant" in code.
	EnabledAssistant                *SettingProto `protobuf:"bytes,1,opt,name=enabled_assistant,json=enabledAssistant" json:"enabled_assistant,omitempty"`
	EnabledListeners                *SettingProto `protobuf:"bytes,2,opt,name=enabled_listeners,json=enabledListeners" json:"enabled_listeners,omitempty"`
	EnabledPolicyAccessPackages     *SettingProto `protobuf:"bytes,3,opt,name=enabled_policy_access_packages,json=enabledPolicyAccessPackages" json:"enabled_policy_access_packages,omitempty"`
	Badging                         *SettingProto `protobuf:"bytes,4,opt,name=badging" json:"badging,omitempty"`
	ShowNoteAboutNotificationHiding *SettingProto `protobuf:"bytes,5,opt,name=show_note_about_notification_hiding,json=showNoteAboutNotificationHiding" json:"show_note_about_notification_hiding,omitempty"`
	InCallNotificationEnabled       *SettingProto `protobuf:"bytes,6,opt,name=in_call_notification_enabled,json=inCallNotificationEnabled" json:"in_call_notification_enabled,omitempty"`
	Bubbles                         *SettingProto `protobuf:"bytes,7,opt,name=bubbles" json:"bubbles,omitempty"`
}

func (x *SecureSettingsProto_Notification) Reset() {
	*x = SecureSettingsProto_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Notification) ProtoMessage() {}

func (x *SecureSettingsProto_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Notification.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Notification) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 28}
}

func (x *SecureSettingsProto_Notification) GetEnabledAssistant() *SettingProto {
	if x != nil {
		return x.EnabledAssistant
	}
	return nil
}

func (x *SecureSettingsProto_Notification) GetEnabledListeners() *SettingProto {
	if x != nil {
		return x.EnabledListeners
	}
	return nil
}

func (x *SecureSettingsProto_Notification) GetEnabledPolicyAccessPackages() *SettingProto {
	if x != nil {
		return x.EnabledPolicyAccessPackages
	}
	return nil
}

func (x *SecureSettingsProto_Notification) GetBadging() *SettingProto {
	if x != nil {
		return x.Badging
	}
	return nil
}

func (x *SecureSettingsProto_Notification) GetShowNoteAboutNotificationHiding() *SettingProto {
	if x != nil {
		return x.ShowNoteAboutNotificationHiding
	}
	return nil
}

func (x *SecureSettingsProto_Notification) GetInCallNotificationEnabled() *SettingProto {
	if x != nil {
		return x.InCallNotificationEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Notification) GetBubbles() *SettingProto {
	if x != nil {
		return x.Bubbles
	}
	return nil
}

type SecureSettingsProto_OneHanded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneHandedModeEnabled   *SettingProto `protobuf:"bytes,1,opt,name=one_handed_mode_enabled,json=oneHandedModeEnabled" json:"one_handed_mode_enabled,omitempty"`
	OneHandedModeTimeout   *SettingProto `protobuf:"bytes,2,opt,name=one_handed_mode_timeout,json=oneHandedModeTimeout" json:"one_handed_mode_timeout,omitempty"`
	TapsAppToExit          *SettingProto `protobuf:"bytes,3,opt,name=taps_app_to_exit,json=tapsAppToExit" json:"taps_app_to_exit,omitempty"`
	OneHandedModeActivated *SettingProto `protobuf:"bytes,4,opt,name=one_handed_mode_activated,json=oneHandedModeActivated" json:"one_handed_mode_activated,omitempty"`
}

func (x *SecureSettingsProto_OneHanded) Reset() {
	*x = SecureSettingsProto_OneHanded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_OneHanded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_OneHanded) ProtoMessage() {}

func (x *SecureSettingsProto_OneHanded) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_OneHanded.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_OneHanded) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 29}
}

func (x *SecureSettingsProto_OneHanded) GetOneHandedModeEnabled() *SettingProto {
	if x != nil {
		return x.OneHandedModeEnabled
	}
	return nil
}

func (x *SecureSettingsProto_OneHanded) GetOneHandedModeTimeout() *SettingProto {
	if x != nil {
		return x.OneHandedModeTimeout
	}
	return nil
}

func (x *SecureSettingsProto_OneHanded) GetTapsAppToExit() *SettingProto {
	if x != nil {
		return x.TapsAppToExit
	}
	return nil
}

func (x *SecureSettingsProto_OneHanded) GetOneHandedModeActivated() *SettingProto {
	if x != nil {
		return x.OneHandedModeActivated
	}
	return nil
}

type SecureSettingsProto_PackageVerifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserConsent *SettingProto `protobuf:"bytes,1,opt,name=user_consent,json=userConsent" json:"user_consent,omitempty"`
	State       *SettingProto `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
}

func (x *SecureSettingsProto_PackageVerifier) Reset() {
	*x = SecureSettingsProto_PackageVerifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_PackageVerifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_PackageVerifier) ProtoMessage() {}

func (x *SecureSettingsProto_PackageVerifier) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_PackageVerifier.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_PackageVerifier) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 30}
}

func (x *SecureSettingsProto_PackageVerifier) GetUserConsent() *SettingProto {
	if x != nil {
		return x.UserConsent
	}
	return nil
}

func (x *SecureSettingsProto_PackageVerifier) GetState() *SettingProto {
	if x != nil {
		return x.State
	}
	return nil
}

type SecureSettingsProto_ParentalControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	LastUpdate  *SettingProto `protobuf:"bytes,2,opt,name=last_update,json=lastUpdate" json:"last_update,omitempty"`
	RedirectUrl *SettingProto `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl" json:"redirect_url,omitempty"`
}

func (x *SecureSettingsProto_ParentalControl) Reset() {
	*x = SecureSettingsProto_ParentalControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_ParentalControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_ParentalControl) ProtoMessage() {}

func (x *SecureSettingsProto_ParentalControl) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_ParentalControl.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_ParentalControl) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 31}
}

func (x *SecureSettingsProto_ParentalControl) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SecureSettingsProto_ParentalControl) GetLastUpdate() *SettingProto {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *SecureSettingsProto_ParentalControl) GetRedirectUrl() *SettingProto {
	if x != nil {
		return x.RedirectUrl
	}
	return nil
}

type SecureSettingsProto_PowerMenuPrivacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Show *SettingProto `protobuf:"bytes,1,opt,name=show" json:"show,omitempty"`
}

func (x *SecureSettingsProto_PowerMenuPrivacy) Reset() {
	*x = SecureSettingsProto_PowerMenuPrivacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_PowerMenuPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_PowerMenuPrivacy) ProtoMessage() {}

func (x *SecureSettingsProto_PowerMenuPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_PowerMenuPrivacy.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_PowerMenuPrivacy) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 32}
}

func (x *SecureSettingsProto_PowerMenuPrivacy) GetShow() *SettingProto {
	if x != nil {
		return x.Show
	}
	return nil
}

type SecureSettingsProto_ExtraLowPowerMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraAutomaticPowerSaveMode *SettingProto `protobuf:"bytes,1,opt,name=extra_automatic_power_save_mode,json=extraAutomaticPowerSaveMode" json:"extra_automatic_power_save_mode,omitempty"`
}

func (x *SecureSettingsProto_ExtraLowPowerMode) Reset() {
	*x = SecureSettingsProto_ExtraLowPowerMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_ExtraLowPowerMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_ExtraLowPowerMode) ProtoMessage() {}

func (x *SecureSettingsProto_ExtraLowPowerMode) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_ExtraLowPowerMode.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_ExtraLowPowerMode) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 33}
}

func (x *SecureSettingsProto_ExtraLowPowerMode) GetExtraAutomaticPowerSaveMode() *SettingProto {
	if x != nil {
		return x.ExtraAutomaticPowerSaveMode
	}
	return nil
}

type SecureSettingsProto_PrintService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query URI to find a print service to install.
	SearchUri             *SettingProto `protobuf:"bytes,1,opt,name=search_uri,json=searchUri" json:"search_uri,omitempty"`
	DisabledPrintServices *SettingProto `protobuf:"bytes,2,opt,name=disabled_print_services,json=disabledPrintServices" json:"disabled_print_services,omitempty"`
	EnabledPrintServices  *SettingProto `protobuf:"bytes,3,opt,name=enabled_print_services,json=enabledPrintServices" json:"enabled_print_services,omitempty"`
}

func (x *SecureSettingsProto_PrintService) Reset() {
	*x = SecureSettingsProto_PrintService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_PrintService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_PrintService) ProtoMessage() {}

func (x *SecureSettingsProto_PrintService) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_PrintService.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_PrintService) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 34}
}

func (x *SecureSettingsProto_PrintService) GetSearchUri() *SettingProto {
	if x != nil {
		return x.SearchUri
	}
	return nil
}

func (x *SecureSettingsProto_PrintService) GetDisabledPrintServices() *SettingProto {
	if x != nil {
		return x.DisabledPrintServices
	}
	return nil
}

func (x *SecureSettingsProto_PrintService) GetEnabledPrintServices() *SettingProto {
	if x != nil {
		return x.EnabledPrintServices
	}
	return nil
}

type SecureSettingsProto_QuickSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds comma-separated list of ordering of QuickSettings tiles.
	Tiles          *SettingProto `protobuf:"bytes,1,opt,name=tiles" json:"tiles,omitempty"`
	AutoAddedTiles *SettingProto `protobuf:"bytes,2,opt,name=auto_added_tiles,json=autoAddedTiles" json:"auto_added_tiles,omitempty"`
}

func (x *SecureSettingsProto_QuickSettings) Reset() {
	*x = SecureSettingsProto_QuickSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_QuickSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_QuickSettings) ProtoMessage() {}

func (x *SecureSettingsProto_QuickSettings) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_QuickSettings.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_QuickSettings) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 35}
}

func (x *SecureSettingsProto_QuickSettings) GetTiles() *SettingProto {
	if x != nil {
		return x.Tiles
	}
	return nil
}

func (x *SecureSettingsProto_QuickSettings) GetAutoAddedTiles() *SettingProto {
	if x != nil {
		return x.AutoAddedTiles
	}
	return nil
}

type SecureSettingsProto_ReduceBrightColors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activated            *SettingProto `protobuf:"bytes,1,opt,name=activated" json:"activated,omitempty"`
	Level                *SettingProto `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	PersistAcrossReboots *SettingProto `protobuf:"bytes,3,opt,name=persist_across_reboots,json=persistAcrossReboots" json:"persist_across_reboots,omitempty"`
}

func (x *SecureSettingsProto_ReduceBrightColors) Reset() {
	*x = SecureSettingsProto_ReduceBrightColors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_ReduceBrightColors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_ReduceBrightColors) ProtoMessage() {}

func (x *SecureSettingsProto_ReduceBrightColors) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_ReduceBrightColors.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_ReduceBrightColors) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 36}
}

func (x *SecureSettingsProto_ReduceBrightColors) GetActivated() *SettingProto {
	if x != nil {
		return x.Activated
	}
	return nil
}

func (x *SecureSettingsProto_ReduceBrightColors) GetLevel() *SettingProto {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *SecureSettingsProto_ReduceBrightColors) GetPersistAcrossReboots() *SettingProto {
	if x != nil {
		return x.PersistAcrossReboots
	}
	return nil
}

type SecureSettingsProto_Rotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowRotationSuggestions        *SettingProto `protobuf:"bytes,1,opt,name=show_rotation_suggestions,json=showRotationSuggestions" json:"show_rotation_suggestions,omitempty"`
	NumRotationSuggestionsAccepted *SettingProto `protobuf:"bytes,2,opt,name=num_rotation_suggestions_accepted,json=numRotationSuggestionsAccepted" json:"num_rotation_suggestions_accepted,omitempty"`
}

func (x *SecureSettingsProto_Rotation) Reset() {
	*x = SecureSettingsProto_Rotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Rotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Rotation) ProtoMessage() {}

func (x *SecureSettingsProto_Rotation) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Rotation.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Rotation) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 37}
}

func (x *SecureSettingsProto_Rotation) GetShowRotationSuggestions() *SettingProto {
	if x != nil {
		return x.ShowRotationSuggestions
	}
	return nil
}

func (x *SecureSettingsProto_Rotation) GetNumRotationSuggestionsAccepted() *SettingProto {
	if x != nil {
		return x.NumRotationSuggestionsAccepted
	}
	return nil
}

type SecureSettingsProto_Screensaver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	Components       *SettingProto `protobuf:"bytes,2,opt,name=components" json:"components,omitempty"`
	ActivateOnDock   *SettingProto `protobuf:"bytes,3,opt,name=activate_on_dock,json=activateOnDock" json:"activate_on_dock,omitempty"`
	ActivateOnSleep  *SettingProto `protobuf:"bytes,4,opt,name=activate_on_sleep,json=activateOnSleep" json:"activate_on_sleep,omitempty"`
	DefaultComponent *SettingProto `protobuf:"bytes,5,opt,name=default_component,json=defaultComponent" json:"default_component,omitempty"`
}

func (x *SecureSettingsProto_Screensaver) Reset() {
	*x = SecureSettingsProto_Screensaver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Screensaver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Screensaver) ProtoMessage() {}

func (x *SecureSettingsProto_Screensaver) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Screensaver.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Screensaver) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 38}
}

func (x *SecureSettingsProto_Screensaver) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SecureSettingsProto_Screensaver) GetComponents() *SettingProto {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *SecureSettingsProto_Screensaver) GetActivateOnDock() *SettingProto {
	if x != nil {
		return x.ActivateOnDock
	}
	return nil
}

func (x *SecureSettingsProto_Screensaver) GetActivateOnSleep() *SettingProto {
	if x != nil {
		return x.ActivateOnSleep
	}
	return nil
}

func (x *SecureSettingsProto_Screensaver) GetDefaultComponent() *SettingProto {
	if x != nil {
		return x.DefaultComponent
	}
	return nil
}

type SecureSettingsProto_Search struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalSearchActivity           *SettingProto `protobuf:"bytes,1,opt,name=global_search_activity,json=globalSearchActivity" json:"global_search_activity,omitempty"`
	NumPromotedSources             *SettingProto `protobuf:"bytes,2,opt,name=num_promoted_sources,json=numPromotedSources" json:"num_promoted_sources,omitempty"`
	MaxResultsToDisplay            *SettingProto `protobuf:"bytes,3,opt,name=max_results_to_display,json=maxResultsToDisplay" json:"max_results_to_display,omitempty"`
	MaxResultsPerSource            *SettingProto `protobuf:"bytes,4,opt,name=max_results_per_source,json=maxResultsPerSource" json:"max_results_per_source,omitempty"`
	WebResultsOverrideLimit        *SettingProto `protobuf:"bytes,5,opt,name=web_results_override_limit,json=webResultsOverrideLimit" json:"web_results_override_limit,omitempty"`
	PromotedSourceDeadlineMillis   *SettingProto `protobuf:"bytes,6,opt,name=promoted_source_deadline_millis,json=promotedSourceDeadlineMillis" json:"promoted_source_deadline_millis,omitempty"`
	SourceTimeoutMillis            *SettingProto `protobuf:"bytes,7,opt,name=source_timeout_millis,json=sourceTimeoutMillis" json:"source_timeout_millis,omitempty"`
	PrefillMillis                  *SettingProto `protobuf:"bytes,8,opt,name=prefill_millis,json=prefillMillis" json:"prefill_millis,omitempty"`
	MaxStatAgeMillis               *SettingProto `protobuf:"bytes,9,opt,name=max_stat_age_millis,json=maxStatAgeMillis" json:"max_stat_age_millis,omitempty"`
	MaxSourceEventAgeMillis        *SettingProto `protobuf:"bytes,10,opt,name=max_source_event_age_millis,json=maxSourceEventAgeMillis" json:"max_source_event_age_millis,omitempty"`
	MinImpressionsForSourceRanking *SettingProto `protobuf:"bytes,11,opt,name=min_impressions_for_source_ranking,json=minImpressionsForSourceRanking" json:"min_impressions_for_source_ranking,omitempty"`
	MinClicksForSourceRanking      *SettingProto `protobuf:"bytes,12,opt,name=min_clicks_for_source_ranking,json=minClicksForSourceRanking" json:"min_clicks_for_source_ranking,omitempty"`
	MaxShortcutsReturned           *SettingProto `protobuf:"bytes,13,opt,name=max_shortcuts_returned,json=maxShortcutsReturned" json:"max_shortcuts_returned,omitempty"`
	QueryThreadCorePoolSize        *SettingProto `protobuf:"bytes,14,opt,name=query_thread_core_pool_size,json=queryThreadCorePoolSize" json:"query_thread_core_pool_size,omitempty"`
	QueryThreadMaxPoolSize         *SettingProto `protobuf:"bytes,15,opt,name=query_thread_max_pool_size,json=queryThreadMaxPoolSize" json:"query_thread_max_pool_size,omitempty"`
	ShortcutRefreshCorePoolSize    *SettingProto `protobuf:"bytes,16,opt,name=shortcut_refresh_core_pool_size,json=shortcutRefreshCorePoolSize" json:"shortcut_refresh_core_pool_size,omitempty"`
	ShortcutRefreshMaxPoolSize     *SettingProto `protobuf:"bytes,17,opt,name=shortcut_refresh_max_pool_size,json=shortcutRefreshMaxPoolSize" json:"shortcut_refresh_max_pool_size,omitempty"`
	ThreadKeepaliveSeconds         *SettingProto `protobuf:"bytes,18,opt,name=thread_keepalive_seconds,json=threadKeepaliveSeconds" json:"thread_keepalive_seconds,omitempty"`
	PerSourceConcurrentQueryLimit  *SettingProto `protobuf:"bytes,19,opt,name=per_source_concurrent_query_limit,json=perSourceConcurrentQueryLimit" json:"per_source_concurrent_query_limit,omitempty"`
}

func (x *SecureSettingsProto_Search) Reset() {
	*x = SecureSettingsProto_Search{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Search) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Search) ProtoMessage() {}

func (x *SecureSettingsProto_Search) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Search.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Search) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 39}
}

func (x *SecureSettingsProto_Search) GetGlobalSearchActivity() *SettingProto {
	if x != nil {
		return x.GlobalSearchActivity
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetNumPromotedSources() *SettingProto {
	if x != nil {
		return x.NumPromotedSources
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetMaxResultsToDisplay() *SettingProto {
	if x != nil {
		return x.MaxResultsToDisplay
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetMaxResultsPerSource() *SettingProto {
	if x != nil {
		return x.MaxResultsPerSource
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetWebResultsOverrideLimit() *SettingProto {
	if x != nil {
		return x.WebResultsOverrideLimit
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetPromotedSourceDeadlineMillis() *SettingProto {
	if x != nil {
		return x.PromotedSourceDeadlineMillis
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetSourceTimeoutMillis() *SettingProto {
	if x != nil {
		return x.SourceTimeoutMillis
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetPrefillMillis() *SettingProto {
	if x != nil {
		return x.PrefillMillis
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetMaxStatAgeMillis() *SettingProto {
	if x != nil {
		return x.MaxStatAgeMillis
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetMaxSourceEventAgeMillis() *SettingProto {
	if x != nil {
		return x.MaxSourceEventAgeMillis
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetMinImpressionsForSourceRanking() *SettingProto {
	if x != nil {
		return x.MinImpressionsForSourceRanking
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetMinClicksForSourceRanking() *SettingProto {
	if x != nil {
		return x.MinClicksForSourceRanking
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetMaxShortcutsReturned() *SettingProto {
	if x != nil {
		return x.MaxShortcutsReturned
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetQueryThreadCorePoolSize() *SettingProto {
	if x != nil {
		return x.QueryThreadCorePoolSize
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetQueryThreadMaxPoolSize() *SettingProto {
	if x != nil {
		return x.QueryThreadMaxPoolSize
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetShortcutRefreshCorePoolSize() *SettingProto {
	if x != nil {
		return x.ShortcutRefreshCorePoolSize
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetShortcutRefreshMaxPoolSize() *SettingProto {
	if x != nil {
		return x.ShortcutRefreshMaxPoolSize
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetThreadKeepaliveSeconds() *SettingProto {
	if x != nil {
		return x.ThreadKeepaliveSeconds
	}
	return nil
}

func (x *SecureSettingsProto_Search) GetPerSourceConcurrentQueryLimit() *SettingProto {
	if x != nil {
		return x.PerSourceConcurrentQueryLimit
	}
	return nil
}

type SecureSettingsProto_CameraAutorotate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *SecureSettingsProto_CameraAutorotate) Reset() {
	*x = SecureSettingsProto_CameraAutorotate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_CameraAutorotate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_CameraAutorotate) ProtoMessage() {}

func (x *SecureSettingsProto_CameraAutorotate) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_CameraAutorotate.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_CameraAutorotate) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 40}
}

func (x *SecureSettingsProto_CameraAutorotate) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

type SecureSettingsProto_SpellChecker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	// "selected_spell_checker" in code.
	Selected *SettingProto `protobuf:"bytes,2,opt,name=selected" json:"selected,omitempty"`
	// "selected_spell_checker_subtype" in code.
	SelectedSubtype *SettingProto `protobuf:"bytes,3,opt,name=selected_subtype,json=selectedSubtype" json:"selected_subtype,omitempty"`
}

func (x *SecureSettingsProto_SpellChecker) Reset() {
	*x = SecureSettingsProto_SpellChecker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_SpellChecker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_SpellChecker) ProtoMessage() {}

func (x *SecureSettingsProto_SpellChecker) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_SpellChecker.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_SpellChecker) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 41}
}

func (x *SecureSettingsProto_SpellChecker) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SecureSettingsProto_SpellChecker) GetSelected() *SettingProto {
	if x != nil {
		return x.Selected
	}
	return nil
}

func (x *SecureSettingsProto_SpellChecker) GetSelectedSubtype() *SettingProto {
	if x != nil {
		return x.SelectedSubtype
	}
	return nil
}

type SecureSettingsProto_Sounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargingSoundsEnabled    *SettingProto `protobuf:"bytes,1,opt,name=charging_sounds_enabled,json=chargingSoundsEnabled" json:"charging_sounds_enabled,omitempty"`
	ChargingVibrationEnabled *SettingProto `protobuf:"bytes,2,opt,name=charging_vibration_enabled,json=chargingVibrationEnabled" json:"charging_vibration_enabled,omitempty"`
}

func (x *SecureSettingsProto_Sounds) Reset() {
	*x = SecureSettingsProto_Sounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Sounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Sounds) ProtoMessage() {}

func (x *SecureSettingsProto_Sounds) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Sounds.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Sounds) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 42}
}

func (x *SecureSettingsProto_Sounds) GetChargingSoundsEnabled() *SettingProto {
	if x != nil {
		return x.ChargingSoundsEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Sounds) GetChargingVibrationEnabled() *SettingProto {
	if x != nil {
		return x.ChargingVibrationEnabled
	}
	return nil
}

type SecureSettingsProto_TrackpadGesture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackpadGestureBackEnabled         *SettingProto `protobuf:"bytes,1,opt,name=trackpad_gesture_back_enabled,json=trackpadGestureBackEnabled" json:"trackpad_gesture_back_enabled,omitempty"`
	TrackpadGestureHomeEnabled         *SettingProto `protobuf:"bytes,2,opt,name=trackpad_gesture_home_enabled,json=trackpadGestureHomeEnabled" json:"trackpad_gesture_home_enabled,omitempty"`
	TrackpadGestureOverviewEnabled     *SettingProto `protobuf:"bytes,3,opt,name=trackpad_gesture_overview_enabled,json=trackpadGestureOverviewEnabled" json:"trackpad_gesture_overview_enabled,omitempty"`
	TrackpadGestureNotificationEnabled *SettingProto `protobuf:"bytes,4,opt,name=trackpad_gesture_notification_enabled,json=trackpadGestureNotificationEnabled" json:"trackpad_gesture_notification_enabled,omitempty"`
	TrackpadGestureQuickSwitchEnabled  *SettingProto `protobuf:"bytes,5,opt,name=trackpad_gesture_quick_switch_enabled,json=trackpadGestureQuickSwitchEnabled" json:"trackpad_gesture_quick_switch_enabled,omitempty"`
}

func (x *SecureSettingsProto_TrackpadGesture) Reset() {
	*x = SecureSettingsProto_TrackpadGesture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_TrackpadGesture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_TrackpadGesture) ProtoMessage() {}

func (x *SecureSettingsProto_TrackpadGesture) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_TrackpadGesture.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_TrackpadGesture) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 43}
}

func (x *SecureSettingsProto_TrackpadGesture) GetTrackpadGestureBackEnabled() *SettingProto {
	if x != nil {
		return x.TrackpadGestureBackEnabled
	}
	return nil
}

func (x *SecureSettingsProto_TrackpadGesture) GetTrackpadGestureHomeEnabled() *SettingProto {
	if x != nil {
		return x.TrackpadGestureHomeEnabled
	}
	return nil
}

func (x *SecureSettingsProto_TrackpadGesture) GetTrackpadGestureOverviewEnabled() *SettingProto {
	if x != nil {
		return x.TrackpadGestureOverviewEnabled
	}
	return nil
}

func (x *SecureSettingsProto_TrackpadGesture) GetTrackpadGestureNotificationEnabled() *SettingProto {
	if x != nil {
		return x.TrackpadGestureNotificationEnabled
	}
	return nil
}

func (x *SecureSettingsProto_TrackpadGesture) GetTrackpadGestureQuickSwitchEnabled() *SettingProto {
	if x != nil {
		return x.TrackpadGestureQuickSwitchEnabled
	}
	return nil
}

type SecureSettingsProto_Tts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultRate    *SettingProto `protobuf:"bytes,1,opt,name=default_rate,json=defaultRate" json:"default_rate,omitempty"`
	DefaultPitch   *SettingProto `protobuf:"bytes,2,opt,name=default_pitch,json=defaultPitch" json:"default_pitch,omitempty"`
	DefaultSynth   *SettingProto `protobuf:"bytes,3,opt,name=default_synth,json=defaultSynth" json:"default_synth,omitempty"`
	DefaultLocale  *SettingProto `protobuf:"bytes,4,opt,name=default_locale,json=defaultLocale" json:"default_locale,omitempty"`
	EnabledPlugins *SettingProto `protobuf:"bytes,5,opt,name=enabled_plugins,json=enabledPlugins" json:"enabled_plugins,omitempty"`
}

func (x *SecureSettingsProto_Tts) Reset() {
	*x = SecureSettingsProto_Tts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Tts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Tts) ProtoMessage() {}

func (x *SecureSettingsProto_Tts) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Tts.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Tts) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 44}
}

func (x *SecureSettingsProto_Tts) GetDefaultRate() *SettingProto {
	if x != nil {
		return x.DefaultRate
	}
	return nil
}

func (x *SecureSettingsProto_Tts) GetDefaultPitch() *SettingProto {
	if x != nil {
		return x.DefaultPitch
	}
	return nil
}

func (x *SecureSettingsProto_Tts) GetDefaultSynth() *SettingProto {
	if x != nil {
		return x.DefaultSynth
	}
	return nil
}

func (x *SecureSettingsProto_Tts) GetDefaultLocale() *SettingProto {
	if x != nil {
		return x.DefaultLocale
	}
	return nil
}

func (x *SecureSettingsProto_Tts) GetEnabledPlugins() *SettingProto {
	if x != nil {
		return x.EnabledPlugins
	}
	return nil
}

type SecureSettingsProto_Tty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TtyModeEnabled *SettingProto `protobuf:"bytes,1,opt,name=tty_mode_enabled,json=ttyModeEnabled" json:"tty_mode_enabled,omitempty"`
	// The preferred TTY mode:
	// 0 = TTy Off, CDMA default
	// 1 = TTY Full
	// 2 = TTY HCO
	// 3 = TTY VCO
	PreferredTtyMode *SettingProto `protobuf:"bytes,2,opt,name=preferred_tty_mode,json=preferredTtyMode" json:"preferred_tty_mode,omitempty"`
}

func (x *SecureSettingsProto_Tty) Reset() {
	*x = SecureSettingsProto_Tty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Tty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Tty) ProtoMessage() {}

func (x *SecureSettingsProto_Tty) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Tty.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Tty) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 45}
}

func (x *SecureSettingsProto_Tty) GetTtyModeEnabled() *SettingProto {
	if x != nil {
		return x.TtyModeEnabled
	}
	return nil
}

func (x *SecureSettingsProto_Tty) GetPreferredTtyMode() *SettingProto {
	if x != nil {
		return x.PreferredTtyMode
	}
	return nil
}

type SecureSettingsProto_Tv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the current user has been set up via setup wizard (0 = false,
	// 1 = true). This value differs from USER_SETUP_COMPLETE in that it can be
	// reset back to 0 in case SetupWizard has been re-enabled on TV devices.
	UserSetupComplete *SettingProto `protobuf:"bytes,1,opt,name=user_setup_complete,json=userSetupComplete" json:"user_setup_complete,omitempty"`
	InputHiddenInputs *SettingProto `protobuf:"bytes,2,opt,name=input_hidden_inputs,json=inputHiddenInputs" json:"input_hidden_inputs,omitempty"`
	InputCustomLabels *SettingProto `protobuf:"bytes,3,opt,name=input_custom_labels,json=inputCustomLabels" json:"input_custom_labels,omitempty"`
}

func (x *SecureSettingsProto_Tv) Reset() {
	*x = SecureSettingsProto_Tv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Tv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Tv) ProtoMessage() {}

func (x *SecureSettingsProto_Tv) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Tv.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Tv) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 46}
}

func (x *SecureSettingsProto_Tv) GetUserSetupComplete() *SettingProto {
	if x != nil {
		return x.UserSetupComplete
	}
	return nil
}

func (x *SecureSettingsProto_Tv) GetInputHiddenInputs() *SettingProto {
	if x != nil {
		return x.InputHiddenInputs
	}
	return nil
}

func (x *SecureSettingsProto_Tv) GetInputCustomLabels() *SettingProto {
	if x != nil {
		return x.InputCustomLabels
	}
	return nil
}

type SecureSettingsProto_Voice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The currently selected voice interaction service flattened ComponentName.
	InteractionService *SettingProto `protobuf:"bytes,1,opt,name=interaction_service,json=interactionService" json:"interaction_service,omitempty"`
	// The ComponentName string of the service to be used as the voice
	// recognition service.
	RecognitionService *SettingProto `protobuf:"bytes,2,opt,name=recognition_service,json=recognitionService" json:"recognition_service,omitempty"`
}

func (x *SecureSettingsProto_Voice) Reset() {
	*x = SecureSettingsProto_Voice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Voice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Voice) ProtoMessage() {}

func (x *SecureSettingsProto_Voice) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Voice.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Voice) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 47}
}

func (x *SecureSettingsProto_Voice) GetInteractionService() *SettingProto {
	if x != nil {
		return x.InteractionService
	}
	return nil
}

func (x *SecureSettingsProto_Voice) GetRecognitionService() *SettingProto {
	if x != nil {
		return x.RecognitionService
	}
	return nil
}

type SecureSettingsProto_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What behavior should be invoked when the volume hush gesture is triggered
	// One of VOLUME_HUSH_OFF, VOLUME_HUSH_VIBRATE, VOLUME_HUSH_MUTE.
	HushGesture *SettingProto `protobuf:"bytes,1,opt,name=hush_gesture,json=hushGesture" json:"hush_gesture,omitempty"`
	// Persisted playback time after a user confirmation of an unsafe volume level.
	UnsafeVolumeMusicActiveMs *SettingProto `protobuf:"bytes,2,opt,name=unsafe_volume_music_active_ms,json=unsafeVolumeMusicActiveMs" json:"unsafe_volume_music_active_ms,omitempty"`
}

func (x *SecureSettingsProto_Volume) Reset() {
	*x = SecureSettingsProto_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Volume) ProtoMessage() {}

func (x *SecureSettingsProto_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Volume.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Volume) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 48}
}

func (x *SecureSettingsProto_Volume) GetHushGesture() *SettingProto {
	if x != nil {
		return x.HushGesture
	}
	return nil
}

func (x *SecureSettingsProto_Volume) GetUnsafeVolumeMusicActiveMs() *SettingProto {
	if x != nil {
		return x.UnsafeVolumeMusicActiveMs
	}
	return nil
}

type SecureSettingsProto_Vr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayMode      *SettingProto `protobuf:"bytes,1,opt,name=display_mode,json=displayMode" json:"display_mode,omitempty"`
	EnabledListeners *SettingProto `protobuf:"bytes,2,opt,name=enabled_listeners,json=enabledListeners" json:"enabled_listeners,omitempty"`
}

func (x *SecureSettingsProto_Vr) Reset() {
	*x = SecureSettingsProto_Vr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Vr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Vr) ProtoMessage() {}

func (x *SecureSettingsProto_Vr) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Vr.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Vr) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 49}
}

func (x *SecureSettingsProto_Vr) GetDisplayMode() *SettingProto {
	if x != nil {
		return x.DisplayMode
	}
	return nil
}

func (x *SecureSettingsProto_Vr) GetEnabledListeners() *SettingProto {
	if x != nil {
		return x.EnabledListeners
	}
	return nil
}

type SecureSettingsProto_Zen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If 0, turning on dnd manually will last indefinitely. Else if
	// non-negative, turning on dnd manually will last for this many minutes.
	// Else (if negative), turning on dnd manually will surface a dialog that
	// prompts user to specify a duration.
	Duration                   *SettingProto `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	ShowZenUpgradeNotification *SettingProto `protobuf:"bytes,2,opt,name=show_zen_upgrade_notification,json=showZenUpgradeNotification" json:"show_zen_upgrade_notification,omitempty"`
	ShowZenSettingsSuggestion  *SettingProto `protobuf:"bytes,3,opt,name=show_zen_settings_suggestion,json=showZenSettingsSuggestion" json:"show_zen_settings_suggestion,omitempty"`
	SettingsUpdated            *SettingProto `protobuf:"bytes,4,opt,name=settings_updated,json=settingsUpdated" json:"settings_updated,omitempty"`
	SettingsSuggestionViewed   *SettingProto `protobuf:"bytes,5,opt,name=settings_suggestion_viewed,json=settingsSuggestionViewed" json:"settings_suggestion_viewed,omitempty"`
}

func (x *SecureSettingsProto_Zen) Reset() {
	*x = SecureSettingsProto_Zen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecureSettingsProto_Zen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecureSettingsProto_Zen) ProtoMessage() {}

func (x *SecureSettingsProto_Zen) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecureSettingsProto_Zen.ProtoReflect.Descriptor instead.
func (*SecureSettingsProto_Zen) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP(), []int{0, 50}
}

func (x *SecureSettingsProto_Zen) GetDuration() *SettingProto {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SecureSettingsProto_Zen) GetShowZenUpgradeNotification() *SettingProto {
	if x != nil {
		return x.ShowZenUpgradeNotification
	}
	return nil
}

func (x *SecureSettingsProto_Zen) GetShowZenSettingsSuggestion() *SettingProto {
	if x != nil {
		return x.ShowZenSettingsSuggestion
	}
	return nil
}

func (x *SecureSettingsProto_Zen) GetSettingsUpdated() *SettingProto {
	if x != nil {
		return x.SettingsUpdated
	}
	return nil
}

func (x *SecureSettingsProto_Zen) GetSettingsSuggestionViewed() *SettingProto {
	if x != nil {
		return x.SettingsSuggestionViewed
	}
	return nil
}

var File_frameworks_base_core_proto_android_providers_settings_secure_proto protoreflect.FileDescriptor

var file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDesc = []byte{
	0x0a, 0x42, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x42, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0xa1, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x67, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a,
	0x0e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x6c, 0x65, 0x65, 0x70, 0x52, 0x0d, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x12, 0x68, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x67,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x5f, 0x0a,
	0x0d, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x56, 0x70,
	0x6e, 0x52, 0x0b, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x56, 0x70, 0x6e, 0x12, 0x47,
	0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x61, 0x6e, 0x72, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x61, 0x6e, 0x72, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x06,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x0e,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x56,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x70,
	0x0a, 0x1a, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x77,
	0x68, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x4f, 0x6e, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x12, 0x6a, 0x0a, 0x17, 0x62, 0x75, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x62, 0x75, 0x67, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x4e, 0x0a, 0x06,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x65, 0x0a, 0x14,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x12, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x76, 0x0a, 0x1d,
	0x63, 0x6d, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6b, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1a, 0x63, 0x6d, 0x61, 0x73, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x6b, 0x67, 0x12, 0x5b, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x92, 0x01, 0x0a, 0x2c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x27, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x77, 0x0a, 0x1d, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x1b, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x54, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x71, 0x0a, 0x1a, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x18, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x12, 0x60, 0x0a,
	0x12, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x61, 0x6b, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x70, 0x54, 0x6f, 0x57, 0x61, 0x6b, 0x65, 0x12,
	0x55, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x6f, 0x7a, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x7a, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x7a, 0x65,
	0x12, 0x7d, 0x0a, 0x20, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x1e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x12, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x1e, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1b,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x52, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x16, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x66,
	0x6f, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x67,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x1c, 0x69, 0x6d, 0x6d, 0x65,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x1a, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4e, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x61, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x6a, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x4e, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x70, 0x70, 0x73, 0x12, 0x65,
	0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x6b, 0x65, 0x79,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x5d, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x54, 0x0a, 0x08,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x54, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x13, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x5b, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x69,
	0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x45,
	0x78, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x16, 0x6c, 0x6f, 0x63,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x6e, 0x75, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13,
	0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d,
	0x65, 0x6e, 0x75, 0x12, 0x61, 0x0a, 0x12, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x64, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x60,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x50, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x60, 0x0a, 0x12,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x73, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x6b,
	0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x67,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x6e, 0x61, 0x76,
	0x5f, 0x62, 0x61, 0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x76, 0x42,
	0x61, 0x72, 0x52, 0x06, 0x6e, 0x61, 0x76, 0x42, 0x61, 0x72, 0x12, 0x5c, 0x0a, 0x0f, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x6e, 0x66, 0x63, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x66, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x6e, 0x66, 0x63, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x0d, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x0c, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x60, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x09, 0x6f, 0x6e,
	0x65, 0x68, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x6e, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x68, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x6a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x6e, 0x0a, 0x12, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65,
	0x6e, 0x75, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x4d, 0x65, 0x6e, 0x75, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x72, 0x0a, 0x14, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x61, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x02, 0x71, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x02, 0x71,
	0x73, 0x12, 0x74, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x52, 0x12, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a,
	0x10, 0x72, 0x74, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x72, 0x74,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0b,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x52, 0x0b,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x6d, 0x0a, 0x11, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x75,
	0x74, 0x6f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x41, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x0c, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x62, 0x0a,
	0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x7e, 0x0a, 0x22, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x76,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x72, 0x61,
	0x73, 0x68, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x64, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x6c, 0x65, 0x65, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x0c, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x6b, 0x0a, 0x17, 0x73, 0x6d, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x15, 0x73, 0x6d, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x72,
	0x0a, 0x1b, 0x73, 0x74, 0x79, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x18, 0x73, 0x74, 0x79, 0x6c, 0x75, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x73, 0x77, 0x69, 0x70, 0x65, 0x5f, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x20, 0x73, 0x77, 0x69, 0x70, 0x65, 0x42, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x78, 0x0a, 0x1e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x24, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x21, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x18,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x16, 0x74, 0x72, 0x75, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x47,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64,
	0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x03, 0x74, 0x74, 0x73, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x74, 0x73, 0x52, 0x03, 0x74, 0x74, 0x73, 0x12, 0x45,
	0x0a, 0x03, 0x74, 0x74, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x74, 0x79,
	0x52, 0x03, 0x74, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x02, 0x74, 0x76, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x76, 0x52, 0x02, 0x74, 0x76, 0x12, 0x57, 0x0a, 0x0d, 0x75, 0x69, 0x5f,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x75, 0x69, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x7c, 0x0a, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64,
	0x12, 0x83, 0x01, 0x0a, 0x24, 0x75, 0x73, 0x62, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x20, 0x75, 0x73, 0x62, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x02, 0x76, 0x72, 0x18, 0x43,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x72, 0x52, 0x02, 0x76, 0x72, 0x12, 0x65, 0x0a, 0x14,
	0x77, 0x61, 0x6b, 0x65, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x12, 0x77, 0x61, 0x6b, 0x65, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x03, 0x7a, 0x65, 0x6e, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x5a, 0x65, 0x6e, 0x52, 0x03, 0x7a, 0x65, 0x6e, 0x1a, 0xb4, 0x33, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x1e, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1c, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x61,
	0x75, 0x74, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5c, 0x0a,
	0x0f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x6b, 0x0a, 0x17, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x15, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x11,
	0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x60,
	0x0a, 0x11, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10,
	0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x12, 0x73, 0x0a, 0x1b, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x1b, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x19, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x65, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x14, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x63,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x67, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x6b, 0x0a, 0x17, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x15, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x66, 0x61, 0x63, 0x65, 0x12, 0x67, 0x0a,
	0x15, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x13, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x6e,
	0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x71, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x64, 0x61, 0x6c, 0x74, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x6c, 0x74, 0x6f, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x12, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x6c, 0x74, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x61, 0x6c, 0x74, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x6f, 0x0a,
	0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x77,
	0x0a, 0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x24, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x21, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x73,
	0x0a, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x70, 0x0a, 0x1a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x68, 0x69,
	0x67, 0x68, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x63, 0x75, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x12, 0x67, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x6b, 0x0a,
	0x17, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x12, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x73, 0x6f, 0x66,
	0x74, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a,
	0x0e, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x61,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x6f, 0x0a, 0x19, 0x74, 0x6f, 0x75,
	0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x17, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x30, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x2c, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x75, 0x0a,
	0x1d, 0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x75, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x6e, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x12, 0x6e, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x75, 0x69, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x69, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x12, 0x7d, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x1e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x89, 0x01, 0x0a, 0x26, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x24, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x19, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7c, 0x0a, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x25, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x21, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x6e, 0x75, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6e, 0x75,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x28, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x24, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6e, 0x75, 0x46, 0x61, 0x64, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x1e, 0x6f, 0x64, 0x69, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x69, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x1a, 0x6f, 0x64, 0x69, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x55, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x9d,
	0x01, 0x0a, 0x31, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x95, 0x01, 0x0a, 0x2d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x67,
	0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x29, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x74, 0x0a, 0x1c, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x69,
	0x64, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x68,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x18, 0x68, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x15, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6e, 0x0a, 0x19, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16,
	0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x7c, 0x0a, 0x20, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1d, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x69,
	0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x94, 0x01, 0x0a, 0x2c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x29, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x79, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x2b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f,
	0x6e, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62,
	0x65, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x26, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x8b,
	0x01, 0x0a, 0x28, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x24, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xab, 0x01, 0x0a,
	0x39, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x77, 0x6f,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x74,
	0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x33, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x77, 0x6f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65,
	0x54, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x71, 0x73,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x09, 0x71, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x2c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x69, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x61,
	0x6e, 0x79, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x27, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x69, 0x6e, 0x63, 0x68, 0x54, 0x6f,
	0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x6e, 0x79, 0x77, 0x68, 0x65, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x91, 0x01, 0x0a, 0x2b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x27,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x50, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08,
	0x64, 0x1a, 0x5e, 0x0a, 0x0d, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x12, 0x4d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x1a, 0xa4, 0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x56, 0x70,
	0x6e, 0x12, 0x3a, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x4f, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x3a, 0x08,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x88, 0x0c, 0x0a, 0x06, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x12, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x5c, 0x0a, 0x0f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e,
	0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x64,
	0x0a, 0x13, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x12, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x1e, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x1b, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x65,
	0x0a, 0x14, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x12, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x57, 0x61, 0x6b, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x16, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x67, 0x65, 0x73, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x67, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x76, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x76, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x1e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x93, 0x01, 0x0a, 0x2c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x28, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x02, 0x08, 0x64, 0x1a, 0xf6, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x1c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x19, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x9a, 0x07, 0x0a,
	0x08, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x1a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x72, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x2b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x25,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x1a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6f, 0x0a, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x72, 0x69, 0x3a,
	0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xdd, 0x03, 0x0a, 0x17, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x12,
	0x58, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x64, 0x0a, 0x14, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x42, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a,
	0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xa7, 0x05, 0x0a, 0x06, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x4d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x1a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x2a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x24, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x02, 0x08, 0x64, 0x1a, 0xcd, 0x03, 0x0a, 0x06, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x5e,
	0x0a, 0x10, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x67,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7d,
	0x0a, 0x21, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1d,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x47, 0x65,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x73, 0x0a,
	0x1c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x77, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6c, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x54, 0x77, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x46, 0x6c, 0x69, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x65, 0x0a, 0x14, 0x6c, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x6c, 0x69, 0x66, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x02, 0x08, 0x64, 0x1a, 0x7c, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x6f, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x63, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x4d, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x9a, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x24, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x02, 0x08, 0x64, 0x1a, 0xff, 0x04, 0x0a, 0x04, 0x44, 0x6f, 0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4f, 0x6e, 0x12, 0x5c, 0x0a,
	0x10, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x4f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x4f, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x62, 0x0a, 0x13, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x10, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x4f, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x54, 0x61, 0x70, 0x12, 0x55, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a,
	0x70, 0x75, 0x6c, 0x73, 0x65, 0x4f, 0x6e, 0x54, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x8c, 0x02, 0x0a, 0x11, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x19, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x17, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x65,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x1f,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1c, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x1a, 0xdb, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x44, 0x69, 0x6d,
	0x6d, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x6d,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x69, 0x6d,
	0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x14,
	0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x11, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x69, 0x6d, 0x6d, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x4e, 0x69,
	0x74, 0x73, 0x1a, 0xb9, 0x0a, 0x0a, 0x07, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x58,
	0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x63, 0x0a, 0x13, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x11, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x0e, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x63, 0x0a, 0x13, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x1a, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x19, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x19, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x54, 0x6f, 0x75, 0x63, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x6f,
	0x75, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x1d, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x61,
	0x70, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x19, 0x61, 0x77, 0x61, 0x72, 0x65, 0x54, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47,
	0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x1b, 0x61,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x74,
	0x6f, 0x75, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x61, 0x77, 0x61, 0x72, 0x65, 0x54, 0x61, 0x70, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x83,
	0x02, 0x0a, 0x11, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x73,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x77, 0x0a, 0x1e, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x65,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x1a, 0xe2, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x63, 0x61, 0x6c, 0x6c, 0x12,
	0x67, 0x0a, 0x15, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x13, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x62, 0x61, 0x63,
	0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x3a,
	0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x8e, 0x07, 0x0a, 0x0c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x76, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1a, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x71, 0x0a, 0x1a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x18, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x1b, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6d, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x48, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x70,
	0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x8e, 0x01, 0x0a, 0x08, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x77, 0x69, 0x70, 0x65,
	0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1a, 0x73, 0x77, 0x69, 0x70, 0x65, 0x55, 0x70, 0x54, 0x6f,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x70, 0x70, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xb2, 0x01, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72,
	0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x1a, 0xd5, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x5c, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x3a, 0x08,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xb5, 0x03, 0x0a, 0x0a, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x73, 0x0a, 0x1b, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x61, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x62, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64,
	0x1a, 0x83, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x08, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x8b, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x67, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x64, 0x12, 0x58, 0x0a, 0x0d, 0x75, 0x6d, 0x73,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x75, 0x6d, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x75, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x09, 0x75, 0x6d,
	0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x61, 0x0a, 0x12, 0x75, 0x6d, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x75, 0x6d, 0x73, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x02, 0x08, 0x64, 0x1a, 0xda, 0x01, 0x0a, 0x06, 0x4e, 0x61, 0x76, 0x42, 0x61, 0x72, 0x12,
	0x66, 0x0a, 0x15, 0x6e, 0x61, 0x76, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x12, 0x6e, 0x61, 0x76, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x6e, 0x61, 0x76, 0x5f, 0x62,
	0x61, 0x72, 0x5f, 0x6b, 0x69, 0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x6e, 0x61, 0x76, 0x42, 0x61, 0x72, 0x4b,
	0x69, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08,
	0x64, 0x1a, 0xbf, 0x02, 0x0a, 0x0a, 0x4e, 0x66, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x60, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x70, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x72, 0x69, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x02, 0x08, 0x64, 0x1a, 0xc2, 0x04, 0x0a, 0x0c, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x08,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xee, 0x05, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x78, 0x0a,
	0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1b, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x62, 0x61, 0x64, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x62,
	0x61, 0x64, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1f, 0x73, 0x68, 0x6f, 0x77, 0x4e,
	0x6f, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x1c, 0x69, 0x6e,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x4d, 0x0a, 0x07, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x3a,
	0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xbb, 0x03, 0x0a, 0x09, 0x4f, 0x6e,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x6f,
	0x6e, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x6f, 0x6e, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x5c, 0x0a, 0x10, 0x74, 0x61, 0x70, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d,
	0x74, 0x61, 0x70, 0x73, 0x41, 0x70, 0x70, 0x54, 0x6f, 0x45, 0x78, 0x69, 0x74, 0x12, 0x6e, 0x0a,
	0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x08, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xbe, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x08,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x98, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x56, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x02, 0x08, 0x64, 0x1a, 0x65, 0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x6e, 0x75,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77,
	0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x98, 0x01, 0x0a, 0x11, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x4c, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x79, 0x0a, 0x1f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xae, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x72, 0x69, 0x12, 0x60, 0x0a, 0x17, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x16,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x08, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xc3, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x05, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6c,
	0x65, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xa7, 0x02, 0x0a,
	0x12, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x69, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x3a, 0x08, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x85, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x73, 0x68, 0x6f,
	0x77, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7e, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x1e, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xdd,
	0x03, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x5d, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x44, 0x6f, 0x63,
	0x6b, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e,
	0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x53, 0x6c, 0x65,
	0x65, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xeb,
	0x10, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x69, 0x0a, 0x16, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x54, 0x6f, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x68, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x70, 0x0a, 0x1a, 0x77, 0x65, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x77, 0x65, 0x62, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x7a, 0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x1c, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x67, 0x0a,
	0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74, 0x41, 0x67, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x71, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x67, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x7f, 0x0a, 0x22, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1e, 0x6d, 0x69, 0x6e, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x75, 0x0a, 0x1d, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x69, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x1b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x6f, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x79, 0x0a, 0x1f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1b,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x77, 0x0a, 0x1e, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x7d, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x1d, 0x70, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x61, 0x0a, 0x10,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x41, 0x75, 0x74, 0x6f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a,
	0x98, 0x02, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x4f, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x5e, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xf2, 0x01, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x6b, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x15, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x71, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x18, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a,
	0x92, 0x05, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x47, 0x65, 0x73, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x76, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f,
	0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x1a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x76, 0x0a, 0x1d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61,
	0x64, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f,
	0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x47, 0x65, 0x73,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x25, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64,
	0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x22, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70,
	0x61, 0x64, 0x47, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x25, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x21, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x64, 0x47, 0x65, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0xca, 0x03, 0x0a, 0x03, 0x54, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x58,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08,
	0x64, 0x1a, 0xd1, 0x01, 0x0a, 0x03, 0x54, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x10, 0x74, 0x74, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x74, 0x74, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x54, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xa7, 0x02, 0x0a, 0x02, 0x54, 0x76, 0x12, 0x63, 0x0a, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x58, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a,
	0xdd, 0x01, 0x0a, 0x05, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x64, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a,
	0xe1, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x68, 0x75,
	0x73, 0x68, 0x5f, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x68, 0x75, 0x73, 0x68, 0x47, 0x65, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x75, 0x0a, 0x1d, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19,
	0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x73, 0x69,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x02, 0x08, 0x64, 0x1a, 0xc8, 0x01, 0x0a, 0x02, 0x56, 0x72, 0x12, 0x56, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xa1,
	0x04, 0x0a, 0x03, 0x5a, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x7a, 0x65, 0x6e, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x5a, 0x65, 0x6e, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x74, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x19, 0x73, 0x68, 0x6f, 0x77,
	0x5a, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x18,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02,
	0x08, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x4a, 0x04, 0x08, 0x5b,
	0x10, 0x5c, 0x52, 0x11, 0x6e, 0x61, 0x76, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x6b, 0x69, 0x64, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x02, 0x50, 0x01,
}

var (
	file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescOnce sync.Once
	file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescData = file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDesc
)

func file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescGZIP() []byte {
	file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescOnce.Do(func() {
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescData = protoimpl.X.CompressGZIP(file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescData)
	})
	return file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDescData
}

var file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_frameworks_base_core_proto_android_providers_settings_secure_proto_goTypes = []any{
	(*SecureSettingsProto)(nil),                         // 0: android.providers.settings.SecureSettingsProto
	(*SecureSettingsProto_Accessibility)(nil),           // 1: android.providers.settings.SecureSettingsProto.Accessibility
	(*SecureSettingsProto_AdaptiveSleep)(nil),           // 2: android.providers.settings.SecureSettingsProto.AdaptiveSleep
	(*SecureSettingsProto_AlwaysOnVpn)(nil),             // 3: android.providers.settings.SecureSettingsProto.AlwaysOnVpn
	(*SecureSettingsProto_Assist)(nil),                  // 4: android.providers.settings.SecureSettingsProto.Assist
	(*SecureSettingsProto_AssistHandles)(nil),           // 5: android.providers.settings.SecureSettingsProto.AssistHandles
	(*SecureSettingsProto_Autofill)(nil),                // 6: android.providers.settings.SecureSettingsProto.Autofill
	(*SecureSettingsProto_AutomaticStorageManager)(nil), // 7: android.providers.settings.SecureSettingsProto.AutomaticStorageManager
	(*SecureSettingsProto_Backup)(nil),                  // 8: android.providers.settings.SecureSettingsProto.Backup
	(*SecureSettingsProto_Camera)(nil),                  // 9: android.providers.settings.SecureSettingsProto.Camera
	(*SecureSettingsProto_Clipboard)(nil),               // 10: android.providers.settings.SecureSettingsProto.Clipboard
	(*SecureSettingsProto_Controls)(nil),                // 11: android.providers.settings.SecureSettingsProto.Controls
	(*SecureSettingsProto_DateTime)(nil),                // 12: android.providers.settings.SecureSettingsProto.DateTime
	(*SecureSettingsProto_Doze)(nil),                    // 13: android.providers.settings.SecureSettingsProto.Doze
	(*SecureSettingsProto_EmergencyResponse)(nil),       // 14: android.providers.settings.SecureSettingsProto.EmergencyResponse
	(*SecureSettingsProto_EvenDimmer)(nil),              // 15: android.providers.settings.SecureSettingsProto.EvenDimmer
	(*SecureSettingsProto_Gesture)(nil),                 // 16: android.providers.settings.SecureSettingsProto.Gesture
	(*SecureSettingsProto_GestureNavigation)(nil),       // 17: android.providers.settings.SecureSettingsProto.GestureNavigation
	(*SecureSettingsProto_Incall)(nil),                  // 18: android.providers.settings.SecureSettingsProto.Incall
	(*SecureSettingsProto_InputMethods)(nil),            // 19: android.providers.settings.SecureSettingsProto.InputMethods
	(*SecureSettingsProto_Launcher)(nil),                // 20: android.providers.settings.SecureSettingsProto.Launcher
	(*SecureSettingsProto_Location)(nil),                // 21: android.providers.settings.SecureSettingsProto.Location
	(*SecureSettingsProto_LocationAccessCheck)(nil),     // 22: android.providers.settings.SecureSettingsProto.LocationAccessCheck
	(*SecureSettingsProto_LockScreen)(nil),              // 23: android.providers.settings.SecureSettingsProto.LockScreen
	(*SecureSettingsProto_ManagedProfile)(nil),          // 24: android.providers.settings.SecureSettingsProto.ManagedProfile
	(*SecureSettingsProto_Mount)(nil),                   // 25: android.providers.settings.SecureSettingsProto.Mount
	(*SecureSettingsProto_NavBar)(nil),                  // 26: android.providers.settings.SecureSettingsProto.NavBar
	(*SecureSettingsProto_NfcPayment)(nil),              // 27: android.providers.settings.SecureSettingsProto.NfcPayment
	(*SecureSettingsProto_NightDisplay)(nil),            // 28: android.providers.settings.SecureSettingsProto.NightDisplay
	(*SecureSettingsProto_Notification)(nil),            // 29: android.providers.settings.SecureSettingsProto.Notification
	(*SecureSettingsProto_OneHanded)(nil),               // 30: android.providers.settings.SecureSettingsProto.OneHanded
	(*SecureSettingsProto_PackageVerifier)(nil),         // 31: android.providers.settings.SecureSettingsProto.PackageVerifier
	(*SecureSettingsProto_ParentalControl)(nil),         // 32: android.providers.settings.SecureSettingsProto.ParentalControl
	(*SecureSettingsProto_PowerMenuPrivacy)(nil),        // 33: android.providers.settings.SecureSettingsProto.PowerMenuPrivacy
	(*SecureSettingsProto_ExtraLowPowerMode)(nil),       // 34: android.providers.settings.SecureSettingsProto.ExtraLowPowerMode
	(*SecureSettingsProto_PrintService)(nil),            // 35: android.providers.settings.SecureSettingsProto.PrintService
	(*SecureSettingsProto_QuickSettings)(nil),           // 36: android.providers.settings.SecureSettingsProto.QuickSettings
	(*SecureSettingsProto_ReduceBrightColors)(nil),      // 37: android.providers.settings.SecureSettingsProto.ReduceBrightColors
	(*SecureSettingsProto_Rotation)(nil),                // 38: android.providers.settings.SecureSettingsProto.Rotation
	(*SecureSettingsProto_Screensaver)(nil),             // 39: android.providers.settings.SecureSettingsProto.Screensaver
	(*SecureSettingsProto_Search)(nil),                  // 40: android.providers.settings.SecureSettingsProto.Search
	(*SecureSettingsProto_CameraAutorotate)(nil),        // 41: android.providers.settings.SecureSettingsProto.CameraAutorotate
	(*SecureSettingsProto_SpellChecker)(nil),            // 42: android.providers.settings.SecureSettingsProto.SpellChecker
	(*SecureSettingsProto_Sounds)(nil),                  // 43: android.providers.settings.SecureSettingsProto.Sounds
	(*SecureSettingsProto_TrackpadGesture)(nil),         // 44: android.providers.settings.SecureSettingsProto.TrackpadGesture
	(*SecureSettingsProto_Tts)(nil),                     // 45: android.providers.settings.SecureSettingsProto.Tts
	(*SecureSettingsProto_Tty)(nil),                     // 46: android.providers.settings.SecureSettingsProto.Tty
	(*SecureSettingsProto_Tv)(nil),                      // 47: android.providers.settings.SecureSettingsProto.Tv
	(*SecureSettingsProto_Voice)(nil),                   // 48: android.providers.settings.SecureSettingsProto.Voice
	(*SecureSettingsProto_Volume)(nil),                  // 49: android.providers.settings.SecureSettingsProto.Volume
	(*SecureSettingsProto_Vr)(nil),                      // 50: android.providers.settings.SecureSettingsProto.Vr
	(*SecureSettingsProto_Zen)(nil),                     // 51: android.providers.settings.SecureSettingsProto.Zen
	(*SettingsOperationProto)(nil),                      // 52: android.providers.settings.SettingsOperationProto
	(*SettingProto)(nil),                                // 53: android.providers.settings.SettingProto
}
var file_frameworks_base_core_proto_android_providers_settings_secure_proto_depIdxs = []int32{
	52,  // 0: android.providers.settings.SecureSettingsProto.historical_operations:type_name -> android.providers.settings.SettingsOperationProto
	1,   // 1: android.providers.settings.SecureSettingsProto.accessibility:type_name -> android.providers.settings.SecureSettingsProto.Accessibility
	2,   // 2: android.providers.settings.SecureSettingsProto.adaptive_sleep:type_name -> android.providers.settings.SecureSettingsProto.AdaptiveSleep
	53,  // 3: android.providers.settings.SecureSettingsProto.allowed_geolocation_origins:type_name -> android.providers.settings.SettingProto
	3,   // 4: android.providers.settings.SecureSettingsProto.always_on_vpn:type_name -> android.providers.settings.SecureSettingsProto.AlwaysOnVpn
	53,  // 5: android.providers.settings.SecureSettingsProto.android_id:type_name -> android.providers.settings.SettingProto
	53,  // 6: android.providers.settings.SecureSettingsProto.anr_show_background:type_name -> android.providers.settings.SettingProto
	4,   // 7: android.providers.settings.SecureSettingsProto.assist:type_name -> android.providers.settings.SecureSettingsProto.Assist
	5,   // 8: android.providers.settings.SecureSettingsProto.assist_handles:type_name -> android.providers.settings.SecureSettingsProto.AssistHandles
	6,   // 9: android.providers.settings.SecureSettingsProto.autofill:type_name -> android.providers.settings.SecureSettingsProto.Autofill
	7,   // 10: android.providers.settings.SecureSettingsProto.automatic_storage_manager:type_name -> android.providers.settings.SecureSettingsProto.AutomaticStorageManager
	8,   // 11: android.providers.settings.SecureSettingsProto.backup:type_name -> android.providers.settings.SecureSettingsProto.Backup
	53,  // 12: android.providers.settings.SecureSettingsProto.bluetooth_on_while_driving:type_name -> android.providers.settings.SettingProto
	53,  // 13: android.providers.settings.SecureSettingsProto.bugreport_in_power_menu:type_name -> android.providers.settings.SettingProto
	9,   // 14: android.providers.settings.SecureSettingsProto.camera:type_name -> android.providers.settings.SecureSettingsProto.Camera
	53,  // 15: android.providers.settings.SecureSettingsProto.carrier_apps_handled:type_name -> android.providers.settings.SettingProto
	10,  // 16: android.providers.settings.SecureSettingsProto.clipboard:type_name -> android.providers.settings.SecureSettingsProto.Clipboard
	53,  // 17: android.providers.settings.SecureSettingsProto.cmas_additional_broadcast_pkg:type_name -> android.providers.settings.SettingProto
	53,  // 18: android.providers.settings.SecureSettingsProto.completed_categories:type_name -> android.providers.settings.SettingProto
	53,  // 19: android.providers.settings.SecureSettingsProto.connectivity_release_pending_intent_delay_ms:type_name -> android.providers.settings.SettingProto
	53,  // 20: android.providers.settings.SecureSettingsProto.adaptive_connectivity_enabled:type_name -> android.providers.settings.SettingProto
	11,  // 21: android.providers.settings.SecureSettingsProto.controls:type_name -> android.providers.settings.SecureSettingsProto.Controls
	53,  // 22: android.providers.settings.SecureSettingsProto.device_paired:type_name -> android.providers.settings.SettingProto
	53,  // 23: android.providers.settings.SecureSettingsProto.dialer_default_application:type_name -> android.providers.settings.SettingProto
	53,  // 24: android.providers.settings.SecureSettingsProto.display_density_forced:type_name -> android.providers.settings.SettingProto
	53,  // 25: android.providers.settings.SecureSettingsProto.double_tap_to_wake:type_name -> android.providers.settings.SettingProto
	12,  // 26: android.providers.settings.SecureSettingsProto.date_time:type_name -> android.providers.settings.SecureSettingsProto.DateTime
	13,  // 27: android.providers.settings.SecureSettingsProto.doze:type_name -> android.providers.settings.SecureSettingsProto.Doze
	53,  // 28: android.providers.settings.SecureSettingsProto.emergency_assistance_application:type_name -> android.providers.settings.SettingProto
	14,  // 29: android.providers.settings.SecureSettingsProto.emergency_response:type_name -> android.providers.settings.SecureSettingsProto.EmergencyResponse
	53,  // 30: android.providers.settings.SecureSettingsProto.enhanced_voice_privacy_enabled:type_name -> android.providers.settings.SettingProto
	15,  // 31: android.providers.settings.SecureSettingsProto.even_dimmer:type_name -> android.providers.settings.SecureSettingsProto.EvenDimmer
	53,  // 32: android.providers.settings.SecureSettingsProto.font_weight_adjustment:type_name -> android.providers.settings.SettingProto
	16,  // 33: android.providers.settings.SecureSettingsProto.gesture:type_name -> android.providers.settings.SecureSettingsProto.Gesture
	17,  // 34: android.providers.settings.SecureSettingsProto.gesture_navigation:type_name -> android.providers.settings.SecureSettingsProto.GestureNavigation
	53,  // 35: android.providers.settings.SecureSettingsProto.immersive_mode_confirmations:type_name -> android.providers.settings.SettingProto
	18,  // 36: android.providers.settings.SecureSettingsProto.incall:type_name -> android.providers.settings.SecureSettingsProto.Incall
	19,  // 37: android.providers.settings.SecureSettingsProto.input_methods:type_name -> android.providers.settings.SecureSettingsProto.InputMethods
	53,  // 38: android.providers.settings.SecureSettingsProto.install_non_market_apps:type_name -> android.providers.settings.SettingProto
	53,  // 39: android.providers.settings.SecureSettingsProto.instant_apps_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 40: android.providers.settings.SecureSettingsProto.keyguard_slice_uri:type_name -> android.providers.settings.SettingProto
	53,  // 41: android.providers.settings.SecureSettingsProto.last_setup_shown:type_name -> android.providers.settings.SettingProto
	20,  // 42: android.providers.settings.SecureSettingsProto.launcher:type_name -> android.providers.settings.SecureSettingsProto.Launcher
	21,  // 43: android.providers.settings.SecureSettingsProto.location:type_name -> android.providers.settings.SecureSettingsProto.Location
	22,  // 44: android.providers.settings.SecureSettingsProto.location_access_check:type_name -> android.providers.settings.SecureSettingsProto.LocationAccessCheck
	23,  // 45: android.providers.settings.SecureSettingsProto.lock_screen:type_name -> android.providers.settings.SecureSettingsProto.LockScreen
	53,  // 46: android.providers.settings.SecureSettingsProto.lock_to_app_exit_locked:type_name -> android.providers.settings.SettingProto
	53,  // 47: android.providers.settings.SecureSettingsProto.lockdown_in_power_menu:type_name -> android.providers.settings.SettingProto
	53,  // 48: android.providers.settings.SecureSettingsProto.long_press_timeout:type_name -> android.providers.settings.SettingProto
	53,  // 49: android.providers.settings.SecureSettingsProto.key_press_timeout_ms:type_name -> android.providers.settings.SettingProto
	53,  // 50: android.providers.settings.SecureSettingsProto.key_press_delay_ms:type_name -> android.providers.settings.SettingProto
	24,  // 51: android.providers.settings.SecureSettingsProto.managed_profile:type_name -> android.providers.settings.SecureSettingsProto.ManagedProfile
	25,  // 52: android.providers.settings.SecureSettingsProto.mount:type_name -> android.providers.settings.SecureSettingsProto.Mount
	53,  // 53: android.providers.settings.SecureSettingsProto.multi_press_timeout:type_name -> android.providers.settings.SettingProto
	26,  // 54: android.providers.settings.SecureSettingsProto.nav_bar:type_name -> android.providers.settings.SecureSettingsProto.NavBar
	53,  // 55: android.providers.settings.SecureSettingsProto.navigation_mode:type_name -> android.providers.settings.SettingProto
	27,  // 56: android.providers.settings.SecureSettingsProto.nfc_payment:type_name -> android.providers.settings.SecureSettingsProto.NfcPayment
	28,  // 57: android.providers.settings.SecureSettingsProto.night_display:type_name -> android.providers.settings.SecureSettingsProto.NightDisplay
	29,  // 58: android.providers.settings.SecureSettingsProto.notification:type_name -> android.providers.settings.SecureSettingsProto.Notification
	30,  // 59: android.providers.settings.SecureSettingsProto.onehanded:type_name -> android.providers.settings.SecureSettingsProto.OneHanded
	31,  // 60: android.providers.settings.SecureSettingsProto.package_verifier:type_name -> android.providers.settings.SecureSettingsProto.PackageVerifier
	32,  // 61: android.providers.settings.SecureSettingsProto.parental_control:type_name -> android.providers.settings.SecureSettingsProto.ParentalControl
	33,  // 62: android.providers.settings.SecureSettingsProto.power_menu_privacy:type_name -> android.providers.settings.SecureSettingsProto.PowerMenuPrivacy
	34,  // 63: android.providers.settings.SecureSettingsProto.extra_low_power_mode:type_name -> android.providers.settings.SecureSettingsProto.ExtraLowPowerMode
	35,  // 64: android.providers.settings.SecureSettingsProto.print_service:type_name -> android.providers.settings.SecureSettingsProto.PrintService
	36,  // 65: android.providers.settings.SecureSettingsProto.qs:type_name -> android.providers.settings.SecureSettingsProto.QuickSettings
	37,  // 66: android.providers.settings.SecureSettingsProto.reduce_bright_colors:type_name -> android.providers.settings.SecureSettingsProto.ReduceBrightColors
	38,  // 67: android.providers.settings.SecureSettingsProto.rotation:type_name -> android.providers.settings.SecureSettingsProto.Rotation
	53,  // 68: android.providers.settings.SecureSettingsProto.rtt_calling_mode:type_name -> android.providers.settings.SettingProto
	39,  // 69: android.providers.settings.SecureSettingsProto.screensaver:type_name -> android.providers.settings.SecureSettingsProto.Screensaver
	40,  // 70: android.providers.settings.SecureSettingsProto.search:type_name -> android.providers.settings.SecureSettingsProto.Search
	41,  // 71: android.providers.settings.SecureSettingsProto.camera_autorotate:type_name -> android.providers.settings.SecureSettingsProto.CameraAutorotate
	42,  // 72: android.providers.settings.SecureSettingsProto.spell_checker:type_name -> android.providers.settings.SecureSettingsProto.SpellChecker
	53,  // 73: android.providers.settings.SecureSettingsProto.settings_classname:type_name -> android.providers.settings.SettingProto
	53,  // 74: android.providers.settings.SecureSettingsProto.show_first_crash_dialog_dev_option:type_name -> android.providers.settings.SettingProto
	53,  // 75: android.providers.settings.SecureSettingsProto.skip_first_use_hints:type_name -> android.providers.settings.SettingProto
	53,  // 76: android.providers.settings.SecureSettingsProto.sleep_timeout:type_name -> android.providers.settings.SettingProto
	53,  // 77: android.providers.settings.SecureSettingsProto.sms_default_application:type_name -> android.providers.settings.SettingProto
	43,  // 78: android.providers.settings.SecureSettingsProto.sounds:type_name -> android.providers.settings.SecureSettingsProto.Sounds
	53,  // 79: android.providers.settings.SecureSettingsProto.stylus_pointer_icon_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 80: android.providers.settings.SecureSettingsProto.swipe_bottom_to_notification_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 81: android.providers.settings.SecureSettingsProto.sync_parent_sounds:type_name -> android.providers.settings.SettingProto
	53,  // 82: android.providers.settings.SecureSettingsProto.system_navigation_keys_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 83: android.providers.settings.SecureSettingsProto.theme_customization_overlay_packages:type_name -> android.providers.settings.SettingProto
	53,  // 84: android.providers.settings.SecureSettingsProto.trust_agents_initialized:type_name -> android.providers.settings.SettingProto
	44,  // 85: android.providers.settings.SecureSettingsProto.trackpad_gesture:type_name -> android.providers.settings.SecureSettingsProto.TrackpadGesture
	45,  // 86: android.providers.settings.SecureSettingsProto.tts:type_name -> android.providers.settings.SecureSettingsProto.Tts
	46,  // 87: android.providers.settings.SecureSettingsProto.tty:type_name -> android.providers.settings.SecureSettingsProto.Tty
	47,  // 88: android.providers.settings.SecureSettingsProto.tv:type_name -> android.providers.settings.SecureSettingsProto.Tv
	53,  // 89: android.providers.settings.SecureSettingsProto.ui_night_mode:type_name -> android.providers.settings.SettingProto
	53,  // 90: android.providers.settings.SecureSettingsProto.unknown_sources_default_reversed:type_name -> android.providers.settings.SettingProto
	53,  // 91: android.providers.settings.SecureSettingsProto.usb_audio_automatic_routing_disabled:type_name -> android.providers.settings.SettingProto
	53,  // 92: android.providers.settings.SecureSettingsProto.user_setup_complete:type_name -> android.providers.settings.SettingProto
	48,  // 93: android.providers.settings.SecureSettingsProto.voice:type_name -> android.providers.settings.SecureSettingsProto.Voice
	49,  // 94: android.providers.settings.SecureSettingsProto.volume:type_name -> android.providers.settings.SecureSettingsProto.Volume
	50,  // 95: android.providers.settings.SecureSettingsProto.vr:type_name -> android.providers.settings.SecureSettingsProto.Vr
	53,  // 96: android.providers.settings.SecureSettingsProto.wake_gesture_enabled:type_name -> android.providers.settings.SettingProto
	51,  // 97: android.providers.settings.SecureSettingsProto.zen:type_name -> android.providers.settings.SecureSettingsProto.Zen
	53,  // 98: android.providers.settings.SecureSettingsProto.Accessibility.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 99: android.providers.settings.SecureSettingsProto.Accessibility.enabled_accessibility_services:type_name -> android.providers.settings.SettingProto
	53,  // 100: android.providers.settings.SecureSettingsProto.Accessibility.autoclick_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 101: android.providers.settings.SecureSettingsProto.Accessibility.autoclick_delay:type_name -> android.providers.settings.SettingProto
	53,  // 102: android.providers.settings.SecureSettingsProto.Accessibility.button_target_component:type_name -> android.providers.settings.SettingProto
	53,  // 103: android.providers.settings.SecureSettingsProto.Accessibility.captioning_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 104: android.providers.settings.SecureSettingsProto.Accessibility.captioning_locale:type_name -> android.providers.settings.SettingProto
	53,  // 105: android.providers.settings.SecureSettingsProto.Accessibility.captioning_preset:type_name -> android.providers.settings.SettingProto
	53,  // 106: android.providers.settings.SecureSettingsProto.Accessibility.captioning_background_color:type_name -> android.providers.settings.SettingProto
	53,  // 107: android.providers.settings.SecureSettingsProto.Accessibility.captioning_foreground_color:type_name -> android.providers.settings.SettingProto
	53,  // 108: android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_type:type_name -> android.providers.settings.SettingProto
	53,  // 109: android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_color:type_name -> android.providers.settings.SettingProto
	53,  // 110: android.providers.settings.SecureSettingsProto.Accessibility.captioning_window_color:type_name -> android.providers.settings.SettingProto
	53,  // 111: android.providers.settings.SecureSettingsProto.Accessibility.captioning_typeface:type_name -> android.providers.settings.SettingProto
	53,  // 112: android.providers.settings.SecureSettingsProto.Accessibility.captioning_font_scale:type_name -> android.providers.settings.SettingProto
	53,  // 113: android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 114: android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer:type_name -> android.providers.settings.SettingProto
	53,  // 115: android.providers.settings.SecureSettingsProto.Accessibility.display_inversion_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 116: android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 117: android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_navbar_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 118: android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_scale:type_name -> android.providers.settings.SettingProto
	53,  // 119: android.providers.settings.SecureSettingsProto.Accessibility.high_text_contrast_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 120: android.providers.settings.SecureSettingsProto.Accessibility.large_pointer_icon:type_name -> android.providers.settings.SettingProto
	53,  // 121: android.providers.settings.SecureSettingsProto.Accessibility.shortcut_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 122: android.providers.settings.SecureSettingsProto.Accessibility.shortcut_on_lock_screen:type_name -> android.providers.settings.SettingProto
	53,  // 123: android.providers.settings.SecureSettingsProto.Accessibility.shortcut_dialog_shown:type_name -> android.providers.settings.SettingProto
	53,  // 124: android.providers.settings.SecureSettingsProto.Accessibility.shortcut_target_service:type_name -> android.providers.settings.SettingProto
	53,  // 125: android.providers.settings.SecureSettingsProto.Accessibility.soft_keyboard_mode:type_name -> android.providers.settings.SettingProto
	53,  // 126: android.providers.settings.SecureSettingsProto.Accessibility.speak_password:type_name -> android.providers.settings.SettingProto
	53,  // 127: android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 128: android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_granted_accessibility_services:type_name -> android.providers.settings.SettingProto
	53,  // 129: android.providers.settings.SecureSettingsProto.Accessibility.non_interactive_ui_timeout_ms:type_name -> android.providers.settings.SettingProto
	53,  // 130: android.providers.settings.SecureSettingsProto.Accessibility.interactive_ui_timeout_ms:type_name -> android.providers.settings.SettingProto
	53,  // 131: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_mode:type_name -> android.providers.settings.SettingProto
	53,  // 132: android.providers.settings.SecureSettingsProto.Accessibility.button_targets:type_name -> android.providers.settings.SettingProto
	53,  // 133: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_capability:type_name -> android.providers.settings.SettingProto
	53,  // 134: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_button_mode:type_name -> android.providers.settings.SettingProto
	53,  // 135: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_size:type_name -> android.providers.settings.SettingProto
	53,  // 136: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_icon_type:type_name -> android.providers.settings.SettingProto
	53,  // 137: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_opacity:type_name -> android.providers.settings.SettingProto
	53,  // 138: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_fade_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 139: android.providers.settings.SecureSettingsProto.Accessibility.odi_captions_volume_ui_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 140: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_follow_typing_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 141: android.providers.settings.SecureSettingsProto.Accessibility.contrast_level:type_name -> android.providers.settings.SettingProto
	53,  // 142: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_always_on_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 143: android.providers.settings.SecureSettingsProto.Accessibility.hearing_aid_ringtone_routing:type_name -> android.providers.settings.SettingProto
	53,  // 144: android.providers.settings.SecureSettingsProto.Accessibility.hearing_aid_call_routing:type_name -> android.providers.settings.SettingProto
	53,  // 145: android.providers.settings.SecureSettingsProto.Accessibility.hearing_aid_media_routing:type_name -> android.providers.settings.SettingProto
	53,  // 146: android.providers.settings.SecureSettingsProto.Accessibility.hearing_aid_notification_routing:type_name -> android.providers.settings.SettingProto
	53,  // 147: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_joystick_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 148: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_font_scaling_has_been_changed:type_name -> android.providers.settings.SettingProto
	53,  // 149: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_force_invert_color_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 150: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_two_finger_triple_tap_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 151: android.providers.settings.SecureSettingsProto.Accessibility.qs_targets:type_name -> android.providers.settings.SettingProto
	53,  // 152: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_pinch_to_zoom_anywhere_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 153: android.providers.settings.SecureSettingsProto.Accessibility.accessibility_single_finger_panning_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 154: android.providers.settings.SecureSettingsProto.AdaptiveSleep.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 155: android.providers.settings.SecureSettingsProto.AlwaysOnVpn.app:type_name -> android.providers.settings.SettingProto
	53,  // 156: android.providers.settings.SecureSettingsProto.AlwaysOnVpn.lockdown:type_name -> android.providers.settings.SettingProto
	53,  // 157: android.providers.settings.SecureSettingsProto.Assist.assistant:type_name -> android.providers.settings.SettingProto
	53,  // 158: android.providers.settings.SecureSettingsProto.Assist.structure_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 159: android.providers.settings.SecureSettingsProto.Assist.screenshot_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 160: android.providers.settings.SecureSettingsProto.Assist.disclosure_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 161: android.providers.settings.SecureSettingsProto.Assist.gesture_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 162: android.providers.settings.SecureSettingsProto.Assist.gesture_sensitivity:type_name -> android.providers.settings.SettingProto
	53,  // 163: android.providers.settings.SecureSettingsProto.Assist.gesture_silence_alerts_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 164: android.providers.settings.SecureSettingsProto.Assist.gesture_wake_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 165: android.providers.settings.SecureSettingsProto.Assist.gesture_setup_complete:type_name -> android.providers.settings.SettingProto
	53,  // 166: android.providers.settings.SecureSettingsProto.Assist.touch_gesture_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 167: android.providers.settings.SecureSettingsProto.Assist.long_press_home_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 168: android.providers.settings.SecureSettingsProto.Assist.search_press_hold_nav_handle_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 169: android.providers.settings.SecureSettingsProto.Assist.search_long_press_home_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 170: android.providers.settings.SecureSettingsProto.Assist.visual_query_accessibility_detection_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 171: android.providers.settings.SecureSettingsProto.AssistHandles.learning_time_elapsed_millis:type_name -> android.providers.settings.SettingProto
	53,  // 172: android.providers.settings.SecureSettingsProto.AssistHandles.learning_event_count:type_name -> android.providers.settings.SettingProto
	53,  // 173: android.providers.settings.SecureSettingsProto.Autofill.service:type_name -> android.providers.settings.SettingProto
	53,  // 174: android.providers.settings.SecureSettingsProto.Autofill.feature_field_classification:type_name -> android.providers.settings.SettingProto
	53,  // 175: android.providers.settings.SecureSettingsProto.Autofill.user_data_max_user_data_size:type_name -> android.providers.settings.SettingProto
	53,  // 176: android.providers.settings.SecureSettingsProto.Autofill.user_data_max_field_classification_ids_size:type_name -> android.providers.settings.SettingProto
	53,  // 177: android.providers.settings.SecureSettingsProto.Autofill.user_data_max_category_count:type_name -> android.providers.settings.SettingProto
	53,  // 178: android.providers.settings.SecureSettingsProto.Autofill.user_data_max_value_length:type_name -> android.providers.settings.SettingProto
	53,  // 179: android.providers.settings.SecureSettingsProto.Autofill.user_data_min_value_length:type_name -> android.providers.settings.SettingProto
	53,  // 180: android.providers.settings.SecureSettingsProto.Autofill.service_search_uri:type_name -> android.providers.settings.SettingProto
	53,  // 181: android.providers.settings.SecureSettingsProto.AutomaticStorageManager.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 182: android.providers.settings.SecureSettingsProto.AutomaticStorageManager.days_to_retain:type_name -> android.providers.settings.SettingProto
	53,  // 183: android.providers.settings.SecureSettingsProto.AutomaticStorageManager.bytes_cleared:type_name -> android.providers.settings.SettingProto
	53,  // 184: android.providers.settings.SecureSettingsProto.AutomaticStorageManager.last_run:type_name -> android.providers.settings.SettingProto
	53,  // 185: android.providers.settings.SecureSettingsProto.AutomaticStorageManager.turned_off_by_policy:type_name -> android.providers.settings.SettingProto
	53,  // 186: android.providers.settings.SecureSettingsProto.Backup.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 187: android.providers.settings.SecureSettingsProto.Backup.auto_restore:type_name -> android.providers.settings.SettingProto
	53,  // 188: android.providers.settings.SecureSettingsProto.Backup.provisioned:type_name -> android.providers.settings.SettingProto
	53,  // 189: android.providers.settings.SecureSettingsProto.Backup.transport:type_name -> android.providers.settings.SettingProto
	53,  // 190: android.providers.settings.SecureSettingsProto.Backup.manager_constants:type_name -> android.providers.settings.SettingProto
	53,  // 191: android.providers.settings.SecureSettingsProto.Backup.local_transport_parameters:type_name -> android.providers.settings.SettingProto
	53,  // 192: android.providers.settings.SecureSettingsProto.Backup.packages_to_clear_data_before_full_restore:type_name -> android.providers.settings.SettingProto
	53,  // 193: android.providers.settings.SecureSettingsProto.Camera.gesture_disabled:type_name -> android.providers.settings.SettingProto
	53,  // 194: android.providers.settings.SecureSettingsProto.Camera.double_tap_power_gesture_disabled:type_name -> android.providers.settings.SettingProto
	53,  // 195: android.providers.settings.SecureSettingsProto.Camera.double_twist_to_flip_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 196: android.providers.settings.SecureSettingsProto.Camera.lift_trigger_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 197: android.providers.settings.SecureSettingsProto.Clipboard.show_access_notifications:type_name -> android.providers.settings.SettingProto
	53,  // 198: android.providers.settings.SecureSettingsProto.Controls.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 199: android.providers.settings.SecureSettingsProto.DateTime.location_time_zone_detection_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 200: android.providers.settings.SecureSettingsProto.Doze.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 201: android.providers.settings.SecureSettingsProto.Doze.always_on:type_name -> android.providers.settings.SettingProto
	53,  // 202: android.providers.settings.SecureSettingsProto.Doze.pulse_on_pick_up:type_name -> android.providers.settings.SettingProto
	53,  // 203: android.providers.settings.SecureSettingsProto.Doze.pulse_on_long_press:type_name -> android.providers.settings.SettingProto
	53,  // 204: android.providers.settings.SecureSettingsProto.Doze.pulse_on_double_tap:type_name -> android.providers.settings.SettingProto
	53,  // 205: android.providers.settings.SecureSettingsProto.Doze.pulse_on_tap:type_name -> android.providers.settings.SettingProto
	53,  // 206: android.providers.settings.SecureSettingsProto.Doze.suppress:type_name -> android.providers.settings.SettingProto
	53,  // 207: android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 208: android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_sound_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 209: android.providers.settings.SecureSettingsProto.EvenDimmer.even_dimmer_activated:type_name -> android.providers.settings.SettingProto
	53,  // 210: android.providers.settings.SecureSettingsProto.EvenDimmer.even_dimmer_min_nits:type_name -> android.providers.settings.SettingProto
	53,  // 211: android.providers.settings.SecureSettingsProto.Gesture.aware_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 212: android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_count:type_name -> android.providers.settings.SettingProto
	53,  // 213: android.providers.settings.SecureSettingsProto.Gesture.silence_calls_count:type_name -> android.providers.settings.SettingProto
	53,  // 214: android.providers.settings.SecureSettingsProto.Gesture.silence_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 215: android.providers.settings.SecureSettingsProto.Gesture.silence_timer_count:type_name -> android.providers.settings.SettingProto
	53,  // 216: android.providers.settings.SecureSettingsProto.Gesture.skip_count:type_name -> android.providers.settings.SettingProto
	53,  // 217: android.providers.settings.SecureSettingsProto.Gesture.skip_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 218: android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_touch_count:type_name -> android.providers.settings.SettingProto
	53,  // 219: android.providers.settings.SecureSettingsProto.Gesture.silence_calls_touch_count:type_name -> android.providers.settings.SettingProto
	53,  // 220: android.providers.settings.SecureSettingsProto.Gesture.silence_timer_touch_count:type_name -> android.providers.settings.SettingProto
	53,  // 221: android.providers.settings.SecureSettingsProto.Gesture.skip_touch_count:type_name -> android.providers.settings.SettingProto
	53,  // 222: android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_gesture_count:type_name -> android.providers.settings.SettingProto
	53,  // 223: android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_touch_count:type_name -> android.providers.settings.SettingProto
	53,  // 224: android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_left:type_name -> android.providers.settings.SettingProto
	53,  // 225: android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_right:type_name -> android.providers.settings.SettingProto
	53,  // 226: android.providers.settings.SecureSettingsProto.Incall.power_button_behavior:type_name -> android.providers.settings.SettingProto
	53,  // 227: android.providers.settings.SecureSettingsProto.Incall.back_button_behavior:type_name -> android.providers.settings.SettingProto
	53,  // 228: android.providers.settings.SecureSettingsProto.InputMethods.default_input_method:type_name -> android.providers.settings.SettingProto
	53,  // 229: android.providers.settings.SecureSettingsProto.InputMethods.disabled_system_input_methods:type_name -> android.providers.settings.SettingProto
	53,  // 230: android.providers.settings.SecureSettingsProto.InputMethods.enabled_input_methods:type_name -> android.providers.settings.SettingProto
	53,  // 231: android.providers.settings.SecureSettingsProto.InputMethods.method_selector_visibility:type_name -> android.providers.settings.SettingProto
	53,  // 232: android.providers.settings.SecureSettingsProto.InputMethods.subtype_history:type_name -> android.providers.settings.SettingProto
	53,  // 233: android.providers.settings.SecureSettingsProto.InputMethods.selected_input_method_subtype:type_name -> android.providers.settings.SettingProto
	53,  // 234: android.providers.settings.SecureSettingsProto.InputMethods.show_ime_with_hard_keyboard:type_name -> android.providers.settings.SettingProto
	53,  // 235: android.providers.settings.SecureSettingsProto.InputMethods.default_voice_input_method:type_name -> android.providers.settings.SettingProto
	53,  // 236: android.providers.settings.SecureSettingsProto.Launcher.swipe_up_to_switch_apps_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 237: android.providers.settings.SecureSettingsProto.Location.mode:type_name -> android.providers.settings.SettingProto
	53,  // 238: android.providers.settings.SecureSettingsProto.Location.changer:type_name -> android.providers.settings.SettingProto
	53,  // 239: android.providers.settings.SecureSettingsProto.LocationAccessCheck.interval_millis:type_name -> android.providers.settings.SettingProto
	53,  // 240: android.providers.settings.SecureSettingsProto.LocationAccessCheck.delay_millis:type_name -> android.providers.settings.SettingProto
	53,  // 241: android.providers.settings.SecureSettingsProto.LockScreen.lock_after_timeout:type_name -> android.providers.settings.SettingProto
	53,  // 242: android.providers.settings.SecureSettingsProto.LockScreen.allow_private_notifications:type_name -> android.providers.settings.SettingProto
	53,  // 243: android.providers.settings.SecureSettingsProto.LockScreen.allow_remote_input:type_name -> android.providers.settings.SettingProto
	53,  // 244: android.providers.settings.SecureSettingsProto.LockScreen.show_notifications:type_name -> android.providers.settings.SettingProto
	53,  // 245: android.providers.settings.SecureSettingsProto.ManagedProfile.contact_remote_search:type_name -> android.providers.settings.SettingProto
	53,  // 246: android.providers.settings.SecureSettingsProto.Mount.play_notification_snd:type_name -> android.providers.settings.SettingProto
	53,  // 247: android.providers.settings.SecureSettingsProto.Mount.ums_autostart:type_name -> android.providers.settings.SettingProto
	53,  // 248: android.providers.settings.SecureSettingsProto.Mount.ums_prompt:type_name -> android.providers.settings.SettingProto
	53,  // 249: android.providers.settings.SecureSettingsProto.Mount.ums_notify_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 250: android.providers.settings.SecureSettingsProto.NavBar.nav_bar_force_visible:type_name -> android.providers.settings.SettingProto
	53,  // 251: android.providers.settings.SecureSettingsProto.NavBar.nav_bar_kids_mode:type_name -> android.providers.settings.SettingProto
	53,  // 252: android.providers.settings.SecureSettingsProto.NfcPayment.default_component:type_name -> android.providers.settings.SettingProto
	53,  // 253: android.providers.settings.SecureSettingsProto.NfcPayment.foreground:type_name -> android.providers.settings.SettingProto
	53,  // 254: android.providers.settings.SecureSettingsProto.NfcPayment.payment_service_search_uri:type_name -> android.providers.settings.SettingProto
	53,  // 255: android.providers.settings.SecureSettingsProto.NightDisplay.activated:type_name -> android.providers.settings.SettingProto
	53,  // 256: android.providers.settings.SecureSettingsProto.NightDisplay.auto_mode:type_name -> android.providers.settings.SettingProto
	53,  // 257: android.providers.settings.SecureSettingsProto.NightDisplay.color_temperature:type_name -> android.providers.settings.SettingProto
	53,  // 258: android.providers.settings.SecureSettingsProto.NightDisplay.custom_start_time:type_name -> android.providers.settings.SettingProto
	53,  // 259: android.providers.settings.SecureSettingsProto.NightDisplay.custom_end_time:type_name -> android.providers.settings.SettingProto
	53,  // 260: android.providers.settings.SecureSettingsProto.NightDisplay.last_activated_time:type_name -> android.providers.settings.SettingProto
	53,  // 261: android.providers.settings.SecureSettingsProto.Notification.enabled_assistant:type_name -> android.providers.settings.SettingProto
	53,  // 262: android.providers.settings.SecureSettingsProto.Notification.enabled_listeners:type_name -> android.providers.settings.SettingProto
	53,  // 263: android.providers.settings.SecureSettingsProto.Notification.enabled_policy_access_packages:type_name -> android.providers.settings.SettingProto
	53,  // 264: android.providers.settings.SecureSettingsProto.Notification.badging:type_name -> android.providers.settings.SettingProto
	53,  // 265: android.providers.settings.SecureSettingsProto.Notification.show_note_about_notification_hiding:type_name -> android.providers.settings.SettingProto
	53,  // 266: android.providers.settings.SecureSettingsProto.Notification.in_call_notification_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 267: android.providers.settings.SecureSettingsProto.Notification.bubbles:type_name -> android.providers.settings.SettingProto
	53,  // 268: android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 269: android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_timeout:type_name -> android.providers.settings.SettingProto
	53,  // 270: android.providers.settings.SecureSettingsProto.OneHanded.taps_app_to_exit:type_name -> android.providers.settings.SettingProto
	53,  // 271: android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_activated:type_name -> android.providers.settings.SettingProto
	53,  // 272: android.providers.settings.SecureSettingsProto.PackageVerifier.user_consent:type_name -> android.providers.settings.SettingProto
	53,  // 273: android.providers.settings.SecureSettingsProto.PackageVerifier.state:type_name -> android.providers.settings.SettingProto
	53,  // 274: android.providers.settings.SecureSettingsProto.ParentalControl.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 275: android.providers.settings.SecureSettingsProto.ParentalControl.last_update:type_name -> android.providers.settings.SettingProto
	53,  // 276: android.providers.settings.SecureSettingsProto.ParentalControl.redirect_url:type_name -> android.providers.settings.SettingProto
	53,  // 277: android.providers.settings.SecureSettingsProto.PowerMenuPrivacy.show:type_name -> android.providers.settings.SettingProto
	53,  // 278: android.providers.settings.SecureSettingsProto.ExtraLowPowerMode.extra_automatic_power_save_mode:type_name -> android.providers.settings.SettingProto
	53,  // 279: android.providers.settings.SecureSettingsProto.PrintService.search_uri:type_name -> android.providers.settings.SettingProto
	53,  // 280: android.providers.settings.SecureSettingsProto.PrintService.disabled_print_services:type_name -> android.providers.settings.SettingProto
	53,  // 281: android.providers.settings.SecureSettingsProto.PrintService.enabled_print_services:type_name -> android.providers.settings.SettingProto
	53,  // 282: android.providers.settings.SecureSettingsProto.QuickSettings.tiles:type_name -> android.providers.settings.SettingProto
	53,  // 283: android.providers.settings.SecureSettingsProto.QuickSettings.auto_added_tiles:type_name -> android.providers.settings.SettingProto
	53,  // 284: android.providers.settings.SecureSettingsProto.ReduceBrightColors.activated:type_name -> android.providers.settings.SettingProto
	53,  // 285: android.providers.settings.SecureSettingsProto.ReduceBrightColors.level:type_name -> android.providers.settings.SettingProto
	53,  // 286: android.providers.settings.SecureSettingsProto.ReduceBrightColors.persist_across_reboots:type_name -> android.providers.settings.SettingProto
	53,  // 287: android.providers.settings.SecureSettingsProto.Rotation.show_rotation_suggestions:type_name -> android.providers.settings.SettingProto
	53,  // 288: android.providers.settings.SecureSettingsProto.Rotation.num_rotation_suggestions_accepted:type_name -> android.providers.settings.SettingProto
	53,  // 289: android.providers.settings.SecureSettingsProto.Screensaver.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 290: android.providers.settings.SecureSettingsProto.Screensaver.components:type_name -> android.providers.settings.SettingProto
	53,  // 291: android.providers.settings.SecureSettingsProto.Screensaver.activate_on_dock:type_name -> android.providers.settings.SettingProto
	53,  // 292: android.providers.settings.SecureSettingsProto.Screensaver.activate_on_sleep:type_name -> android.providers.settings.SettingProto
	53,  // 293: android.providers.settings.SecureSettingsProto.Screensaver.default_component:type_name -> android.providers.settings.SettingProto
	53,  // 294: android.providers.settings.SecureSettingsProto.Search.global_search_activity:type_name -> android.providers.settings.SettingProto
	53,  // 295: android.providers.settings.SecureSettingsProto.Search.num_promoted_sources:type_name -> android.providers.settings.SettingProto
	53,  // 296: android.providers.settings.SecureSettingsProto.Search.max_results_to_display:type_name -> android.providers.settings.SettingProto
	53,  // 297: android.providers.settings.SecureSettingsProto.Search.max_results_per_source:type_name -> android.providers.settings.SettingProto
	53,  // 298: android.providers.settings.SecureSettingsProto.Search.web_results_override_limit:type_name -> android.providers.settings.SettingProto
	53,  // 299: android.providers.settings.SecureSettingsProto.Search.promoted_source_deadline_millis:type_name -> android.providers.settings.SettingProto
	53,  // 300: android.providers.settings.SecureSettingsProto.Search.source_timeout_millis:type_name -> android.providers.settings.SettingProto
	53,  // 301: android.providers.settings.SecureSettingsProto.Search.prefill_millis:type_name -> android.providers.settings.SettingProto
	53,  // 302: android.providers.settings.SecureSettingsProto.Search.max_stat_age_millis:type_name -> android.providers.settings.SettingProto
	53,  // 303: android.providers.settings.SecureSettingsProto.Search.max_source_event_age_millis:type_name -> android.providers.settings.SettingProto
	53,  // 304: android.providers.settings.SecureSettingsProto.Search.min_impressions_for_source_ranking:type_name -> android.providers.settings.SettingProto
	53,  // 305: android.providers.settings.SecureSettingsProto.Search.min_clicks_for_source_ranking:type_name -> android.providers.settings.SettingProto
	53,  // 306: android.providers.settings.SecureSettingsProto.Search.max_shortcuts_returned:type_name -> android.providers.settings.SettingProto
	53,  // 307: android.providers.settings.SecureSettingsProto.Search.query_thread_core_pool_size:type_name -> android.providers.settings.SettingProto
	53,  // 308: android.providers.settings.SecureSettingsProto.Search.query_thread_max_pool_size:type_name -> android.providers.settings.SettingProto
	53,  // 309: android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_core_pool_size:type_name -> android.providers.settings.SettingProto
	53,  // 310: android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_max_pool_size:type_name -> android.providers.settings.SettingProto
	53,  // 311: android.providers.settings.SecureSettingsProto.Search.thread_keepalive_seconds:type_name -> android.providers.settings.SettingProto
	53,  // 312: android.providers.settings.SecureSettingsProto.Search.per_source_concurrent_query_limit:type_name -> android.providers.settings.SettingProto
	53,  // 313: android.providers.settings.SecureSettingsProto.CameraAutorotate.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 314: android.providers.settings.SecureSettingsProto.SpellChecker.enabled:type_name -> android.providers.settings.SettingProto
	53,  // 315: android.providers.settings.SecureSettingsProto.SpellChecker.selected:type_name -> android.providers.settings.SettingProto
	53,  // 316: android.providers.settings.SecureSettingsProto.SpellChecker.selected_subtype:type_name -> android.providers.settings.SettingProto
	53,  // 317: android.providers.settings.SecureSettingsProto.Sounds.charging_sounds_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 318: android.providers.settings.SecureSettingsProto.Sounds.charging_vibration_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 319: android.providers.settings.SecureSettingsProto.TrackpadGesture.trackpad_gesture_back_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 320: android.providers.settings.SecureSettingsProto.TrackpadGesture.trackpad_gesture_home_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 321: android.providers.settings.SecureSettingsProto.TrackpadGesture.trackpad_gesture_overview_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 322: android.providers.settings.SecureSettingsProto.TrackpadGesture.trackpad_gesture_notification_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 323: android.providers.settings.SecureSettingsProto.TrackpadGesture.trackpad_gesture_quick_switch_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 324: android.providers.settings.SecureSettingsProto.Tts.default_rate:type_name -> android.providers.settings.SettingProto
	53,  // 325: android.providers.settings.SecureSettingsProto.Tts.default_pitch:type_name -> android.providers.settings.SettingProto
	53,  // 326: android.providers.settings.SecureSettingsProto.Tts.default_synth:type_name -> android.providers.settings.SettingProto
	53,  // 327: android.providers.settings.SecureSettingsProto.Tts.default_locale:type_name -> android.providers.settings.SettingProto
	53,  // 328: android.providers.settings.SecureSettingsProto.Tts.enabled_plugins:type_name -> android.providers.settings.SettingProto
	53,  // 329: android.providers.settings.SecureSettingsProto.Tty.tty_mode_enabled:type_name -> android.providers.settings.SettingProto
	53,  // 330: android.providers.settings.SecureSettingsProto.Tty.preferred_tty_mode:type_name -> android.providers.settings.SettingProto
	53,  // 331: android.providers.settings.SecureSettingsProto.Tv.user_setup_complete:type_name -> android.providers.settings.SettingProto
	53,  // 332: android.providers.settings.SecureSettingsProto.Tv.input_hidden_inputs:type_name -> android.providers.settings.SettingProto
	53,  // 333: android.providers.settings.SecureSettingsProto.Tv.input_custom_labels:type_name -> android.providers.settings.SettingProto
	53,  // 334: android.providers.settings.SecureSettingsProto.Voice.interaction_service:type_name -> android.providers.settings.SettingProto
	53,  // 335: android.providers.settings.SecureSettingsProto.Voice.recognition_service:type_name -> android.providers.settings.SettingProto
	53,  // 336: android.providers.settings.SecureSettingsProto.Volume.hush_gesture:type_name -> android.providers.settings.SettingProto
	53,  // 337: android.providers.settings.SecureSettingsProto.Volume.unsafe_volume_music_active_ms:type_name -> android.providers.settings.SettingProto
	53,  // 338: android.providers.settings.SecureSettingsProto.Vr.display_mode:type_name -> android.providers.settings.SettingProto
	53,  // 339: android.providers.settings.SecureSettingsProto.Vr.enabled_listeners:type_name -> android.providers.settings.SettingProto
	53,  // 340: android.providers.settings.SecureSettingsProto.Zen.duration:type_name -> android.providers.settings.SettingProto
	53,  // 341: android.providers.settings.SecureSettingsProto.Zen.show_zen_upgrade_notification:type_name -> android.providers.settings.SettingProto
	53,  // 342: android.providers.settings.SecureSettingsProto.Zen.show_zen_settings_suggestion:type_name -> android.providers.settings.SettingProto
	53,  // 343: android.providers.settings.SecureSettingsProto.Zen.settings_updated:type_name -> android.providers.settings.SettingProto
	53,  // 344: android.providers.settings.SecureSettingsProto.Zen.settings_suggestion_viewed:type_name -> android.providers.settings.SettingProto
	345, // [345:345] is the sub-list for method output_type
	345, // [345:345] is the sub-list for method input_type
	345, // [345:345] is the sub-list for extension type_name
	345, // [345:345] is the sub-list for extension extendee
	0,   // [0:345] is the sub-list for field type_name
}

func init() { file_frameworks_base_core_proto_android_providers_settings_secure_proto_init() }
func file_frameworks_base_core_proto_android_providers_settings_secure_proto_init() {
	if File_frameworks_base_core_proto_android_providers_settings_secure_proto != nil {
		return
	}
	file_frameworks_base_core_proto_android_providers_settings_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Accessibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_AdaptiveSleep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_AlwaysOnVpn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Assist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_AssistHandles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Autofill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_AutomaticStorageManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Backup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Camera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Clipboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Controls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_DateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Doze); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_EmergencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_EvenDimmer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Gesture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_GestureNavigation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Incall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_InputMethods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Launcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_LocationAccessCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_LockScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_ManagedProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_NavBar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_NfcPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_NightDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_OneHanded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_PackageVerifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_ParentalControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_PowerMenuPrivacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_ExtraLowPowerMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_PrintService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_QuickSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_ReduceBrightColors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Rotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Screensaver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Search); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_CameraAutorotate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_SpellChecker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Sounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_TrackpadGesture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Tts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Tty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Tv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Voice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Vr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*SecureSettingsProto_Zen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_frameworks_base_core_proto_android_providers_settings_secure_proto_goTypes,
		DependencyIndexes: file_frameworks_base_core_proto_android_providers_settings_secure_proto_depIdxs,
		MessageInfos:      file_frameworks_base_core_proto_android_providers_settings_secure_proto_msgTypes,
	}.Build()
	File_frameworks_base_core_proto_android_providers_settings_secure_proto = out.File
	file_frameworks_base_core_proto_android_providers_settings_secure_proto_rawDesc = nil
	file_frameworks_base_core_proto_android_providers_settings_secure_proto_goTypes = nil
	file_frameworks_base_core_proto_android_providers_settings_secure_proto_depIdxs = nil
}
