//
// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.4
// source: frameworks/base/core/proto/android/providers/settings/system.proto

package settings

import (
	_ "github.com/zopieux/dumpsys-exporter/proto/android/frameworks/base/core/proto/android"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Note: it's a conscious decision to add each setting as a separate field. This
// allows annotating each setting with its own privacy tag.
type SystemSettingsProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoricalOperations []*SettingsOperationProto           `protobuf:"bytes,1,rep,name=historical_operations,json=historicalOperations" json:"historical_operations,omitempty"`
	AdvancedSettings     *SettingProto                       `protobuf:"bytes,2,opt,name=advanced_settings,json=advancedSettings" json:"advanced_settings,omitempty"`
	Alarm                *SystemSettingsProto_Alarm          `protobuf:"bytes,3,opt,name=alarm" json:"alarm,omitempty"`
	Bluetooth            *SystemSettingsProto_Bluetooth      `protobuf:"bytes,4,opt,name=bluetooth" json:"bluetooth,omitempty"`
	DisplayColorMode     *SettingProto                       `protobuf:"bytes,6,opt,name=display_color_mode,json=displayColorMode" json:"display_color_mode,omitempty"`
	DeveloperOptions     *SystemSettingsProto_DevOptions     `protobuf:"bytes,7,opt,name=developer_options,json=developerOptions" json:"developer_options,omitempty"`
	DtmfTone             *SystemSettingsProto_DtmfTone       `protobuf:"bytes,8,opt,name=dtmf_tone,json=dtmfTone" json:"dtmf_tone,omitempty"`
	EggMode              *SettingProto                       `protobuf:"bytes,9,opt,name=egg_mode,json=eggMode" json:"egg_mode,omitempty"`
	EndButtonBehavior    *SettingProto                       `protobuf:"bytes,10,opt,name=end_button_behavior,json=endButtonBehavior" json:"end_button_behavior,omitempty"`
	FontScale            *SettingProto                       `protobuf:"bytes,11,opt,name=font_scale,json=fontScale" json:"font_scale,omitempty"`
	HapticFeedback       *SystemSettingsProto_HapticFeedback `protobuf:"bytes,12,opt,name=haptic_feedback,json=hapticFeedback" json:"haptic_feedback,omitempty"`
	// Whether the hearing aid is enabled. The value is boolean (1 or 0).
	HearingAid       *SettingProto                   `protobuf:"bytes,13,opt,name=hearing_aid,json=hearingAid" json:"hearing_aid,omitempty"`
	LockToAppEnabled *SettingProto                   `protobuf:"bytes,14,opt,name=lock_to_app_enabled,json=lockToAppEnabled" json:"lock_to_app_enabled,omitempty"`
	Lockscreen       *SystemSettingsProto_Lockscreen `protobuf:"bytes,15,opt,name=lockscreen" json:"lockscreen,omitempty"`
	// The system default media button event receiver.
	MediaButtonReceiver    *SettingProto                     `protobuf:"bytes,16,opt,name=media_button_receiver,json=mediaButtonReceiver" json:"media_button_receiver,omitempty"`
	Notification           *SystemSettingsProto_Notification `protobuf:"bytes,17,opt,name=notification" json:"notification,omitempty"`
	PointerSpeed           *SettingProto                     `protobuf:"bytes,18,opt,name=pointer_speed,json=pointerSpeed" json:"pointer_speed,omitempty"`
	Ringtone               *SystemSettingsProto_Ringtone     `protobuf:"bytes,19,opt,name=ringtone" json:"ringtone,omitempty"`
	Rotation               *SystemSettingsProto_Rotation     `protobuf:"bytes,20,opt,name=rotation" json:"rotation,omitempty"`
	Screen                 *SystemSettingsProto_Screen       `protobuf:"bytes,22,opt,name=screen" json:"screen,omitempty"`
	SetupWizardHasRun      *SettingProto                     `protobuf:"bytes,23,opt,name=setup_wizard_has_run,json=setupWizardHasRun" json:"setup_wizard_has_run,omitempty"`
	ShowBatteryPercent     *SettingProto                     `protobuf:"bytes,24,opt,name=show_battery_percent,json=showBatteryPercent" json:"show_battery_percent,omitempty"`
	ShowGtalkServiceStatus *SettingProto                     `protobuf:"bytes,25,opt,name=show_gtalk_service_status,json=showGtalkServiceStatus" json:"show_gtalk_service_status,omitempty"`
	Sip                    *SystemSettingsProto_Sip          `protobuf:"bytes,26,opt,name=sip" json:"sip,omitempty"`
	SoundEffectsEnabled    *SettingProto                     `protobuf:"bytes,27,opt,name=sound_effects_enabled,json=soundEffectsEnabled" json:"sound_effects_enabled,omitempty"`
	SystemLocales          *SettingProto                     `protobuf:"bytes,28,opt,name=system_locales,json=systemLocales" json:"system_locales,omitempty"`
	Text                   *SystemSettingsProto_Text         `protobuf:"bytes,29,opt,name=text" json:"text,omitempty"`
	Time_12_24             *SettingProto                     `protobuf:"bytes,30,opt,name=time_12_24,json=time1224" json:"time_12_24,omitempty"`
	Touchpad               *SystemSettingsProto_Touchpad     `protobuf:"bytes,36,opt,name=touchpad" json:"touchpad,omitempty"`
	TtyMode                *SettingProto                     `protobuf:"bytes,31,opt,name=tty_mode,json=ttyMode" json:"tty_mode,omitempty"`
	Vibrate                *SystemSettingsProto_Vibrate      `protobuf:"bytes,32,opt,name=vibrate" json:"vibrate,omitempty"`
	Volume                 *SystemSettingsProto_Volume       `protobuf:"bytes,33,opt,name=volume" json:"volume,omitempty"`
	WhenToMakeWifiCalls    *SettingProto                     `protobuf:"bytes,34,opt,name=when_to_make_wifi_calls,json=whenToMakeWifiCalls" json:"when_to_make_wifi_calls,omitempty"`
	ApplyRampingRinger     *SettingProto                     `protobuf:"bytes,35,opt,name=apply_ramping_ringer,json=applyRampingRinger" json:"apply_ramping_ringer,omitempty"`
}

func (x *SystemSettingsProto) Reset() {
	*x = SystemSettingsProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto) ProtoMessage() {}

func (x *SystemSettingsProto) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0}
}

func (x *SystemSettingsProto) GetHistoricalOperations() []*SettingsOperationProto {
	if x != nil {
		return x.HistoricalOperations
	}
	return nil
}

func (x *SystemSettingsProto) GetAdvancedSettings() *SettingProto {
	if x != nil {
		return x.AdvancedSettings
	}
	return nil
}

func (x *SystemSettingsProto) GetAlarm() *SystemSettingsProto_Alarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

func (x *SystemSettingsProto) GetBluetooth() *SystemSettingsProto_Bluetooth {
	if x != nil {
		return x.Bluetooth
	}
	return nil
}

func (x *SystemSettingsProto) GetDisplayColorMode() *SettingProto {
	if x != nil {
		return x.DisplayColorMode
	}
	return nil
}

func (x *SystemSettingsProto) GetDeveloperOptions() *SystemSettingsProto_DevOptions {
	if x != nil {
		return x.DeveloperOptions
	}
	return nil
}

func (x *SystemSettingsProto) GetDtmfTone() *SystemSettingsProto_DtmfTone {
	if x != nil {
		return x.DtmfTone
	}
	return nil
}

func (x *SystemSettingsProto) GetEggMode() *SettingProto {
	if x != nil {
		return x.EggMode
	}
	return nil
}

func (x *SystemSettingsProto) GetEndButtonBehavior() *SettingProto {
	if x != nil {
		return x.EndButtonBehavior
	}
	return nil
}

func (x *SystemSettingsProto) GetFontScale() *SettingProto {
	if x != nil {
		return x.FontScale
	}
	return nil
}

func (x *SystemSettingsProto) GetHapticFeedback() *SystemSettingsProto_HapticFeedback {
	if x != nil {
		return x.HapticFeedback
	}
	return nil
}

func (x *SystemSettingsProto) GetHearingAid() *SettingProto {
	if x != nil {
		return x.HearingAid
	}
	return nil
}

func (x *SystemSettingsProto) GetLockToAppEnabled() *SettingProto {
	if x != nil {
		return x.LockToAppEnabled
	}
	return nil
}

func (x *SystemSettingsProto) GetLockscreen() *SystemSettingsProto_Lockscreen {
	if x != nil {
		return x.Lockscreen
	}
	return nil
}

func (x *SystemSettingsProto) GetMediaButtonReceiver() *SettingProto {
	if x != nil {
		return x.MediaButtonReceiver
	}
	return nil
}

func (x *SystemSettingsProto) GetNotification() *SystemSettingsProto_Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *SystemSettingsProto) GetPointerSpeed() *SettingProto {
	if x != nil {
		return x.PointerSpeed
	}
	return nil
}

func (x *SystemSettingsProto) GetRingtone() *SystemSettingsProto_Ringtone {
	if x != nil {
		return x.Ringtone
	}
	return nil
}

func (x *SystemSettingsProto) GetRotation() *SystemSettingsProto_Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *SystemSettingsProto) GetScreen() *SystemSettingsProto_Screen {
	if x != nil {
		return x.Screen
	}
	return nil
}

func (x *SystemSettingsProto) GetSetupWizardHasRun() *SettingProto {
	if x != nil {
		return x.SetupWizardHasRun
	}
	return nil
}

func (x *SystemSettingsProto) GetShowBatteryPercent() *SettingProto {
	if x != nil {
		return x.ShowBatteryPercent
	}
	return nil
}

func (x *SystemSettingsProto) GetShowGtalkServiceStatus() *SettingProto {
	if x != nil {
		return x.ShowGtalkServiceStatus
	}
	return nil
}

func (x *SystemSettingsProto) GetSip() *SystemSettingsProto_Sip {
	if x != nil {
		return x.Sip
	}
	return nil
}

func (x *SystemSettingsProto) GetSoundEffectsEnabled() *SettingProto {
	if x != nil {
		return x.SoundEffectsEnabled
	}
	return nil
}

func (x *SystemSettingsProto) GetSystemLocales() *SettingProto {
	if x != nil {
		return x.SystemLocales
	}
	return nil
}

func (x *SystemSettingsProto) GetText() *SystemSettingsProto_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *SystemSettingsProto) GetTime_12_24() *SettingProto {
	if x != nil {
		return x.Time_12_24
	}
	return nil
}

func (x *SystemSettingsProto) GetTouchpad() *SystemSettingsProto_Touchpad {
	if x != nil {
		return x.Touchpad
	}
	return nil
}

func (x *SystemSettingsProto) GetTtyMode() *SettingProto {
	if x != nil {
		return x.TtyMode
	}
	return nil
}

func (x *SystemSettingsProto) GetVibrate() *SystemSettingsProto_Vibrate {
	if x != nil {
		return x.Vibrate
	}
	return nil
}

func (x *SystemSettingsProto) GetVolume() *SystemSettingsProto_Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *SystemSettingsProto) GetWhenToMakeWifiCalls() *SettingProto {
	if x != nil {
		return x.WhenToMakeWifiCalls
	}
	return nil
}

func (x *SystemSettingsProto) GetApplyRampingRinger() *SettingProto {
	if x != nil {
		return x.ApplyRampingRinger
	}
	return nil
}

type SystemSettingsProto_Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "alarm_alert" in code.
	DefaultUri *SettingProto `protobuf:"bytes,1,opt,name=default_uri,json=defaultUri" json:"default_uri,omitempty"`
	AlertCache *SettingProto `protobuf:"bytes,2,opt,name=alert_cache,json=alertCache" json:"alert_cache,omitempty"`
}

func (x *SystemSettingsProto_Alarm) Reset() {
	*x = SystemSettingsProto_Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Alarm) ProtoMessage() {}

func (x *SystemSettingsProto_Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Alarm.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Alarm) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SystemSettingsProto_Alarm) GetDefaultUri() *SettingProto {
	if x != nil {
		return x.DefaultUri
	}
	return nil
}

func (x *SystemSettingsProto_Alarm) GetAlertCache() *SettingProto {
	if x != nil {
		return x.AlertCache
	}
	return nil
}

type SystemSettingsProto_Bluetooth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether remote devices may discover and/or connect to this device:
	// 2 -- discoverable and connectable
	// 1 -- connectable but not discoverable
	// 0 -- neither connectable nor discoverable
	Discoverability            *SettingProto `protobuf:"bytes,1,opt,name=discoverability" json:"discoverability,omitempty"`
	DiscoverabilityTimeoutSecs *SettingProto `protobuf:"bytes,2,opt,name=discoverability_timeout_secs,json=discoverabilityTimeoutSecs" json:"discoverability_timeout_secs,omitempty"`
}

func (x *SystemSettingsProto_Bluetooth) Reset() {
	*x = SystemSettingsProto_Bluetooth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Bluetooth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Bluetooth) ProtoMessage() {}

func (x *SystemSettingsProto_Bluetooth) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Bluetooth.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Bluetooth) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SystemSettingsProto_Bluetooth) GetDiscoverability() *SettingProto {
	if x != nil {
		return x.Discoverability
	}
	return nil
}

func (x *SystemSettingsProto_Bluetooth) GetDiscoverabilityTimeoutSecs() *SettingProto {
	if x != nil {
		return x.DiscoverabilityTimeoutSecs
	}
	return nil
}

type SystemSettingsProto_DevOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Show pointer location on screen? 0 = no, 1 = yes. "pointer_location
	// in code.
	PointerLocation *SettingProto `protobuf:"bytes,1,opt,name=pointer_location,json=pointerLocation" json:"pointer_location,omitempty"`
	ShowTouches     *SettingProto `protobuf:"bytes,2,opt,name=show_touches,json=showTouches" json:"show_touches,omitempty"`
	// Log raw orientation data from {@link
	// com.android.server.policy.WindowOrientationListener} for use with the
	// orientationplot.py tool.
	// 0 = no, 1 = yes
	WindowOrientationListenerLog *SettingProto `protobuf:"bytes,3,opt,name=window_orientation_listener_log,json=windowOrientationListenerLog" json:"window_orientation_listener_log,omitempty"`
	ShowKeyPresses               *SettingProto `protobuf:"bytes,4,opt,name=show_key_presses,json=showKeyPresses" json:"show_key_presses,omitempty"`
}

func (x *SystemSettingsProto_DevOptions) Reset() {
	*x = SystemSettingsProto_DevOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_DevOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_DevOptions) ProtoMessage() {}

func (x *SystemSettingsProto_DevOptions) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_DevOptions.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_DevOptions) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SystemSettingsProto_DevOptions) GetPointerLocation() *SettingProto {
	if x != nil {
		return x.PointerLocation
	}
	return nil
}

func (x *SystemSettingsProto_DevOptions) GetShowTouches() *SettingProto {
	if x != nil {
		return x.ShowTouches
	}
	return nil
}

func (x *SystemSettingsProto_DevOptions) GetWindowOrientationListenerLog() *SettingProto {
	if x != nil {
		return x.WindowOrientationListenerLog
	}
	return nil
}

func (x *SystemSettingsProto_DevOptions) GetShowKeyPresses() *SettingProto {
	if x != nil {
		return x.ShowKeyPresses
	}
	return nil
}

type SystemSettingsProto_DtmfTone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "dtmf_tone_when_dialing" in code.
	PlayWhenDialing *SettingProto `protobuf:"bytes,1,opt,name=play_when_dialing,json=playWhenDialing" json:"play_when_dialing,omitempty"`
	// "dtmf_tone_type_when_dialing" in code.
	TypePlayedWhenDialing *SettingProto `protobuf:"bytes,2,opt,name=type_played_when_dialing,json=typePlayedWhenDialing" json:"type_played_when_dialing,omitempty"`
}

func (x *SystemSettingsProto_DtmfTone) Reset() {
	*x = SystemSettingsProto_DtmfTone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_DtmfTone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_DtmfTone) ProtoMessage() {}

func (x *SystemSettingsProto_DtmfTone) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_DtmfTone.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_DtmfTone) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SystemSettingsProto_DtmfTone) GetPlayWhenDialing() *SettingProto {
	if x != nil {
		return x.PlayWhenDialing
	}
	return nil
}

func (x *SystemSettingsProto_DtmfTone) GetTypePlayedWhenDialing() *SettingProto {
	if x != nil {
		return x.TypePlayedWhenDialing
	}
	return nil
}

type SystemSettingsProto_HapticFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   *SettingProto `protobuf:"bytes,1,opt,name=enabled" json:"enabled,omitempty"`
	Intensity *SettingProto `protobuf:"bytes,2,opt,name=intensity" json:"intensity,omitempty"`
}

func (x *SystemSettingsProto_HapticFeedback) Reset() {
	*x = SystemSettingsProto_HapticFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_HapticFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_HapticFeedback) ProtoMessage() {}

func (x *SystemSettingsProto_HapticFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_HapticFeedback.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_HapticFeedback) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 4}
}

func (x *SystemSettingsProto_HapticFeedback) GetEnabled() *SettingProto {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *SystemSettingsProto_HapticFeedback) GetIntensity() *SettingProto {
	if x != nil {
		return x.Intensity
	}
	return nil
}

type SystemSettingsProto_Lockscreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoundsEnabled *SettingProto `protobuf:"bytes,1,opt,name=sounds_enabled,json=soundsEnabled" json:"sounds_enabled,omitempty"`
	Disabled      *SettingProto `protobuf:"bytes,2,opt,name=disabled" json:"disabled,omitempty"`
}

func (x *SystemSettingsProto_Lockscreen) Reset() {
	*x = SystemSettingsProto_Lockscreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Lockscreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Lockscreen) ProtoMessage() {}

func (x *SystemSettingsProto_Lockscreen) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Lockscreen.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Lockscreen) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 5}
}

func (x *SystemSettingsProto_Lockscreen) GetSoundsEnabled() *SettingProto {
	if x != nil {
		return x.SoundsEnabled
	}
	return nil
}

func (x *SystemSettingsProto_Lockscreen) GetDisabled() *SettingProto {
	if x != nil {
		return x.Disabled
	}
	return nil
}

type SystemSettingsProto_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sound                              *SettingProto `protobuf:"bytes,1,opt,name=sound" json:"sound,omitempty"`
	SoundCache                         *SettingProto `protobuf:"bytes,2,opt,name=sound_cache,json=soundCache" json:"sound_cache,omitempty"`
	LightPulse                         *SettingProto `protobuf:"bytes,3,opt,name=light_pulse,json=lightPulse" json:"light_pulse,omitempty"`
	VibrationIntensity                 *SettingProto `protobuf:"bytes,4,opt,name=vibration_intensity,json=vibrationIntensity" json:"vibration_intensity,omitempty"`
	CameraFlashNotification            *SettingProto `protobuf:"bytes,5,opt,name=camera_flash_notification,json=cameraFlashNotification" json:"camera_flash_notification,omitempty"`
	ScreenFlashNotification            *SettingProto `protobuf:"bytes,6,opt,name=screen_flash_notification,json=screenFlashNotification" json:"screen_flash_notification,omitempty"`
	ScreenFlashNotificationColorGlobal *SettingProto `protobuf:"bytes,7,opt,name=screen_flash_notification_color_global,json=screenFlashNotificationColorGlobal" json:"screen_flash_notification_color_global,omitempty"`
}

func (x *SystemSettingsProto_Notification) Reset() {
	*x = SystemSettingsProto_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Notification) ProtoMessage() {}

func (x *SystemSettingsProto_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Notification.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Notification) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 6}
}

func (x *SystemSettingsProto_Notification) GetSound() *SettingProto {
	if x != nil {
		return x.Sound
	}
	return nil
}

func (x *SystemSettingsProto_Notification) GetSoundCache() *SettingProto {
	if x != nil {
		return x.SoundCache
	}
	return nil
}

func (x *SystemSettingsProto_Notification) GetLightPulse() *SettingProto {
	if x != nil {
		return x.LightPulse
	}
	return nil
}

func (x *SystemSettingsProto_Notification) GetVibrationIntensity() *SettingProto {
	if x != nil {
		return x.VibrationIntensity
	}
	return nil
}

func (x *SystemSettingsProto_Notification) GetCameraFlashNotification() *SettingProto {
	if x != nil {
		return x.CameraFlashNotification
	}
	return nil
}

func (x *SystemSettingsProto_Notification) GetScreenFlashNotification() *SettingProto {
	if x != nil {
		return x.ScreenFlashNotification
	}
	return nil
}

func (x *SystemSettingsProto_Notification) GetScreenFlashNotificationColorGlobal() *SettingProto {
	if x != nil {
		return x.ScreenFlashNotificationColorGlobal
	}
	return nil
}

type SystemSettingsProto_Ringtone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "ringtone" in code. The system-wide default ringtone URI.
	DefaultUri *SettingProto `protobuf:"bytes,1,opt,name=default_uri,json=defaultUri" json:"default_uri,omitempty"`
	Cache      *SettingProto `protobuf:"bytes,2,opt,name=cache" json:"cache,omitempty"`
}

func (x *SystemSettingsProto_Ringtone) Reset() {
	*x = SystemSettingsProto_Ringtone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Ringtone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Ringtone) ProtoMessage() {}

func (x *SystemSettingsProto_Ringtone) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Ringtone.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Ringtone) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 7}
}

func (x *SystemSettingsProto_Ringtone) GetDefaultUri() *SettingProto {
	if x != nil {
		return x.DefaultUri
	}
	return nil
}

func (x *SystemSettingsProto_Ringtone) GetCache() *SettingProto {
	if x != nil {
		return x.Cache
	}
	return nil
}

type SystemSettingsProto_Rotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Control whether the accelerometer will be used to change screen
	// orientation.  If 0, it will not be used unless explicitly requested
	// by the application; if 1, it will be used by default unless
	// explicitly disabled by the application.
	AccelerometerRotation *SettingProto `protobuf:"bytes,1,opt,name=accelerometer_rotation,json=accelerometerRotation" json:"accelerometer_rotation,omitempty"`
	// Default screen rotation when no other policy applies.
	// When accelerometer_rotation is zero and no on-screen Activity expresses a
	// preference, this rotation value will be used. Must be one of the
	// {@link android.view.Surface#ROTATION_0 Surface rotation constants}.
	UserRotation *SettingProto `protobuf:"bytes,2,opt,name=user_rotation,json=userRotation" json:"user_rotation,omitempty"`
	// Control whether the rotation lock toggle in the System UI should be hidden.
	// Typically this is done for accessibility purposes to make it harder for
	// the user to accidentally toggle the rotation lock while the display rotation
	// has been locked for accessibility.
	// If 0, then rotation lock toggle is not hidden for accessibility (although it may be
	// unavailable for other reasons).  If 1, then the rotation lock toggle is hidden.
	HideRotationLockToggleForAccessibility *SettingProto `protobuf:"bytes,3,opt,name=hide_rotation_lock_toggle_for_accessibility,json=hideRotationLockToggleForAccessibility" json:"hide_rotation_lock_toggle_for_accessibility,omitempty"`
}

func (x *SystemSettingsProto_Rotation) Reset() {
	*x = SystemSettingsProto_Rotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Rotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Rotation) ProtoMessage() {}

func (x *SystemSettingsProto_Rotation) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Rotation.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Rotation) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 8}
}

func (x *SystemSettingsProto_Rotation) GetAccelerometerRotation() *SettingProto {
	if x != nil {
		return x.AccelerometerRotation
	}
	return nil
}

func (x *SystemSettingsProto_Rotation) GetUserRotation() *SettingProto {
	if x != nil {
		return x.UserRotation
	}
	return nil
}

func (x *SystemSettingsProto_Rotation) GetHideRotationLockToggleForAccessibility() *SettingProto {
	if x != nil {
		return x.HideRotationLockToggleForAccessibility
	}
	return nil
}

type SystemSettingsProto_Screen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffTimeout           *SettingProto `protobuf:"bytes,1,opt,name=off_timeout,json=offTimeout" json:"off_timeout,omitempty"`
	Brightness           *SettingProto `protobuf:"bytes,2,opt,name=brightness" json:"brightness,omitempty"`
	BrightnessForVr      *SettingProto `protobuf:"bytes,3,opt,name=brightness_for_vr,json=brightnessForVr" json:"brightness_for_vr,omitempty"`
	BrightnessMode       *SettingProto `protobuf:"bytes,4,opt,name=brightness_mode,json=brightnessMode" json:"brightness_mode,omitempty"`
	AutoBrightnessAdj    *SettingProto `protobuf:"bytes,5,opt,name=auto_brightness_adj,json=autoBrightnessAdj" json:"auto_brightness_adj,omitempty"`
	BrightnessFloat      *SettingProto `protobuf:"bytes,6,opt,name=brightness_float,json=brightnessFloat" json:"brightness_float,omitempty"`
	BrightnessForVrFloat *SettingProto `protobuf:"bytes,7,opt,name=brightness_for_vr_float,json=brightnessForVrFloat" json:"brightness_for_vr_float,omitempty"`
}

func (x *SystemSettingsProto_Screen) Reset() {
	*x = SystemSettingsProto_Screen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Screen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Screen) ProtoMessage() {}

func (x *SystemSettingsProto_Screen) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Screen.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Screen) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 9}
}

func (x *SystemSettingsProto_Screen) GetOffTimeout() *SettingProto {
	if x != nil {
		return x.OffTimeout
	}
	return nil
}

func (x *SystemSettingsProto_Screen) GetBrightness() *SettingProto {
	if x != nil {
		return x.Brightness
	}
	return nil
}

func (x *SystemSettingsProto_Screen) GetBrightnessForVr() *SettingProto {
	if x != nil {
		return x.BrightnessForVr
	}
	return nil
}

func (x *SystemSettingsProto_Screen) GetBrightnessMode() *SettingProto {
	if x != nil {
		return x.BrightnessMode
	}
	return nil
}

func (x *SystemSettingsProto_Screen) GetAutoBrightnessAdj() *SettingProto {
	if x != nil {
		return x.AutoBrightnessAdj
	}
	return nil
}

func (x *SystemSettingsProto_Screen) GetBrightnessFloat() *SettingProto {
	if x != nil {
		return x.BrightnessFloat
	}
	return nil
}

func (x *SystemSettingsProto_Screen) GetBrightnessForVrFloat() *SettingProto {
	if x != nil {
		return x.BrightnessForVrFloat
	}
	return nil
}

type SystemSettingsProto_Sip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveCalls *SettingProto `protobuf:"bytes,1,opt,name=receive_calls,json=receiveCalls" json:"receive_calls,omitempty"`
	CallOptions  *SettingProto `protobuf:"bytes,2,opt,name=call_options,json=callOptions" json:"call_options,omitempty"`
	Always       *SettingProto `protobuf:"bytes,3,opt,name=always" json:"always,omitempty"`
	AddressOnly  *SettingProto `protobuf:"bytes,4,opt,name=address_only,json=addressOnly" json:"address_only,omitempty"`
}

func (x *SystemSettingsProto_Sip) Reset() {
	*x = SystemSettingsProto_Sip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Sip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Sip) ProtoMessage() {}

func (x *SystemSettingsProto_Sip) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Sip.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Sip) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 10}
}

func (x *SystemSettingsProto_Sip) GetReceiveCalls() *SettingProto {
	if x != nil {
		return x.ReceiveCalls
	}
	return nil
}

func (x *SystemSettingsProto_Sip) GetCallOptions() *SettingProto {
	if x != nil {
		return x.CallOptions
	}
	return nil
}

func (x *SystemSettingsProto_Sip) GetAlways() *SettingProto {
	if x != nil {
		return x.Always
	}
	return nil
}

func (x *SystemSettingsProto_Sip) GetAddressOnly() *SettingProto {
	if x != nil {
		return x.AddressOnly
	}
	return nil
}

type SystemSettingsProto_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoReplace   *SettingProto `protobuf:"bytes,1,opt,name=auto_replace,json=autoReplace" json:"auto_replace,omitempty"`
	AutoCaps      *SettingProto `protobuf:"bytes,2,opt,name=auto_caps,json=autoCaps" json:"auto_caps,omitempty"`
	AutoPunctuate *SettingProto `protobuf:"bytes,3,opt,name=auto_punctuate,json=autoPunctuate" json:"auto_punctuate,omitempty"`
	ShowPassword  *SettingProto `protobuf:"bytes,4,opt,name=show_password,json=showPassword" json:"show_password,omitempty"`
}

func (x *SystemSettingsProto_Text) Reset() {
	*x = SystemSettingsProto_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Text) ProtoMessage() {}

func (x *SystemSettingsProto_Text) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Text.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Text) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 11}
}

func (x *SystemSettingsProto_Text) GetAutoReplace() *SettingProto {
	if x != nil {
		return x.AutoReplace
	}
	return nil
}

func (x *SystemSettingsProto_Text) GetAutoCaps() *SettingProto {
	if x != nil {
		return x.AutoCaps
	}
	return nil
}

func (x *SystemSettingsProto_Text) GetAutoPunctuate() *SettingProto {
	if x != nil {
		return x.AutoPunctuate
	}
	return nil
}

func (x *SystemSettingsProto_Text) GetShowPassword() *SettingProto {
	if x != nil {
		return x.ShowPassword
	}
	return nil
}

type SystemSettingsProto_Touchpad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NaturalScrolling *SettingProto `protobuf:"bytes,1,opt,name=natural_scrolling,json=naturalScrolling" json:"natural_scrolling,omitempty"`
	PointerSpeed     *SettingProto `protobuf:"bytes,2,opt,name=pointer_speed,json=pointerSpeed" json:"pointer_speed,omitempty"`
	RightClickZone   *SettingProto `protobuf:"bytes,3,opt,name=right_click_zone,json=rightClickZone" json:"right_click_zone,omitempty"`
	TapToClick       *SettingProto `protobuf:"bytes,4,opt,name=tap_to_click,json=tapToClick" json:"tap_to_click,omitempty"`
	TapDragging      *SettingProto `protobuf:"bytes,5,opt,name=tap_dragging,json=tapDragging" json:"tap_dragging,omitempty"`
}

func (x *SystemSettingsProto_Touchpad) Reset() {
	*x = SystemSettingsProto_Touchpad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Touchpad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Touchpad) ProtoMessage() {}

func (x *SystemSettingsProto_Touchpad) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Touchpad.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Touchpad) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 12}
}

func (x *SystemSettingsProto_Touchpad) GetNaturalScrolling() *SettingProto {
	if x != nil {
		return x.NaturalScrolling
	}
	return nil
}

func (x *SystemSettingsProto_Touchpad) GetPointerSpeed() *SettingProto {
	if x != nil {
		return x.PointerSpeed
	}
	return nil
}

func (x *SystemSettingsProto_Touchpad) GetRightClickZone() *SettingProto {
	if x != nil {
		return x.RightClickZone
	}
	return nil
}

func (x *SystemSettingsProto_Touchpad) GetTapToClick() *SettingProto {
	if x != nil {
		return x.TapToClick
	}
	return nil
}

func (x *SystemSettingsProto_Touchpad) GetTapDragging() *SettingProto {
	if x != nil {
		return x.TapDragging
	}
	return nil
}

type SystemSettingsProto_Vibrate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On           *SettingProto `protobuf:"bytes,1,opt,name=on" json:"on,omitempty"`
	InputDevices *SettingProto `protobuf:"bytes,2,opt,name=input_devices,json=inputDevices" json:"input_devices,omitempty"`
	// Whether silent mode should allow vibration feedback. This is used
	// internally in AudioService and the Sound settings activity to coordinate
	// decoupling of vibrate and silent modes. This setting will likely be
	// removed in a future release with support for audio/vibe feedback
	// profiles.
	// Not used anymore. On devices with vibrator, the user explicitly selects
	// silent or vibrate mode. Kept for use by legacy database upgrade code in
	// DatabaseHelper.
	InSilent       *SettingProto `protobuf:"bytes,3,opt,name=in_silent,json=inSilent" json:"in_silent,omitempty"`
	WhenRinging    *SettingProto `protobuf:"bytes,4,opt,name=when_ringing,json=whenRinging" json:"when_ringing,omitempty"`
	AlarmIntensity *SettingProto `protobuf:"bytes,5,opt,name=alarm_intensity,json=alarmIntensity" json:"alarm_intensity,omitempty"`
	MediaIntensity *SettingProto `protobuf:"bytes,6,opt,name=media_intensity,json=mediaIntensity" json:"media_intensity,omitempty"`
	RingIntensity  *SettingProto `protobuf:"bytes,7,opt,name=ring_intensity,json=ringIntensity" json:"ring_intensity,omitempty"`
}

func (x *SystemSettingsProto_Vibrate) Reset() {
	*x = SystemSettingsProto_Vibrate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Vibrate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Vibrate) ProtoMessage() {}

func (x *SystemSettingsProto_Vibrate) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Vibrate.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Vibrate) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 13}
}

func (x *SystemSettingsProto_Vibrate) GetOn() *SettingProto {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *SystemSettingsProto_Vibrate) GetInputDevices() *SettingProto {
	if x != nil {
		return x.InputDevices
	}
	return nil
}

func (x *SystemSettingsProto_Vibrate) GetInSilent() *SettingProto {
	if x != nil {
		return x.InSilent
	}
	return nil
}

func (x *SystemSettingsProto_Vibrate) GetWhenRinging() *SettingProto {
	if x != nil {
		return x.WhenRinging
	}
	return nil
}

func (x *SystemSettingsProto_Vibrate) GetAlarmIntensity() *SettingProto {
	if x != nil {
		return x.AlarmIntensity
	}
	return nil
}

func (x *SystemSettingsProto_Vibrate) GetMediaIntensity() *SettingProto {
	if x != nil {
		return x.MediaIntensity
	}
	return nil
}

func (x *SystemSettingsProto_Vibrate) GetRingIntensity() *SettingProto {
	if x != nil {
		return x.RingIntensity
	}
	return nil
}

type SystemSettingsProto_Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ring          *SettingProto `protobuf:"bytes,1,opt,name=ring" json:"ring,omitempty"`
	System        *SettingProto `protobuf:"bytes,2,opt,name=system" json:"system,omitempty"`
	Voice         *SettingProto `protobuf:"bytes,3,opt,name=voice" json:"voice,omitempty"`
	Music         *SettingProto `protobuf:"bytes,4,opt,name=music" json:"music,omitempty"`
	Alarm         *SettingProto `protobuf:"bytes,5,opt,name=alarm" json:"alarm,omitempty"`
	Notification  *SettingProto `protobuf:"bytes,6,opt,name=notification" json:"notification,omitempty"`
	BluetoothSco  *SettingProto `protobuf:"bytes,7,opt,name=bluetooth_sco,json=bluetoothSco" json:"bluetooth_sco,omitempty"`
	Accessibility *SettingProto `protobuf:"bytes,8,opt,name=accessibility" json:"accessibility,omitempty"`
	Master        *SettingProto `protobuf:"bytes,9,opt,name=master" json:"master,omitempty"`
	MasterMono    *SettingProto `protobuf:"bytes,10,opt,name=master_mono,json=masterMono" json:"master_mono,omitempty"`
	// Determines which streams are affected by ringer mode changes. The stream
	// type's bit will be set to 1 if it should be muted when going into an
	// inaudible ringer mode.
	ModeRingerStreamsAffected *SettingProto `protobuf:"bytes,11,opt,name=mode_ringer_streams_affected,json=modeRingerStreamsAffected" json:"mode_ringer_streams_affected,omitempty"`
	// Which streams are affected by mute. The stream type's bit should be set
	// to 1 if it should be muted when a mute request is received.
	MuteStreamsAffected *SettingProto `protobuf:"bytes,12,opt,name=mute_streams_affected,json=muteStreamsAffected" json:"mute_streams_affected,omitempty"`
	// Master balance (float -1.f = 100% left, 0.f = dead center, 1.f = 100% right).
	MasterBalance *SettingProto `protobuf:"bytes,13,opt,name=master_balance,json=masterBalance" json:"master_balance,omitempty"`
}

func (x *SystemSettingsProto_Volume) Reset() {
	*x = SystemSettingsProto_Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSettingsProto_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSettingsProto_Volume) ProtoMessage() {}

func (x *SystemSettingsProto_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSettingsProto_Volume.ProtoReflect.Descriptor instead.
func (*SystemSettingsProto_Volume) Descriptor() ([]byte, []int) {
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP(), []int{0, 14}
}

func (x *SystemSettingsProto_Volume) GetRing() *SettingProto {
	if x != nil {
		return x.Ring
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetSystem() *SettingProto {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetVoice() *SettingProto {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetMusic() *SettingProto {
	if x != nil {
		return x.Music
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetAlarm() *SettingProto {
	if x != nil {
		return x.Alarm
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetNotification() *SettingProto {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetBluetoothSco() *SettingProto {
	if x != nil {
		return x.BluetoothSco
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetAccessibility() *SettingProto {
	if x != nil {
		return x.Accessibility
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetMaster() *SettingProto {
	if x != nil {
		return x.Master
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetMasterMono() *SettingProto {
	if x != nil {
		return x.MasterMono
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetModeRingerStreamsAffected() *SettingProto {
	if x != nil {
		return x.ModeRingerStreamsAffected
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetMuteStreamsAffected() *SettingProto {
	if x != nil {
		return x.MuteStreamsAffected
	}
	return nil
}

func (x *SystemSettingsProto_Volume) GetMasterBalance() *SettingProto {
	if x != nil {
		return x.MasterBalance
	}
	return nil
}

var File_frameworks_base_core_proto_android_providers_settings_system_proto protoreflect.FileDescriptor

var file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDesc = []byte{
	0x0a, 0x42, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x42, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x4a, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x67,
	0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x57, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x52, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x12,
	0x61, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x67, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x64,
	0x74, 0x6d, 0x66, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x74, 0x6d, 0x66, 0x54, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x64, 0x74, 0x6d, 0x66, 0x54, 0x6f,
	0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x67, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x0f, 0x68,
	0x61, 0x70, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x0e, 0x68, 0x61, 0x70, 0x74, 0x69, 0x63, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x13, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65,
	0x52, 0x08, 0x72, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x12, 0x64, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x7a, 0x61, 0x72, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x11, 0x73, 0x65, 0x74, 0x75, 0x70, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64,
	0x48, 0x61, 0x73, 0x52, 0x75, 0x6e, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a,
	0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x67, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x47, 0x74, 0x61, 0x6c, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x03, 0x73, 0x69, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x70, 0x52,
	0x03, 0x73, 0x69, 0x70, 0x12, 0x67, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a,
	0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5a, 0x0a,
	0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x31, 0x32, 0x5f, 0x32,
	0x34, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x31, 0x32, 0x32, 0x34, 0x12, 0x54, 0x0a, 0x08, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70,
	0x61, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70,
	0x61, 0x64, 0x52, 0x08, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x08,
	0x74, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x07, 0x74, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x07,
	0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x4e, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x69, 0x0a, 0x17, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x13, 0x77, 0x68, 0x65, 0x6e, 0x54, 0x6f, 0x4d, 0x61, 0x6b,
	0x65, 0x57, 0x69, 0x66, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x72, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x1a, 0xa7, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x0b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x55, 0x72, 0x69, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xeb, 0x01, 0x0a, 0x09,
	0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x75, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x3a,
	0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xa9, 0x03, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x7a, 0x0a, 0x1f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x1c,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x5d, 0x0a, 0x10,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x6f,
	0x77, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x3a, 0x08, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xe3, 0x01, 0x0a, 0x08, 0x44, 0x74, 0x6d, 0x66, 0x54, 0x6f,
	0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x68, 0x65, 0x6e, 0x44, 0x69, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x18, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x15, 0x74, 0x79, 0x70, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x57, 0x68, 0x65, 0x6e, 0x44, 0x69, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xbc, 0x01, 0x0a, 0x0e,
	0x48, 0x61, 0x70, 0x74, 0x69, 0x63, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4d,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xc3, 0x01, 0x0a, 0x0a, 0x4c,
	0x6f, 0x63, 0x6b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64,
	0x1a, 0xcb, 0x05, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x54, 0x0a, 0x0b,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x75, 0x6c,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x12, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x19, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x17, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x19, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x17, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x87, 0x01, 0x0a, 0x26, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x22, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0x9f,
	0x01, 0x0a, 0x08, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x55, 0x72, 0x69, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64,
	0x1a, 0xed, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a,
	0x16, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x2b, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x26,
	0x68, 0x69, 0x64, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64,
	0x1a, 0xad, 0x05, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x0b, 0x6f,
	0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x46, 0x6f, 0x72, 0x56, 0x72, 0x12, 0x5c, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x6a, 0x12, 0x5e, 0x0a, 0x10, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0f, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x6a, 0x0a, 0x17, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x72, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x14, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x56,
	0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64,
	0x1a, 0xe6, 0x02, 0x0a, 0x03, 0x53, 0x69, 0x70, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x63,
	0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x3a,
	0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xf0, 0x02, 0x0a, 0x04, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x61, 0x70, 0x73, 0x12, 0x5a, 0x0a, 0x0e,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x50,
	0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xde, 0x03, 0x0a,
	0x08, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x70, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x11, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x10, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x0d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x74, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x0a, 0x74, 0x61, 0x70, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x0c, 0x74,
	0x61, 0x70, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5,
	0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x70, 0x44, 0x72, 0x61, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x1a, 0xf4, 0x04,
	0x0a, 0x07, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x02, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x58,
	0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x73,
	0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x77, 0x68,
	0x65, 0x6e, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01,
	0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x12, 0x5c, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x5a,
	0x0a, 0x0e, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x02, 0x08, 0x64, 0x1a, 0xf5, 0x08, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03,
	0x03, 0x08, 0xc8, 0x01, 0x52, 0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x49, 0x0a, 0x05, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52,
	0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x57, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x58, 0x0a, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0c, 0x62, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x12, 0x59, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87,
	0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09,
	0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x54, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x6f, 0x12, 0x74, 0x0a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08,
	0xc8, 0x01, 0x52, 0x19, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x67, 0x0a,
	0x15, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03, 0x08, 0xc8,
	0x01, 0x52, 0x13, 0x6d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x03,
	0x08, 0xc8, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x08, 0x9a, 0x9f, 0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x3a, 0x08, 0x9a, 0x9f,
	0xd5, 0x87, 0x03, 0x02, 0x08, 0x64, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x15,
	0x10, 0x16, 0x42, 0x02, 0x50, 0x01,
}

var (
	file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescOnce sync.Once
	file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescData = file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDesc
)

func file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescGZIP() []byte {
	file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescOnce.Do(func() {
		file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescData)
	})
	return file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDescData
}

var file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_frameworks_base_core_proto_android_providers_settings_system_proto_goTypes = []any{
	(*SystemSettingsProto)(nil),                // 0: android.providers.settings.SystemSettingsProto
	(*SystemSettingsProto_Alarm)(nil),          // 1: android.providers.settings.SystemSettingsProto.Alarm
	(*SystemSettingsProto_Bluetooth)(nil),      // 2: android.providers.settings.SystemSettingsProto.Bluetooth
	(*SystemSettingsProto_DevOptions)(nil),     // 3: android.providers.settings.SystemSettingsProto.DevOptions
	(*SystemSettingsProto_DtmfTone)(nil),       // 4: android.providers.settings.SystemSettingsProto.DtmfTone
	(*SystemSettingsProto_HapticFeedback)(nil), // 5: android.providers.settings.SystemSettingsProto.HapticFeedback
	(*SystemSettingsProto_Lockscreen)(nil),     // 6: android.providers.settings.SystemSettingsProto.Lockscreen
	(*SystemSettingsProto_Notification)(nil),   // 7: android.providers.settings.SystemSettingsProto.Notification
	(*SystemSettingsProto_Ringtone)(nil),       // 8: android.providers.settings.SystemSettingsProto.Ringtone
	(*SystemSettingsProto_Rotation)(nil),       // 9: android.providers.settings.SystemSettingsProto.Rotation
	(*SystemSettingsProto_Screen)(nil),         // 10: android.providers.settings.SystemSettingsProto.Screen
	(*SystemSettingsProto_Sip)(nil),            // 11: android.providers.settings.SystemSettingsProto.Sip
	(*SystemSettingsProto_Text)(nil),           // 12: android.providers.settings.SystemSettingsProto.Text
	(*SystemSettingsProto_Touchpad)(nil),       // 13: android.providers.settings.SystemSettingsProto.Touchpad
	(*SystemSettingsProto_Vibrate)(nil),        // 14: android.providers.settings.SystemSettingsProto.Vibrate
	(*SystemSettingsProto_Volume)(nil),         // 15: android.providers.settings.SystemSettingsProto.Volume
	(*SettingsOperationProto)(nil),             // 16: android.providers.settings.SettingsOperationProto
	(*SettingProto)(nil),                       // 17: android.providers.settings.SettingProto
}
var file_frameworks_base_core_proto_android_providers_settings_system_proto_depIdxs = []int32{
	16,  // 0: android.providers.settings.SystemSettingsProto.historical_operations:type_name -> android.providers.settings.SettingsOperationProto
	17,  // 1: android.providers.settings.SystemSettingsProto.advanced_settings:type_name -> android.providers.settings.SettingProto
	1,   // 2: android.providers.settings.SystemSettingsProto.alarm:type_name -> android.providers.settings.SystemSettingsProto.Alarm
	2,   // 3: android.providers.settings.SystemSettingsProto.bluetooth:type_name -> android.providers.settings.SystemSettingsProto.Bluetooth
	17,  // 4: android.providers.settings.SystemSettingsProto.display_color_mode:type_name -> android.providers.settings.SettingProto
	3,   // 5: android.providers.settings.SystemSettingsProto.developer_options:type_name -> android.providers.settings.SystemSettingsProto.DevOptions
	4,   // 6: android.providers.settings.SystemSettingsProto.dtmf_tone:type_name -> android.providers.settings.SystemSettingsProto.DtmfTone
	17,  // 7: android.providers.settings.SystemSettingsProto.egg_mode:type_name -> android.providers.settings.SettingProto
	17,  // 8: android.providers.settings.SystemSettingsProto.end_button_behavior:type_name -> android.providers.settings.SettingProto
	17,  // 9: android.providers.settings.SystemSettingsProto.font_scale:type_name -> android.providers.settings.SettingProto
	5,   // 10: android.providers.settings.SystemSettingsProto.haptic_feedback:type_name -> android.providers.settings.SystemSettingsProto.HapticFeedback
	17,  // 11: android.providers.settings.SystemSettingsProto.hearing_aid:type_name -> android.providers.settings.SettingProto
	17,  // 12: android.providers.settings.SystemSettingsProto.lock_to_app_enabled:type_name -> android.providers.settings.SettingProto
	6,   // 13: android.providers.settings.SystemSettingsProto.lockscreen:type_name -> android.providers.settings.SystemSettingsProto.Lockscreen
	17,  // 14: android.providers.settings.SystemSettingsProto.media_button_receiver:type_name -> android.providers.settings.SettingProto
	7,   // 15: android.providers.settings.SystemSettingsProto.notification:type_name -> android.providers.settings.SystemSettingsProto.Notification
	17,  // 16: android.providers.settings.SystemSettingsProto.pointer_speed:type_name -> android.providers.settings.SettingProto
	8,   // 17: android.providers.settings.SystemSettingsProto.ringtone:type_name -> android.providers.settings.SystemSettingsProto.Ringtone
	9,   // 18: android.providers.settings.SystemSettingsProto.rotation:type_name -> android.providers.settings.SystemSettingsProto.Rotation
	10,  // 19: android.providers.settings.SystemSettingsProto.screen:type_name -> android.providers.settings.SystemSettingsProto.Screen
	17,  // 20: android.providers.settings.SystemSettingsProto.setup_wizard_has_run:type_name -> android.providers.settings.SettingProto
	17,  // 21: android.providers.settings.SystemSettingsProto.show_battery_percent:type_name -> android.providers.settings.SettingProto
	17,  // 22: android.providers.settings.SystemSettingsProto.show_gtalk_service_status:type_name -> android.providers.settings.SettingProto
	11,  // 23: android.providers.settings.SystemSettingsProto.sip:type_name -> android.providers.settings.SystemSettingsProto.Sip
	17,  // 24: android.providers.settings.SystemSettingsProto.sound_effects_enabled:type_name -> android.providers.settings.SettingProto
	17,  // 25: android.providers.settings.SystemSettingsProto.system_locales:type_name -> android.providers.settings.SettingProto
	12,  // 26: android.providers.settings.SystemSettingsProto.text:type_name -> android.providers.settings.SystemSettingsProto.Text
	17,  // 27: android.providers.settings.SystemSettingsProto.time_12_24:type_name -> android.providers.settings.SettingProto
	13,  // 28: android.providers.settings.SystemSettingsProto.touchpad:type_name -> android.providers.settings.SystemSettingsProto.Touchpad
	17,  // 29: android.providers.settings.SystemSettingsProto.tty_mode:type_name -> android.providers.settings.SettingProto
	14,  // 30: android.providers.settings.SystemSettingsProto.vibrate:type_name -> android.providers.settings.SystemSettingsProto.Vibrate
	15,  // 31: android.providers.settings.SystemSettingsProto.volume:type_name -> android.providers.settings.SystemSettingsProto.Volume
	17,  // 32: android.providers.settings.SystemSettingsProto.when_to_make_wifi_calls:type_name -> android.providers.settings.SettingProto
	17,  // 33: android.providers.settings.SystemSettingsProto.apply_ramping_ringer:type_name -> android.providers.settings.SettingProto
	17,  // 34: android.providers.settings.SystemSettingsProto.Alarm.default_uri:type_name -> android.providers.settings.SettingProto
	17,  // 35: android.providers.settings.SystemSettingsProto.Alarm.alert_cache:type_name -> android.providers.settings.SettingProto
	17,  // 36: android.providers.settings.SystemSettingsProto.Bluetooth.discoverability:type_name -> android.providers.settings.SettingProto
	17,  // 37: android.providers.settings.SystemSettingsProto.Bluetooth.discoverability_timeout_secs:type_name -> android.providers.settings.SettingProto
	17,  // 38: android.providers.settings.SystemSettingsProto.DevOptions.pointer_location:type_name -> android.providers.settings.SettingProto
	17,  // 39: android.providers.settings.SystemSettingsProto.DevOptions.show_touches:type_name -> android.providers.settings.SettingProto
	17,  // 40: android.providers.settings.SystemSettingsProto.DevOptions.window_orientation_listener_log:type_name -> android.providers.settings.SettingProto
	17,  // 41: android.providers.settings.SystemSettingsProto.DevOptions.show_key_presses:type_name -> android.providers.settings.SettingProto
	17,  // 42: android.providers.settings.SystemSettingsProto.DtmfTone.play_when_dialing:type_name -> android.providers.settings.SettingProto
	17,  // 43: android.providers.settings.SystemSettingsProto.DtmfTone.type_played_when_dialing:type_name -> android.providers.settings.SettingProto
	17,  // 44: android.providers.settings.SystemSettingsProto.HapticFeedback.enabled:type_name -> android.providers.settings.SettingProto
	17,  // 45: android.providers.settings.SystemSettingsProto.HapticFeedback.intensity:type_name -> android.providers.settings.SettingProto
	17,  // 46: android.providers.settings.SystemSettingsProto.Lockscreen.sounds_enabled:type_name -> android.providers.settings.SettingProto
	17,  // 47: android.providers.settings.SystemSettingsProto.Lockscreen.disabled:type_name -> android.providers.settings.SettingProto
	17,  // 48: android.providers.settings.SystemSettingsProto.Notification.sound:type_name -> android.providers.settings.SettingProto
	17,  // 49: android.providers.settings.SystemSettingsProto.Notification.sound_cache:type_name -> android.providers.settings.SettingProto
	17,  // 50: android.providers.settings.SystemSettingsProto.Notification.light_pulse:type_name -> android.providers.settings.SettingProto
	17,  // 51: android.providers.settings.SystemSettingsProto.Notification.vibration_intensity:type_name -> android.providers.settings.SettingProto
	17,  // 52: android.providers.settings.SystemSettingsProto.Notification.camera_flash_notification:type_name -> android.providers.settings.SettingProto
	17,  // 53: android.providers.settings.SystemSettingsProto.Notification.screen_flash_notification:type_name -> android.providers.settings.SettingProto
	17,  // 54: android.providers.settings.SystemSettingsProto.Notification.screen_flash_notification_color_global:type_name -> android.providers.settings.SettingProto
	17,  // 55: android.providers.settings.SystemSettingsProto.Ringtone.default_uri:type_name -> android.providers.settings.SettingProto
	17,  // 56: android.providers.settings.SystemSettingsProto.Ringtone.cache:type_name -> android.providers.settings.SettingProto
	17,  // 57: android.providers.settings.SystemSettingsProto.Rotation.accelerometer_rotation:type_name -> android.providers.settings.SettingProto
	17,  // 58: android.providers.settings.SystemSettingsProto.Rotation.user_rotation:type_name -> android.providers.settings.SettingProto
	17,  // 59: android.providers.settings.SystemSettingsProto.Rotation.hide_rotation_lock_toggle_for_accessibility:type_name -> android.providers.settings.SettingProto
	17,  // 60: android.providers.settings.SystemSettingsProto.Screen.off_timeout:type_name -> android.providers.settings.SettingProto
	17,  // 61: android.providers.settings.SystemSettingsProto.Screen.brightness:type_name -> android.providers.settings.SettingProto
	17,  // 62: android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr:type_name -> android.providers.settings.SettingProto
	17,  // 63: android.providers.settings.SystemSettingsProto.Screen.brightness_mode:type_name -> android.providers.settings.SettingProto
	17,  // 64: android.providers.settings.SystemSettingsProto.Screen.auto_brightness_adj:type_name -> android.providers.settings.SettingProto
	17,  // 65: android.providers.settings.SystemSettingsProto.Screen.brightness_float:type_name -> android.providers.settings.SettingProto
	17,  // 66: android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr_float:type_name -> android.providers.settings.SettingProto
	17,  // 67: android.providers.settings.SystemSettingsProto.Sip.receive_calls:type_name -> android.providers.settings.SettingProto
	17,  // 68: android.providers.settings.SystemSettingsProto.Sip.call_options:type_name -> android.providers.settings.SettingProto
	17,  // 69: android.providers.settings.SystemSettingsProto.Sip.always:type_name -> android.providers.settings.SettingProto
	17,  // 70: android.providers.settings.SystemSettingsProto.Sip.address_only:type_name -> android.providers.settings.SettingProto
	17,  // 71: android.providers.settings.SystemSettingsProto.Text.auto_replace:type_name -> android.providers.settings.SettingProto
	17,  // 72: android.providers.settings.SystemSettingsProto.Text.auto_caps:type_name -> android.providers.settings.SettingProto
	17,  // 73: android.providers.settings.SystemSettingsProto.Text.auto_punctuate:type_name -> android.providers.settings.SettingProto
	17,  // 74: android.providers.settings.SystemSettingsProto.Text.show_password:type_name -> android.providers.settings.SettingProto
	17,  // 75: android.providers.settings.SystemSettingsProto.Touchpad.natural_scrolling:type_name -> android.providers.settings.SettingProto
	17,  // 76: android.providers.settings.SystemSettingsProto.Touchpad.pointer_speed:type_name -> android.providers.settings.SettingProto
	17,  // 77: android.providers.settings.SystemSettingsProto.Touchpad.right_click_zone:type_name -> android.providers.settings.SettingProto
	17,  // 78: android.providers.settings.SystemSettingsProto.Touchpad.tap_to_click:type_name -> android.providers.settings.SettingProto
	17,  // 79: android.providers.settings.SystemSettingsProto.Touchpad.tap_dragging:type_name -> android.providers.settings.SettingProto
	17,  // 80: android.providers.settings.SystemSettingsProto.Vibrate.on:type_name -> android.providers.settings.SettingProto
	17,  // 81: android.providers.settings.SystemSettingsProto.Vibrate.input_devices:type_name -> android.providers.settings.SettingProto
	17,  // 82: android.providers.settings.SystemSettingsProto.Vibrate.in_silent:type_name -> android.providers.settings.SettingProto
	17,  // 83: android.providers.settings.SystemSettingsProto.Vibrate.when_ringing:type_name -> android.providers.settings.SettingProto
	17,  // 84: android.providers.settings.SystemSettingsProto.Vibrate.alarm_intensity:type_name -> android.providers.settings.SettingProto
	17,  // 85: android.providers.settings.SystemSettingsProto.Vibrate.media_intensity:type_name -> android.providers.settings.SettingProto
	17,  // 86: android.providers.settings.SystemSettingsProto.Vibrate.ring_intensity:type_name -> android.providers.settings.SettingProto
	17,  // 87: android.providers.settings.SystemSettingsProto.Volume.ring:type_name -> android.providers.settings.SettingProto
	17,  // 88: android.providers.settings.SystemSettingsProto.Volume.system:type_name -> android.providers.settings.SettingProto
	17,  // 89: android.providers.settings.SystemSettingsProto.Volume.voice:type_name -> android.providers.settings.SettingProto
	17,  // 90: android.providers.settings.SystemSettingsProto.Volume.music:type_name -> android.providers.settings.SettingProto
	17,  // 91: android.providers.settings.SystemSettingsProto.Volume.alarm:type_name -> android.providers.settings.SettingProto
	17,  // 92: android.providers.settings.SystemSettingsProto.Volume.notification:type_name -> android.providers.settings.SettingProto
	17,  // 93: android.providers.settings.SystemSettingsProto.Volume.bluetooth_sco:type_name -> android.providers.settings.SettingProto
	17,  // 94: android.providers.settings.SystemSettingsProto.Volume.accessibility:type_name -> android.providers.settings.SettingProto
	17,  // 95: android.providers.settings.SystemSettingsProto.Volume.master:type_name -> android.providers.settings.SettingProto
	17,  // 96: android.providers.settings.SystemSettingsProto.Volume.master_mono:type_name -> android.providers.settings.SettingProto
	17,  // 97: android.providers.settings.SystemSettingsProto.Volume.mode_ringer_streams_affected:type_name -> android.providers.settings.SettingProto
	17,  // 98: android.providers.settings.SystemSettingsProto.Volume.mute_streams_affected:type_name -> android.providers.settings.SettingProto
	17,  // 99: android.providers.settings.SystemSettingsProto.Volume.master_balance:type_name -> android.providers.settings.SettingProto
	100, // [100:100] is the sub-list for method output_type
	100, // [100:100] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_frameworks_base_core_proto_android_providers_settings_system_proto_init() }
func file_frameworks_base_core_proto_android_providers_settings_system_proto_init() {
	if File_frameworks_base_core_proto_android_providers_settings_system_proto != nil {
		return
	}
	file_frameworks_base_core_proto_android_providers_settings_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Bluetooth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_DevOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_DtmfTone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_HapticFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Lockscreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Ringtone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Rotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Screen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Sip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Touchpad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Vibrate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SystemSettingsProto_Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_frameworks_base_core_proto_android_providers_settings_system_proto_goTypes,
		DependencyIndexes: file_frameworks_base_core_proto_android_providers_settings_system_proto_depIdxs,
		MessageInfos:      file_frameworks_base_core_proto_android_providers_settings_system_proto_msgTypes,
	}.Build()
	File_frameworks_base_core_proto_android_providers_settings_system_proto = out.File
	file_frameworks_base_core_proto_android_providers_settings_system_proto_rawDesc = nil
	file_frameworks_base_core_proto_android_providers_settings_system_proto_goTypes = nil
	file_frameworks_base_core_proto_android_providers_settings_system_proto_depIdxs = nil
}
